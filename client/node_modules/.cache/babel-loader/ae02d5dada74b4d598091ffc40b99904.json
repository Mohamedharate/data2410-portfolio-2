{"ast":null,"code":"'use strict'; // Implementation of OP_MSG spec:\n// https://github.com/mongodb/specifications/blob/master/source/message/OP_MSG.rst\n//\n// struct Section {\n//   uint8 payloadType;\n//   union payload {\n//       document  document; // payloadType == 0\n//       struct sequence { // payloadType == 1\n//           int32      size;\n//           cstring    identifier;\n//           document*  documents;\n//       };\n//   };\n// };\n// struct OP_MSG {\n//   struct MsgHeader {\n//       int32  messageLength;\n//       int32  requestID;\n//       int32  responseTo;\n//       int32  opCode = 2013;\n//   };\n//   uint32      flagBits;\n//   Section+    sections;\n//   [uint32     checksum;]\n// };\n\nconst Buffer = require('safe-buffer').Buffer;\n\nconst opcodes = require('../wireprotocol/shared').opcodes;\n\nconst databaseNamespace = require('../wireprotocol/shared').databaseNamespace;\n\nconst ReadPreference = require('../topologies/read_preference');\n\nconst MongoError = require('../../core/error').MongoError; // Incrementing request id\n\n\nlet _requestId = 0; // Msg Flags\n\nconst OPTS_CHECKSUM_PRESENT = 1;\nconst OPTS_MORE_TO_COME = 2;\nconst OPTS_EXHAUST_ALLOWED = 1 << 16;\n\nclass Msg {\n  constructor(bson, ns, command, options) {\n    // Basic options needed to be passed in\n    if (command == null) throw new Error('query must be specified for query'); // Basic options\n\n    this.bson = bson;\n    this.ns = ns;\n    this.command = command;\n    this.command.$db = databaseNamespace(ns);\n\n    if (options.readPreference && options.readPreference.mode !== ReadPreference.PRIMARY) {\n      this.command.$readPreference = options.readPreference.toJSON();\n    } // Ensure empty options\n\n\n    this.options = options || {}; // Additional options\n\n    this.requestId = options.requestId ? options.requestId : Msg.getRequestId(); // Serialization option\n\n    this.serializeFunctions = typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n    this.ignoreUndefined = typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : false;\n    this.checkKeys = typeof options.checkKeys === 'boolean' ? options.checkKeys : false;\n    this.maxBsonSize = options.maxBsonSize || 1024 * 1024 * 16; // flags\n\n    this.checksumPresent = false;\n    this.moreToCome = options.moreToCome || false;\n    this.exhaustAllowed = typeof options.exhaustAllowed === 'boolean' ? options.exhaustAllowed : false;\n  }\n\n  toBin() {\n    const buffers = [];\n    let flags = 0;\n\n    if (this.checksumPresent) {\n      flags |= OPTS_CHECKSUM_PRESENT;\n    }\n\n    if (this.moreToCome) {\n      flags |= OPTS_MORE_TO_COME;\n    }\n\n    if (this.exhaustAllowed) {\n      flags |= OPTS_EXHAUST_ALLOWED;\n    }\n\n    const header = Buffer.alloc(4 * 4 + // Header\n    4 // Flags\n    );\n    buffers.push(header);\n    let totalLength = header.length;\n    const command = this.command;\n    totalLength += this.makeDocumentSegment(buffers, command);\n    header.writeInt32LE(totalLength, 0); // messageLength\n\n    header.writeInt32LE(this.requestId, 4); // requestID\n\n    header.writeInt32LE(0, 8); // responseTo\n\n    header.writeInt32LE(opcodes.OP_MSG, 12); // opCode\n\n    header.writeUInt32LE(flags, 16); // flags\n\n    return buffers;\n  }\n\n  makeDocumentSegment(buffers, document) {\n    const payloadTypeBuffer = Buffer.alloc(1);\n    payloadTypeBuffer[0] = 0;\n    const documentBuffer = this.serializeBson(document);\n    buffers.push(payloadTypeBuffer);\n    buffers.push(documentBuffer);\n    return payloadTypeBuffer.length + documentBuffer.length;\n  }\n\n  serializeBson(document) {\n    return this.bson.serialize(document, {\n      checkKeys: this.checkKeys,\n      serializeFunctions: this.serializeFunctions,\n      ignoreUndefined: this.ignoreUndefined\n    });\n  }\n\n}\n\nMsg.getRequestId = function () {\n  _requestId = _requestId + 1 & 0x7fffffff;\n  return _requestId;\n};\n\nclass BinMsg {\n  constructor(bson, message, msgHeader, msgBody, opts) {\n    opts = opts || {\n      promoteLongs: true,\n      promoteValues: true,\n      promoteBuffers: false\n    };\n    this.parsed = false;\n    this.raw = message;\n    this.data = msgBody;\n    this.bson = bson;\n    this.opts = opts; // Read the message header\n\n    this.length = msgHeader.length;\n    this.requestId = msgHeader.requestId;\n    this.responseTo = msgHeader.responseTo;\n    this.opCode = msgHeader.opCode;\n    this.fromCompressed = msgHeader.fromCompressed; // Read response flags\n\n    this.responseFlags = msgBody.readInt32LE(0);\n    this.checksumPresent = (this.responseFlags & OPTS_CHECKSUM_PRESENT) !== 0;\n    this.moreToCome = (this.responseFlags & OPTS_MORE_TO_COME) !== 0;\n    this.exhaustAllowed = (this.responseFlags & OPTS_EXHAUST_ALLOWED) !== 0;\n    this.promoteLongs = typeof opts.promoteLongs === 'boolean' ? opts.promoteLongs : true;\n    this.promoteValues = typeof opts.promoteValues === 'boolean' ? opts.promoteValues : true;\n    this.promoteBuffers = typeof opts.promoteBuffers === 'boolean' ? opts.promoteBuffers : false;\n    this.documents = [];\n  }\n\n  isParsed() {\n    return this.parsed;\n  }\n\n  parse(options) {\n    // Don't parse again if not needed\n    if (this.parsed) return;\n    options = options || {};\n    this.index = 4; // Allow the return of raw documents instead of parsing\n\n    const raw = options.raw || false;\n    const documentsReturnedIn = options.documentsReturnedIn || null;\n    const promoteLongs = typeof options.promoteLongs === 'boolean' ? options.promoteLongs : this.opts.promoteLongs;\n    const promoteValues = typeof options.promoteValues === 'boolean' ? options.promoteValues : this.opts.promoteValues;\n    const promoteBuffers = typeof options.promoteBuffers === 'boolean' ? options.promoteBuffers : this.opts.promoteBuffers; // Set up the options\n\n    const _options = {\n      promoteLongs: promoteLongs,\n      promoteValues: promoteValues,\n      promoteBuffers: promoteBuffers\n    };\n\n    while (this.index < this.data.length) {\n      const payloadType = this.data.readUInt8(this.index++);\n\n      if (payloadType === 1) {\n        // It was decided that no driver makes use of payload type 1\n        throw new MongoError('OP_MSG Payload Type 1 detected unsupported protocol');\n      } else if (payloadType === 0) {\n        const bsonSize = this.data.readUInt32LE(this.index);\n        const bin = this.data.slice(this.index, this.index + bsonSize);\n        this.documents.push(raw ? bin : this.bson.deserialize(bin, _options));\n        this.index += bsonSize;\n      }\n    }\n\n    if (this.documents.length === 1 && documentsReturnedIn != null && raw) {\n      const fieldsAsRaw = {};\n      fieldsAsRaw[documentsReturnedIn] = true;\n      _options.fieldsAsRaw = fieldsAsRaw;\n      const doc = this.bson.deserialize(this.documents[0], _options);\n      this.documents = [doc];\n    }\n\n    this.parsed = true;\n  }\n\n}\n\nmodule.exports = {\n  Msg,\n  BinMsg\n};","map":{"version":3,"sources":["C:/Users/Tanja Aakerholt/Documents/GitHub/portfolio2/client/node_modules/mongodb/lib/core/connection/msg.js"],"names":["Buffer","require","opcodes","databaseNamespace","ReadPreference","MongoError","_requestId","OPTS_CHECKSUM_PRESENT","OPTS_MORE_TO_COME","OPTS_EXHAUST_ALLOWED","Msg","constructor","bson","ns","command","options","Error","$db","readPreference","mode","PRIMARY","$readPreference","toJSON","requestId","getRequestId","serializeFunctions","ignoreUndefined","checkKeys","maxBsonSize","checksumPresent","moreToCome","exhaustAllowed","toBin","buffers","flags","header","alloc","push","totalLength","length","makeDocumentSegment","writeInt32LE","OP_MSG","writeUInt32LE","document","payloadTypeBuffer","documentBuffer","serializeBson","serialize","BinMsg","message","msgHeader","msgBody","opts","promoteLongs","promoteValues","promoteBuffers","parsed","raw","data","responseTo","opCode","fromCompressed","responseFlags","readInt32LE","documents","isParsed","parse","index","documentsReturnedIn","_options","payloadType","readUInt8","bsonSize","readUInt32LE","bin","slice","deserialize","fieldsAsRaw","doc","module","exports"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\n// Implementation of OP_MSG spec:\r\n// https://github.com/mongodb/specifications/blob/master/source/message/OP_MSG.rst\r\n//\r\n// struct Section {\r\n//   uint8 payloadType;\r\n//   union payload {\r\n//       document  document; // payloadType == 0\r\n//       struct sequence { // payloadType == 1\r\n//           int32      size;\r\n//           cstring    identifier;\r\n//           document*  documents;\r\n//       };\r\n//   };\r\n// };\r\n\r\n// struct OP_MSG {\r\n//   struct MsgHeader {\r\n//       int32  messageLength;\r\n//       int32  requestID;\r\n//       int32  responseTo;\r\n//       int32  opCode = 2013;\r\n//   };\r\n//   uint32      flagBits;\r\n//   Section+    sections;\r\n//   [uint32     checksum;]\r\n// };\r\n\r\nconst Buffer = require('safe-buffer').Buffer;\r\nconst opcodes = require('../wireprotocol/shared').opcodes;\r\nconst databaseNamespace = require('../wireprotocol/shared').databaseNamespace;\r\nconst ReadPreference = require('../topologies/read_preference');\r\nconst MongoError = require('../../core/error').MongoError;\r\n\r\n// Incrementing request id\r\nlet _requestId = 0;\r\n\r\n// Msg Flags\r\nconst OPTS_CHECKSUM_PRESENT = 1;\r\nconst OPTS_MORE_TO_COME = 2;\r\nconst OPTS_EXHAUST_ALLOWED = 1 << 16;\r\n\r\nclass Msg {\r\n  constructor(bson, ns, command, options) {\r\n    // Basic options needed to be passed in\r\n    if (command == null) throw new Error('query must be specified for query');\r\n\r\n    // Basic options\r\n    this.bson = bson;\r\n    this.ns = ns;\r\n    this.command = command;\r\n    this.command.$db = databaseNamespace(ns);\r\n\r\n    if (options.readPreference && options.readPreference.mode !== ReadPreference.PRIMARY) {\r\n      this.command.$readPreference = options.readPreference.toJSON();\r\n    }\r\n\r\n    // Ensure empty options\r\n    this.options = options || {};\r\n\r\n    // Additional options\r\n    this.requestId = options.requestId ? options.requestId : Msg.getRequestId();\r\n\r\n    // Serialization option\r\n    this.serializeFunctions =\r\n      typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\r\n    this.ignoreUndefined =\r\n      typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : false;\r\n    this.checkKeys = typeof options.checkKeys === 'boolean' ? options.checkKeys : false;\r\n    this.maxBsonSize = options.maxBsonSize || 1024 * 1024 * 16;\r\n\r\n    // flags\r\n    this.checksumPresent = false;\r\n    this.moreToCome = options.moreToCome || false;\r\n    this.exhaustAllowed =\r\n      typeof options.exhaustAllowed === 'boolean' ? options.exhaustAllowed : false;\r\n  }\r\n\r\n  toBin() {\r\n    const buffers = [];\r\n    let flags = 0;\r\n\r\n    if (this.checksumPresent) {\r\n      flags |= OPTS_CHECKSUM_PRESENT;\r\n    }\r\n\r\n    if (this.moreToCome) {\r\n      flags |= OPTS_MORE_TO_COME;\r\n    }\r\n\r\n    if (this.exhaustAllowed) {\r\n      flags |= OPTS_EXHAUST_ALLOWED;\r\n    }\r\n\r\n    const header = Buffer.alloc(\r\n      4 * 4 + // Header\r\n        4 // Flags\r\n    );\r\n\r\n    buffers.push(header);\r\n\r\n    let totalLength = header.length;\r\n    const command = this.command;\r\n    totalLength += this.makeDocumentSegment(buffers, command);\r\n\r\n    header.writeInt32LE(totalLength, 0); // messageLength\r\n    header.writeInt32LE(this.requestId, 4); // requestID\r\n    header.writeInt32LE(0, 8); // responseTo\r\n    header.writeInt32LE(opcodes.OP_MSG, 12); // opCode\r\n    header.writeUInt32LE(flags, 16); // flags\r\n    return buffers;\r\n  }\r\n\r\n  makeDocumentSegment(buffers, document) {\r\n    const payloadTypeBuffer = Buffer.alloc(1);\r\n    payloadTypeBuffer[0] = 0;\r\n\r\n    const documentBuffer = this.serializeBson(document);\r\n    buffers.push(payloadTypeBuffer);\r\n    buffers.push(documentBuffer);\r\n\r\n    return payloadTypeBuffer.length + documentBuffer.length;\r\n  }\r\n\r\n  serializeBson(document) {\r\n    return this.bson.serialize(document, {\r\n      checkKeys: this.checkKeys,\r\n      serializeFunctions: this.serializeFunctions,\r\n      ignoreUndefined: this.ignoreUndefined\r\n    });\r\n  }\r\n}\r\n\r\nMsg.getRequestId = function() {\r\n  _requestId = (_requestId + 1) & 0x7fffffff;\r\n  return _requestId;\r\n};\r\n\r\nclass BinMsg {\r\n  constructor(bson, message, msgHeader, msgBody, opts) {\r\n    opts = opts || { promoteLongs: true, promoteValues: true, promoteBuffers: false };\r\n    this.parsed = false;\r\n    this.raw = message;\r\n    this.data = msgBody;\r\n    this.bson = bson;\r\n    this.opts = opts;\r\n\r\n    // Read the message header\r\n    this.length = msgHeader.length;\r\n    this.requestId = msgHeader.requestId;\r\n    this.responseTo = msgHeader.responseTo;\r\n    this.opCode = msgHeader.opCode;\r\n    this.fromCompressed = msgHeader.fromCompressed;\r\n\r\n    // Read response flags\r\n    this.responseFlags = msgBody.readInt32LE(0);\r\n    this.checksumPresent = (this.responseFlags & OPTS_CHECKSUM_PRESENT) !== 0;\r\n    this.moreToCome = (this.responseFlags & OPTS_MORE_TO_COME) !== 0;\r\n    this.exhaustAllowed = (this.responseFlags & OPTS_EXHAUST_ALLOWED) !== 0;\r\n    this.promoteLongs = typeof opts.promoteLongs === 'boolean' ? opts.promoteLongs : true;\r\n    this.promoteValues = typeof opts.promoteValues === 'boolean' ? opts.promoteValues : true;\r\n    this.promoteBuffers = typeof opts.promoteBuffers === 'boolean' ? opts.promoteBuffers : false;\r\n\r\n    this.documents = [];\r\n  }\r\n\r\n  isParsed() {\r\n    return this.parsed;\r\n  }\r\n\r\n  parse(options) {\r\n    // Don't parse again if not needed\r\n    if (this.parsed) return;\r\n    options = options || {};\r\n\r\n    this.index = 4;\r\n    // Allow the return of raw documents instead of parsing\r\n    const raw = options.raw || false;\r\n    const documentsReturnedIn = options.documentsReturnedIn || null;\r\n    const promoteLongs =\r\n      typeof options.promoteLongs === 'boolean' ? options.promoteLongs : this.opts.promoteLongs;\r\n    const promoteValues =\r\n      typeof options.promoteValues === 'boolean' ? options.promoteValues : this.opts.promoteValues;\r\n    const promoteBuffers =\r\n      typeof options.promoteBuffers === 'boolean'\r\n        ? options.promoteBuffers\r\n        : this.opts.promoteBuffers;\r\n\r\n    // Set up the options\r\n    const _options = {\r\n      promoteLongs: promoteLongs,\r\n      promoteValues: promoteValues,\r\n      promoteBuffers: promoteBuffers\r\n    };\r\n\r\n    while (this.index < this.data.length) {\r\n      const payloadType = this.data.readUInt8(this.index++);\r\n      if (payloadType === 1) {\r\n        // It was decided that no driver makes use of payload type 1\r\n        throw new MongoError('OP_MSG Payload Type 1 detected unsupported protocol');\r\n      } else if (payloadType === 0) {\r\n        const bsonSize = this.data.readUInt32LE(this.index);\r\n        const bin = this.data.slice(this.index, this.index + bsonSize);\r\n        this.documents.push(raw ? bin : this.bson.deserialize(bin, _options));\r\n\r\n        this.index += bsonSize;\r\n      }\r\n    }\r\n\r\n    if (this.documents.length === 1 && documentsReturnedIn != null && raw) {\r\n      const fieldsAsRaw = {};\r\n      fieldsAsRaw[documentsReturnedIn] = true;\r\n      _options.fieldsAsRaw = fieldsAsRaw;\r\n\r\n      const doc = this.bson.deserialize(this.documents[0], _options);\r\n      this.documents = [doc];\r\n    }\r\n\r\n    this.parsed = true;\r\n  }\r\n}\r\n\r\nmodule.exports = { Msg, BinMsg };\r\n"]},"metadata":{},"sourceType":"script"}