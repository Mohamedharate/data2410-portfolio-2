{"ast":null,"code":"'use strict';\n\nconst applyWriteConcern = require('./utils').applyWriteConcern;\n\nconst AddUserOperation = require('./operations/add_user');\n\nconst ExecuteDbAdminCommandOperation = require('./operations/execute_db_admin_command');\n\nconst RemoveUserOperation = require('./operations/remove_user');\n\nconst ValidateCollectionOperation = require('./operations/validate_collection');\n\nconst ListDatabasesOperation = require('./operations/list_databases');\n\nconst executeOperation = require('./operations/execute_operation');\n/**\r\n * @fileOverview The **Admin** class is an internal class that allows convenient access to\r\n * the admin functionality and commands for MongoDB.\r\n *\r\n * **ADMIN Cannot directly be instantiated**\r\n * @example\r\n * const MongoClient = require('mongodb').MongoClient;\r\n * const test = require('assert');\r\n * // Connection url\r\n * const url = 'mongodb://localhost:27017';\r\n * // Database Name\r\n * const dbName = 'test';\r\n *\r\n * // Connect using MongoClient\r\n * MongoClient.connect(url, function(err, client) {\r\n *   // Use the admin database for the operation\r\n *   const adminDb = client.db(dbName).admin();\r\n *\r\n *   // List all the available databases\r\n *   adminDb.listDatabases(function(err, dbs) {\r\n *     test.equal(null, err);\r\n *     test.ok(dbs.databases.length > 0);\r\n *     client.close();\r\n *   });\r\n * });\r\n */\n\n/**\r\n * Create a new Admin instance (INTERNAL TYPE, do not instantiate directly)\r\n * @class\r\n * @return {Admin} a collection instance.\r\n */\n\n\nfunction Admin(db, topology, promiseLibrary) {\n  if (!(this instanceof Admin)) return new Admin(db, topology); // Internal state\n\n  this.s = {\n    db: db,\n    topology: topology,\n    promiseLibrary: promiseLibrary\n  };\n}\n/**\r\n * The callback format for results\r\n * @callback Admin~resultCallback\r\n * @param {MongoError} error An error instance representing the error during the execution.\r\n * @param {object} result The result object if the command was executed successfully.\r\n */\n\n/**\r\n * Execute a command\r\n * @method\r\n * @param {object} command The command hash\r\n * @param {object} [options] Optional settings.\r\n * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\r\n * @param {number} [options.maxTimeMS] Number of milliseconds to wait before aborting the query.\r\n * @param {Admin~resultCallback} [callback] The command result callback\r\n * @return {Promise} returns Promise if no callback passed\r\n */\n\n\nAdmin.prototype.command = function (command, options, callback) {\n  const args = Array.prototype.slice.call(arguments, 1);\n  callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;\n  options = args.length ? args.shift() : {};\n  const commandOperation = new ExecuteDbAdminCommandOperation(this.s.db, command, options);\n  return executeOperation(this.s.db.s.topology, commandOperation, callback);\n};\n/**\r\n * Retrieve the server information for the current\r\n * instance of the db client\r\n *\r\n * @param {Object} [options] optional parameters for this operation\r\n * @param {ClientSession} [options.session] optional session to use for this operation\r\n * @param {Admin~resultCallback} [callback] The command result callback\r\n * @return {Promise} returns Promise if no callback passed\r\n */\n\n\nAdmin.prototype.buildInfo = function (options, callback) {\n  if (typeof options === 'function') callback = options, options = {};\n  options = options || {};\n  const cmd = {\n    buildinfo: 1\n  };\n  const buildInfoOperation = new ExecuteDbAdminCommandOperation(this.s.db, cmd, options);\n  return executeOperation(this.s.db.s.topology, buildInfoOperation, callback);\n};\n/**\r\n * Retrieve the server information for the current\r\n * instance of the db client\r\n *\r\n * @param {Object} [options] optional parameters for this operation\r\n * @param {ClientSession} [options.session] optional session to use for this operation\r\n * @param {Admin~resultCallback} [callback] The command result callback\r\n * @return {Promise} returns Promise if no callback passed\r\n */\n\n\nAdmin.prototype.serverInfo = function (options, callback) {\n  if (typeof options === 'function') callback = options, options = {};\n  options = options || {};\n  const cmd = {\n    buildinfo: 1\n  };\n  const serverInfoOperation = new ExecuteDbAdminCommandOperation(this.s.db, cmd, options);\n  return executeOperation(this.s.db.s.topology, serverInfoOperation, callback);\n};\n/**\r\n * Retrieve this db's server status.\r\n *\r\n * @param {Object} [options] optional parameters for this operation\r\n * @param {ClientSession} [options.session] optional session to use for this operation\r\n * @param {Admin~resultCallback} [callback] The command result callback\r\n * @return {Promise} returns Promise if no callback passed\r\n */\n\n\nAdmin.prototype.serverStatus = function (options, callback) {\n  if (typeof options === 'function') callback = options, options = {};\n  options = options || {};\n  const serverStatusOperation = new ExecuteDbAdminCommandOperation(this.s.db, {\n    serverStatus: 1\n  }, options);\n  return executeOperation(this.s.db.s.topology, serverStatusOperation, callback);\n};\n/**\r\n * Ping the MongoDB server and retrieve results\r\n *\r\n * @param {Object} [options] optional parameters for this operation\r\n * @param {ClientSession} [options.session] optional session to use for this operation\r\n * @param {Admin~resultCallback} [callback] The command result callback\r\n * @return {Promise} returns Promise if no callback passed\r\n */\n\n\nAdmin.prototype.ping = function (options, callback) {\n  if (typeof options === 'function') callback = options, options = {};\n  options = options || {};\n  const cmd = {\n    ping: 1\n  };\n  const pingOperation = new ExecuteDbAdminCommandOperation(this.s.db, cmd, options);\n  return executeOperation(this.s.db.s.topology, pingOperation, callback);\n};\n/**\r\n * Add a user to the database.\r\n * @method\r\n * @param {string} username The username.\r\n * @param {string} password The password.\r\n * @param {object} [options] Optional settings.\r\n * @param {(number|string)} [options.w] **Deprecated** The write concern. Use writeConcern instead.\r\n * @param {number} [options.wtimeout] **Deprecated** The write concern timeout. Use writeConcern instead.\r\n * @param {boolean} [options.j=false] **Deprecated** Specify a journal write concern. Use writeConcern instead.\r\n * @param {boolean} [options.fsync=false] **Deprecated** Specify a file sync write concern. Use writeConcern instead.\r\n * @param {object|WriteConcern} [options.writeConcern] Specify write concern settings.\r\n * @param {object} [options.customData] Custom data associated with the user (only Mongodb 2.6 or higher)\r\n * @param {object[]} [options.roles] Roles associated with the created user (only Mongodb 2.6 or higher)\r\n * @param {ClientSession} [options.session] optional session to use for this operation\r\n * @param {Admin~resultCallback} [callback] The command result callback\r\n * @return {Promise} returns Promise if no callback passed\r\n */\n\n\nAdmin.prototype.addUser = function (username, password, options, callback) {\n  const args = Array.prototype.slice.call(arguments, 2);\n  callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined; // Special case where there is no password ($external users)\n\n  if (typeof username === 'string' && password != null && typeof password === 'object') {\n    options = password;\n    password = null;\n  }\n\n  options = args.length ? args.shift() : {};\n  options = Object.assign({}, options); // Get the options\n\n  options = applyWriteConcern(options, {\n    db: this.s.db\n  }); // Set the db name to admin\n\n  options.dbName = 'admin';\n  const addUserOperation = new AddUserOperation(this.s.db, username, password, options);\n  return executeOperation(this.s.db.s.topology, addUserOperation, callback);\n};\n/**\r\n * Remove a user from a database\r\n * @method\r\n * @param {string} username The username.\r\n * @param {object} [options] Optional settings.\r\n * @param {(number|string)} [options.w] **Deprecated** The write concern. Use writeConcern instead.\r\n * @param {number} [options.wtimeout] **Deprecated** The write concern timeout. Use writeConcern instead.\r\n * @param {boolean} [options.j=false] **Deprecated** Specify a journal write concern. Use writeConcern instead.\r\n * @param {boolean} [options.fsync=false] **Deprecated** Specify a file sync write concern. Use writeConcern instead.\r\n * @param {object|WriteConcern} [options.writeConcern] Specify write concern settings.\r\n * @param {ClientSession} [options.session] optional session to use for this operation\r\n * @param {Admin~resultCallback} [callback] The command result callback\r\n * @return {Promise} returns Promise if no callback passed\r\n */\n\n\nAdmin.prototype.removeUser = function (username, options, callback) {\n  const args = Array.prototype.slice.call(arguments, 1);\n  callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;\n  options = args.length ? args.shift() : {};\n  options = Object.assign({}, options); // Get the options\n\n  options = applyWriteConcern(options, {\n    db: this.s.db\n  }); // Set the db name\n\n  options.dbName = 'admin';\n  const removeUserOperation = new RemoveUserOperation(this.s.db, username, options);\n  return executeOperation(this.s.db.s.topology, removeUserOperation, callback);\n};\n/**\r\n * Validate an existing collection\r\n *\r\n * @param {string} collectionName The name of the collection to validate.\r\n * @param {object} [options] Optional settings.\r\n * @param {boolean} [options.background] Validates a collection in the background, without interrupting read or write traffic (only in MongoDB 4.4+)\r\n * @param {ClientSession} [options.session] optional session to use for this operation\r\n * @param {Admin~resultCallback} [callback] The command result callback.\r\n * @return {Promise} returns Promise if no callback passed\r\n */\n\n\nAdmin.prototype.validateCollection = function (collectionName, options, callback) {\n  if (typeof options === 'function') callback = options, options = {};\n  options = options || {};\n  const validateCollectionOperation = new ValidateCollectionOperation(this, collectionName, options);\n  return executeOperation(this.s.db.s.topology, validateCollectionOperation, callback);\n};\n/**\r\n * List the available databases\r\n *\r\n * @param {object} [options] Optional settings.\r\n * @param {boolean} [options.nameOnly=false] Whether the command should return only db names, or names and size info.\r\n * @param {ClientSession} [options.session] optional session to use for this operation\r\n * @param {Admin~resultCallback} [callback] The command result callback.\r\n * @return {Promise} returns Promise if no callback passed\r\n */\n\n\nAdmin.prototype.listDatabases = function (options, callback) {\n  if (typeof options === 'function') callback = options, options = {};\n  options = options || {};\n  return executeOperation(this.s.db.s.topology, new ListDatabasesOperation(this.s.db, options), callback);\n};\n/**\r\n * Get ReplicaSet status\r\n *\r\n * @param {Object} [options] optional parameters for this operation\r\n * @param {ClientSession} [options.session] optional session to use for this operation\r\n * @param {Admin~resultCallback} [callback] The command result callback.\r\n * @return {Promise} returns Promise if no callback passed\r\n */\n\n\nAdmin.prototype.replSetGetStatus = function (options, callback) {\n  if (typeof options === 'function') callback = options, options = {};\n  options = options || {};\n  const replSetGetStatusOperation = new ExecuteDbAdminCommandOperation(this.s.db, {\n    replSetGetStatus: 1\n  }, options);\n  return executeOperation(this.s.db.s.topology, replSetGetStatusOperation, callback);\n};\n\nmodule.exports = Admin;","map":{"version":3,"sources":["C:/Users/Tanja Aakerholt/Documents/GitHub/portfolio2/client/node_modules/mongodb/lib/admin.js"],"names":["applyWriteConcern","require","AddUserOperation","ExecuteDbAdminCommandOperation","RemoveUserOperation","ValidateCollectionOperation","ListDatabasesOperation","executeOperation","Admin","db","topology","promiseLibrary","s","prototype","command","options","callback","args","Array","slice","call","arguments","length","pop","undefined","shift","commandOperation","buildInfo","cmd","buildinfo","buildInfoOperation","serverInfo","serverInfoOperation","serverStatus","serverStatusOperation","ping","pingOperation","addUser","username","password","Object","assign","dbName","addUserOperation","removeUser","removeUserOperation","validateCollection","collectionName","validateCollectionOperation","listDatabases","replSetGetStatus","replSetGetStatusOperation","module","exports"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nconst applyWriteConcern = require('./utils').applyWriteConcern;\r\n\r\nconst AddUserOperation = require('./operations/add_user');\r\nconst ExecuteDbAdminCommandOperation = require('./operations/execute_db_admin_command');\r\nconst RemoveUserOperation = require('./operations/remove_user');\r\nconst ValidateCollectionOperation = require('./operations/validate_collection');\r\nconst ListDatabasesOperation = require('./operations/list_databases');\r\n\r\nconst executeOperation = require('./operations/execute_operation');\r\n\r\n/**\r\n * @fileOverview The **Admin** class is an internal class that allows convenient access to\r\n * the admin functionality and commands for MongoDB.\r\n *\r\n * **ADMIN Cannot directly be instantiated**\r\n * @example\r\n * const MongoClient = require('mongodb').MongoClient;\r\n * const test = require('assert');\r\n * // Connection url\r\n * const url = 'mongodb://localhost:27017';\r\n * // Database Name\r\n * const dbName = 'test';\r\n *\r\n * // Connect using MongoClient\r\n * MongoClient.connect(url, function(err, client) {\r\n *   // Use the admin database for the operation\r\n *   const adminDb = client.db(dbName).admin();\r\n *\r\n *   // List all the available databases\r\n *   adminDb.listDatabases(function(err, dbs) {\r\n *     test.equal(null, err);\r\n *     test.ok(dbs.databases.length > 0);\r\n *     client.close();\r\n *   });\r\n * });\r\n */\r\n\r\n/**\r\n * Create a new Admin instance (INTERNAL TYPE, do not instantiate directly)\r\n * @class\r\n * @return {Admin} a collection instance.\r\n */\r\nfunction Admin(db, topology, promiseLibrary) {\r\n  if (!(this instanceof Admin)) return new Admin(db, topology);\r\n\r\n  // Internal state\r\n  this.s = {\r\n    db: db,\r\n    topology: topology,\r\n    promiseLibrary: promiseLibrary\r\n  };\r\n}\r\n\r\n/**\r\n * The callback format for results\r\n * @callback Admin~resultCallback\r\n * @param {MongoError} error An error instance representing the error during the execution.\r\n * @param {object} result The result object if the command was executed successfully.\r\n */\r\n\r\n/**\r\n * Execute a command\r\n * @method\r\n * @param {object} command The command hash\r\n * @param {object} [options] Optional settings.\r\n * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\r\n * @param {number} [options.maxTimeMS] Number of milliseconds to wait before aborting the query.\r\n * @param {Admin~resultCallback} [callback] The command result callback\r\n * @return {Promise} returns Promise if no callback passed\r\n */\r\nAdmin.prototype.command = function(command, options, callback) {\r\n  const args = Array.prototype.slice.call(arguments, 1);\r\n  callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;\r\n  options = args.length ? args.shift() : {};\r\n\r\n  const commandOperation = new ExecuteDbAdminCommandOperation(this.s.db, command, options);\r\n\r\n  return executeOperation(this.s.db.s.topology, commandOperation, callback);\r\n};\r\n\r\n/**\r\n * Retrieve the server information for the current\r\n * instance of the db client\r\n *\r\n * @param {Object} [options] optional parameters for this operation\r\n * @param {ClientSession} [options.session] optional session to use for this operation\r\n * @param {Admin~resultCallback} [callback] The command result callback\r\n * @return {Promise} returns Promise if no callback passed\r\n */\r\nAdmin.prototype.buildInfo = function(options, callback) {\r\n  if (typeof options === 'function') (callback = options), (options = {});\r\n  options = options || {};\r\n\r\n  const cmd = { buildinfo: 1 };\r\n\r\n  const buildInfoOperation = new ExecuteDbAdminCommandOperation(this.s.db, cmd, options);\r\n\r\n  return executeOperation(this.s.db.s.topology, buildInfoOperation, callback);\r\n};\r\n\r\n/**\r\n * Retrieve the server information for the current\r\n * instance of the db client\r\n *\r\n * @param {Object} [options] optional parameters for this operation\r\n * @param {ClientSession} [options.session] optional session to use for this operation\r\n * @param {Admin~resultCallback} [callback] The command result callback\r\n * @return {Promise} returns Promise if no callback passed\r\n */\r\nAdmin.prototype.serverInfo = function(options, callback) {\r\n  if (typeof options === 'function') (callback = options), (options = {});\r\n  options = options || {};\r\n\r\n  const cmd = { buildinfo: 1 };\r\n\r\n  const serverInfoOperation = new ExecuteDbAdminCommandOperation(this.s.db, cmd, options);\r\n\r\n  return executeOperation(this.s.db.s.topology, serverInfoOperation, callback);\r\n};\r\n\r\n/**\r\n * Retrieve this db's server status.\r\n *\r\n * @param {Object} [options] optional parameters for this operation\r\n * @param {ClientSession} [options.session] optional session to use for this operation\r\n * @param {Admin~resultCallback} [callback] The command result callback\r\n * @return {Promise} returns Promise if no callback passed\r\n */\r\nAdmin.prototype.serverStatus = function(options, callback) {\r\n  if (typeof options === 'function') (callback = options), (options = {});\r\n  options = options || {};\r\n\r\n  const serverStatusOperation = new ExecuteDbAdminCommandOperation(\r\n    this.s.db,\r\n    { serverStatus: 1 },\r\n    options\r\n  );\r\n\r\n  return executeOperation(this.s.db.s.topology, serverStatusOperation, callback);\r\n};\r\n\r\n/**\r\n * Ping the MongoDB server and retrieve results\r\n *\r\n * @param {Object} [options] optional parameters for this operation\r\n * @param {ClientSession} [options.session] optional session to use for this operation\r\n * @param {Admin~resultCallback} [callback] The command result callback\r\n * @return {Promise} returns Promise if no callback passed\r\n */\r\nAdmin.prototype.ping = function(options, callback) {\r\n  if (typeof options === 'function') (callback = options), (options = {});\r\n  options = options || {};\r\n\r\n  const cmd = { ping: 1 };\r\n\r\n  const pingOperation = new ExecuteDbAdminCommandOperation(this.s.db, cmd, options);\r\n\r\n  return executeOperation(this.s.db.s.topology, pingOperation, callback);\r\n};\r\n\r\n/**\r\n * Add a user to the database.\r\n * @method\r\n * @param {string} username The username.\r\n * @param {string} password The password.\r\n * @param {object} [options] Optional settings.\r\n * @param {(number|string)} [options.w] **Deprecated** The write concern. Use writeConcern instead.\r\n * @param {number} [options.wtimeout] **Deprecated** The write concern timeout. Use writeConcern instead.\r\n * @param {boolean} [options.j=false] **Deprecated** Specify a journal write concern. Use writeConcern instead.\r\n * @param {boolean} [options.fsync=false] **Deprecated** Specify a file sync write concern. Use writeConcern instead.\r\n * @param {object|WriteConcern} [options.writeConcern] Specify write concern settings.\r\n * @param {object} [options.customData] Custom data associated with the user (only Mongodb 2.6 or higher)\r\n * @param {object[]} [options.roles] Roles associated with the created user (only Mongodb 2.6 or higher)\r\n * @param {ClientSession} [options.session] optional session to use for this operation\r\n * @param {Admin~resultCallback} [callback] The command result callback\r\n * @return {Promise} returns Promise if no callback passed\r\n */\r\nAdmin.prototype.addUser = function(username, password, options, callback) {\r\n  const args = Array.prototype.slice.call(arguments, 2);\r\n  callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;\r\n\r\n  // Special case where there is no password ($external users)\r\n  if (typeof username === 'string' && password != null && typeof password === 'object') {\r\n    options = password;\r\n    password = null;\r\n  }\r\n\r\n  options = args.length ? args.shift() : {};\r\n  options = Object.assign({}, options);\r\n  // Get the options\r\n  options = applyWriteConcern(options, { db: this.s.db });\r\n  // Set the db name to admin\r\n  options.dbName = 'admin';\r\n\r\n  const addUserOperation = new AddUserOperation(this.s.db, username, password, options);\r\n\r\n  return executeOperation(this.s.db.s.topology, addUserOperation, callback);\r\n};\r\n\r\n/**\r\n * Remove a user from a database\r\n * @method\r\n * @param {string} username The username.\r\n * @param {object} [options] Optional settings.\r\n * @param {(number|string)} [options.w] **Deprecated** The write concern. Use writeConcern instead.\r\n * @param {number} [options.wtimeout] **Deprecated** The write concern timeout. Use writeConcern instead.\r\n * @param {boolean} [options.j=false] **Deprecated** Specify a journal write concern. Use writeConcern instead.\r\n * @param {boolean} [options.fsync=false] **Deprecated** Specify a file sync write concern. Use writeConcern instead.\r\n * @param {object|WriteConcern} [options.writeConcern] Specify write concern settings.\r\n * @param {ClientSession} [options.session] optional session to use for this operation\r\n * @param {Admin~resultCallback} [callback] The command result callback\r\n * @return {Promise} returns Promise if no callback passed\r\n */\r\nAdmin.prototype.removeUser = function(username, options, callback) {\r\n  const args = Array.prototype.slice.call(arguments, 1);\r\n  callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;\r\n\r\n  options = args.length ? args.shift() : {};\r\n  options = Object.assign({}, options);\r\n  // Get the options\r\n  options = applyWriteConcern(options, { db: this.s.db });\r\n  // Set the db name\r\n  options.dbName = 'admin';\r\n\r\n  const removeUserOperation = new RemoveUserOperation(this.s.db, username, options);\r\n\r\n  return executeOperation(this.s.db.s.topology, removeUserOperation, callback);\r\n};\r\n\r\n/**\r\n * Validate an existing collection\r\n *\r\n * @param {string} collectionName The name of the collection to validate.\r\n * @param {object} [options] Optional settings.\r\n * @param {boolean} [options.background] Validates a collection in the background, without interrupting read or write traffic (only in MongoDB 4.4+)\r\n * @param {ClientSession} [options.session] optional session to use for this operation\r\n * @param {Admin~resultCallback} [callback] The command result callback.\r\n * @return {Promise} returns Promise if no callback passed\r\n */\r\nAdmin.prototype.validateCollection = function(collectionName, options, callback) {\r\n  if (typeof options === 'function') (callback = options), (options = {});\r\n  options = options || {};\r\n\r\n  const validateCollectionOperation = new ValidateCollectionOperation(\r\n    this,\r\n    collectionName,\r\n    options\r\n  );\r\n\r\n  return executeOperation(this.s.db.s.topology, validateCollectionOperation, callback);\r\n};\r\n\r\n/**\r\n * List the available databases\r\n *\r\n * @param {object} [options] Optional settings.\r\n * @param {boolean} [options.nameOnly=false] Whether the command should return only db names, or names and size info.\r\n * @param {ClientSession} [options.session] optional session to use for this operation\r\n * @param {Admin~resultCallback} [callback] The command result callback.\r\n * @return {Promise} returns Promise if no callback passed\r\n */\r\nAdmin.prototype.listDatabases = function(options, callback) {\r\n  if (typeof options === 'function') (callback = options), (options = {});\r\n  options = options || {};\r\n\r\n  return executeOperation(\r\n    this.s.db.s.topology,\r\n    new ListDatabasesOperation(this.s.db, options),\r\n    callback\r\n  );\r\n};\r\n\r\n/**\r\n * Get ReplicaSet status\r\n *\r\n * @param {Object} [options] optional parameters for this operation\r\n * @param {ClientSession} [options.session] optional session to use for this operation\r\n * @param {Admin~resultCallback} [callback] The command result callback.\r\n * @return {Promise} returns Promise if no callback passed\r\n */\r\nAdmin.prototype.replSetGetStatus = function(options, callback) {\r\n  if (typeof options === 'function') (callback = options), (options = {});\r\n  options = options || {};\r\n\r\n  const replSetGetStatusOperation = new ExecuteDbAdminCommandOperation(\r\n    this.s.db,\r\n    { replSetGetStatus: 1 },\r\n    options\r\n  );\r\n\r\n  return executeOperation(this.s.db.s.topology, replSetGetStatusOperation, callback);\r\n};\r\n\r\nmodule.exports = Admin;\r\n"]},"metadata":{},"sourceType":"script"}