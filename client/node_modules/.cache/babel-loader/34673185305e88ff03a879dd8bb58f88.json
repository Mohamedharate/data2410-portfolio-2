{"ast":null,"code":"'use strict';\n\nconst arrayStrictEqual = require('../utils').arrayStrictEqual;\n\nconst tagsStrictEqual = require('../utils').tagsStrictEqual;\n\nconst errorStrictEqual = require('../utils').errorStrictEqual;\n\nconst ServerType = require('./common').ServerType;\n\nconst now = require('../../utils').now;\n\nconst WRITABLE_SERVER_TYPES = new Set([ServerType.RSPrimary, ServerType.Standalone, ServerType.Mongos]);\nconst DATA_BEARING_SERVER_TYPES = new Set([ServerType.RSPrimary, ServerType.RSSecondary, ServerType.Mongos, ServerType.Standalone]);\nconst ISMASTER_FIELDS = ['minWireVersion', 'maxWireVersion', 'maxBsonObjectSize', 'maxMessageSizeBytes', 'maxWriteBatchSize', 'compression', 'me', 'hosts', 'passives', 'arbiters', 'tags', 'setName', 'setVersion', 'electionId', 'primary', 'logicalSessionTimeoutMinutes', 'saslSupportedMechs', '__nodejs_mock_server__', '$clusterTime'];\n/**\r\n * The client's view of a single server, based on the most recent ismaster outcome.\r\n *\r\n * Internal type, not meant to be directly instantiated\r\n */\n\nclass ServerDescription {\n  /**\r\n   * Create a ServerDescription\r\n   * @param {String} address The address of the server\r\n   * @param {Object} [ismaster] An optional ismaster response for this server\r\n   * @param {Object} [options] Optional settings\r\n   * @param {Number} [options.roundTripTime] The round trip time to ping this server (in ms)\r\n   * @param {Error} [options.error] An Error used for better reporting debugging\r\n   * @param {any} [options.topologyVersion] The topologyVersion\r\n   */\n  constructor(address, ismaster, options) {\n    options = options || {};\n    ismaster = Object.assign({\n      minWireVersion: 0,\n      maxWireVersion: 0,\n      hosts: [],\n      passives: [],\n      arbiters: [],\n      tags: []\n    }, ismaster);\n    this.address = address;\n    this.error = options.error;\n    this.roundTripTime = options.roundTripTime || -1;\n    this.lastUpdateTime = now();\n    this.lastWriteDate = ismaster.lastWrite ? ismaster.lastWrite.lastWriteDate : null;\n    this.opTime = ismaster.lastWrite ? ismaster.lastWrite.opTime : null;\n    this.type = parseServerType(ismaster);\n    this.topologyVersion = options.topologyVersion || ismaster.topologyVersion; // direct mappings\n\n    ISMASTER_FIELDS.forEach(field => {\n      if (typeof ismaster[field] !== 'undefined') this[field] = ismaster[field];\n    }); // normalize case for hosts\n\n    if (this.me) this.me = this.me.toLowerCase();\n    this.hosts = this.hosts.map(host => host.toLowerCase());\n    this.passives = this.passives.map(host => host.toLowerCase());\n    this.arbiters = this.arbiters.map(host => host.toLowerCase());\n  }\n\n  get allHosts() {\n    return this.hosts.concat(this.arbiters).concat(this.passives);\n  }\n  /**\r\n   * @return {Boolean} Is this server available for reads\r\n   */\n\n\n  get isReadable() {\n    return this.type === ServerType.RSSecondary || this.isWritable;\n  }\n  /**\r\n   * @return {Boolean} Is this server data bearing\r\n   */\n\n\n  get isDataBearing() {\n    return DATA_BEARING_SERVER_TYPES.has(this.type);\n  }\n  /**\r\n   * @return {Boolean} Is this server available for writes\r\n   */\n\n\n  get isWritable() {\n    return WRITABLE_SERVER_TYPES.has(this.type);\n  }\n\n  get host() {\n    const chopLength = `:${this.port}`.length;\n    return this.address.slice(0, -chopLength);\n  }\n\n  get port() {\n    const port = this.address.split(':').pop();\n    return port ? Number.parseInt(port, 10) : port;\n  }\n  /**\r\n   * Determines if another `ServerDescription` is equal to this one per the rules defined\r\n   * in the {@link https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#serverdescription|SDAM spec}\r\n   *\r\n   * @param {ServerDescription} other\r\n   * @return {Boolean}\r\n   */\n\n\n  equals(other) {\n    const topologyVersionsEqual = this.topologyVersion === other.topologyVersion || compareTopologyVersion(this.topologyVersion, other.topologyVersion) === 0;\n    return other != null && errorStrictEqual(this.error, other.error) && this.type === other.type && this.minWireVersion === other.minWireVersion && this.me === other.me && arrayStrictEqual(this.hosts, other.hosts) && tagsStrictEqual(this.tags, other.tags) && this.setName === other.setName && this.setVersion === other.setVersion && (this.electionId ? other.electionId && this.electionId.equals(other.electionId) : this.electionId === other.electionId) && this.primary === other.primary && this.logicalSessionTimeoutMinutes === other.logicalSessionTimeoutMinutes && topologyVersionsEqual;\n  }\n\n}\n/**\r\n * Parses an `ismaster` message and determines the server type\r\n *\r\n * @param {Object} ismaster The `ismaster` message to parse\r\n * @return {ServerType}\r\n */\n\n\nfunction parseServerType(ismaster) {\n  if (!ismaster || !ismaster.ok) {\n    return ServerType.Unknown;\n  }\n\n  if (ismaster.isreplicaset) {\n    return ServerType.RSGhost;\n  }\n\n  if (ismaster.msg && ismaster.msg === 'isdbgrid') {\n    return ServerType.Mongos;\n  }\n\n  if (ismaster.setName) {\n    if (ismaster.hidden) {\n      return ServerType.RSOther;\n    } else if (ismaster.ismaster) {\n      return ServerType.RSPrimary;\n    } else if (ismaster.secondary) {\n      return ServerType.RSSecondary;\n    } else if (ismaster.arbiterOnly) {\n      return ServerType.RSArbiter;\n    } else {\n      return ServerType.RSOther;\n    }\n  }\n\n  return ServerType.Standalone;\n}\n/**\r\n * Compares two topology versions.\r\n *\r\n * @param {object} lhs\r\n * @param {object} rhs\r\n * @returns A negative number if `lhs` is older than `rhs`; positive if `lhs` is newer than `rhs`; 0 if they are equivalent.\r\n */\n\n\nfunction compareTopologyVersion(lhs, rhs) {\n  if (lhs == null || rhs == null) {\n    return -1;\n  }\n\n  if (lhs.processId.equals(rhs.processId)) {\n    // TODO: handle counters as Longs\n    if (lhs.counter === rhs.counter) {\n      return 0;\n    } else if (lhs.counter < rhs.counter) {\n      return -1;\n    }\n\n    return 1;\n  }\n\n  return -1;\n}\n\nmodule.exports = {\n  ServerDescription,\n  parseServerType,\n  compareTopologyVersion\n};","map":{"version":3,"sources":["C:/Users/Tanja Aakerholt/Documents/GitHub/portfolio2/client/node_modules/mongodb/lib/core/sdam/server_description.js"],"names":["arrayStrictEqual","require","tagsStrictEqual","errorStrictEqual","ServerType","now","WRITABLE_SERVER_TYPES","Set","RSPrimary","Standalone","Mongos","DATA_BEARING_SERVER_TYPES","RSSecondary","ISMASTER_FIELDS","ServerDescription","constructor","address","ismaster","options","Object","assign","minWireVersion","maxWireVersion","hosts","passives","arbiters","tags","error","roundTripTime","lastUpdateTime","lastWriteDate","lastWrite","opTime","type","parseServerType","topologyVersion","forEach","field","me","toLowerCase","map","host","allHosts","concat","isReadable","isWritable","isDataBearing","has","chopLength","port","length","slice","split","pop","Number","parseInt","equals","other","topologyVersionsEqual","compareTopologyVersion","setName","setVersion","electionId","primary","logicalSessionTimeoutMinutes","ok","Unknown","isreplicaset","RSGhost","msg","hidden","RSOther","secondary","arbiterOnly","RSArbiter","lhs","rhs","processId","counter","module","exports"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nconst arrayStrictEqual = require('../utils').arrayStrictEqual;\r\nconst tagsStrictEqual = require('../utils').tagsStrictEqual;\r\nconst errorStrictEqual = require('../utils').errorStrictEqual;\r\nconst ServerType = require('./common').ServerType;\r\nconst now = require('../../utils').now;\r\n\r\nconst WRITABLE_SERVER_TYPES = new Set([\r\n  ServerType.RSPrimary,\r\n  ServerType.Standalone,\r\n  ServerType.Mongos\r\n]);\r\n\r\nconst DATA_BEARING_SERVER_TYPES = new Set([\r\n  ServerType.RSPrimary,\r\n  ServerType.RSSecondary,\r\n  ServerType.Mongos,\r\n  ServerType.Standalone\r\n]);\r\n\r\nconst ISMASTER_FIELDS = [\r\n  'minWireVersion',\r\n  'maxWireVersion',\r\n  'maxBsonObjectSize',\r\n  'maxMessageSizeBytes',\r\n  'maxWriteBatchSize',\r\n  'compression',\r\n  'me',\r\n  'hosts',\r\n  'passives',\r\n  'arbiters',\r\n  'tags',\r\n  'setName',\r\n  'setVersion',\r\n  'electionId',\r\n  'primary',\r\n  'logicalSessionTimeoutMinutes',\r\n  'saslSupportedMechs',\r\n  '__nodejs_mock_server__',\r\n  '$clusterTime'\r\n];\r\n\r\n/**\r\n * The client's view of a single server, based on the most recent ismaster outcome.\r\n *\r\n * Internal type, not meant to be directly instantiated\r\n */\r\nclass ServerDescription {\r\n  /**\r\n   * Create a ServerDescription\r\n   * @param {String} address The address of the server\r\n   * @param {Object} [ismaster] An optional ismaster response for this server\r\n   * @param {Object} [options] Optional settings\r\n   * @param {Number} [options.roundTripTime] The round trip time to ping this server (in ms)\r\n   * @param {Error} [options.error] An Error used for better reporting debugging\r\n   * @param {any} [options.topologyVersion] The topologyVersion\r\n   */\r\n  constructor(address, ismaster, options) {\r\n    options = options || {};\r\n    ismaster = Object.assign(\r\n      {\r\n        minWireVersion: 0,\r\n        maxWireVersion: 0,\r\n        hosts: [],\r\n        passives: [],\r\n        arbiters: [],\r\n        tags: []\r\n      },\r\n      ismaster\r\n    );\r\n\r\n    this.address = address;\r\n    this.error = options.error;\r\n    this.roundTripTime = options.roundTripTime || -1;\r\n    this.lastUpdateTime = now();\r\n    this.lastWriteDate = ismaster.lastWrite ? ismaster.lastWrite.lastWriteDate : null;\r\n    this.opTime = ismaster.lastWrite ? ismaster.lastWrite.opTime : null;\r\n    this.type = parseServerType(ismaster);\r\n    this.topologyVersion = options.topologyVersion || ismaster.topologyVersion;\r\n\r\n    // direct mappings\r\n    ISMASTER_FIELDS.forEach(field => {\r\n      if (typeof ismaster[field] !== 'undefined') this[field] = ismaster[field];\r\n    });\r\n\r\n    // normalize case for hosts\r\n    if (this.me) this.me = this.me.toLowerCase();\r\n    this.hosts = this.hosts.map(host => host.toLowerCase());\r\n    this.passives = this.passives.map(host => host.toLowerCase());\r\n    this.arbiters = this.arbiters.map(host => host.toLowerCase());\r\n  }\r\n\r\n  get allHosts() {\r\n    return this.hosts.concat(this.arbiters).concat(this.passives);\r\n  }\r\n\r\n  /**\r\n   * @return {Boolean} Is this server available for reads\r\n   */\r\n  get isReadable() {\r\n    return this.type === ServerType.RSSecondary || this.isWritable;\r\n  }\r\n\r\n  /**\r\n   * @return {Boolean} Is this server data bearing\r\n   */\r\n  get isDataBearing() {\r\n    return DATA_BEARING_SERVER_TYPES.has(this.type);\r\n  }\r\n\r\n  /**\r\n   * @return {Boolean} Is this server available for writes\r\n   */\r\n  get isWritable() {\r\n    return WRITABLE_SERVER_TYPES.has(this.type);\r\n  }\r\n\r\n  get host() {\r\n    const chopLength = `:${this.port}`.length;\r\n    return this.address.slice(0, -chopLength);\r\n  }\r\n\r\n  get port() {\r\n    const port = this.address.split(':').pop();\r\n    return port ? Number.parseInt(port, 10) : port;\r\n  }\r\n\r\n  /**\r\n   * Determines if another `ServerDescription` is equal to this one per the rules defined\r\n   * in the {@link https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#serverdescription|SDAM spec}\r\n   *\r\n   * @param {ServerDescription} other\r\n   * @return {Boolean}\r\n   */\r\n  equals(other) {\r\n    const topologyVersionsEqual =\r\n      this.topologyVersion === other.topologyVersion ||\r\n      compareTopologyVersion(this.topologyVersion, other.topologyVersion) === 0;\r\n\r\n    return (\r\n      other != null &&\r\n      errorStrictEqual(this.error, other.error) &&\r\n      this.type === other.type &&\r\n      this.minWireVersion === other.minWireVersion &&\r\n      this.me === other.me &&\r\n      arrayStrictEqual(this.hosts, other.hosts) &&\r\n      tagsStrictEqual(this.tags, other.tags) &&\r\n      this.setName === other.setName &&\r\n      this.setVersion === other.setVersion &&\r\n      (this.electionId\r\n        ? other.electionId && this.electionId.equals(other.electionId)\r\n        : this.electionId === other.electionId) &&\r\n      this.primary === other.primary &&\r\n      this.logicalSessionTimeoutMinutes === other.logicalSessionTimeoutMinutes &&\r\n      topologyVersionsEqual\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Parses an `ismaster` message and determines the server type\r\n *\r\n * @param {Object} ismaster The `ismaster` message to parse\r\n * @return {ServerType}\r\n */\r\nfunction parseServerType(ismaster) {\r\n  if (!ismaster || !ismaster.ok) {\r\n    return ServerType.Unknown;\r\n  }\r\n\r\n  if (ismaster.isreplicaset) {\r\n    return ServerType.RSGhost;\r\n  }\r\n\r\n  if (ismaster.msg && ismaster.msg === 'isdbgrid') {\r\n    return ServerType.Mongos;\r\n  }\r\n\r\n  if (ismaster.setName) {\r\n    if (ismaster.hidden) {\r\n      return ServerType.RSOther;\r\n    } else if (ismaster.ismaster) {\r\n      return ServerType.RSPrimary;\r\n    } else if (ismaster.secondary) {\r\n      return ServerType.RSSecondary;\r\n    } else if (ismaster.arbiterOnly) {\r\n      return ServerType.RSArbiter;\r\n    } else {\r\n      return ServerType.RSOther;\r\n    }\r\n  }\r\n\r\n  return ServerType.Standalone;\r\n}\r\n\r\n/**\r\n * Compares two topology versions.\r\n *\r\n * @param {object} lhs\r\n * @param {object} rhs\r\n * @returns A negative number if `lhs` is older than `rhs`; positive if `lhs` is newer than `rhs`; 0 if they are equivalent.\r\n */\r\nfunction compareTopologyVersion(lhs, rhs) {\r\n  if (lhs == null || rhs == null) {\r\n    return -1;\r\n  }\r\n\r\n  if (lhs.processId.equals(rhs.processId)) {\r\n    // TODO: handle counters as Longs\r\n    if (lhs.counter === rhs.counter) {\r\n      return 0;\r\n    } else if (lhs.counter < rhs.counter) {\r\n      return -1;\r\n    }\r\n\r\n    return 1;\r\n  }\r\n\r\n  return -1;\r\n}\r\n\r\nmodule.exports = {\r\n  ServerDescription,\r\n  parseServerType,\r\n  compareTopologyVersion\r\n};\r\n"]},"metadata":{},"sourceType":"script"}