{"ast":null,"code":"/**\r\n * A class representation of the BSON RegExp type.\r\n *\r\n * @class\r\n * @return {BSONRegExp} A MinKey instance\r\n */\nfunction BSONRegExp(pattern, options) {\n  if (!(this instanceof BSONRegExp)) return new BSONRegExp(); // Execute\n\n  this._bsontype = 'BSONRegExp';\n  this.pattern = pattern || '';\n  this.options = options || ''; // Validate options\n\n  for (var i = 0; i < this.options.length; i++) {\n    if (!(this.options[i] === 'i' || this.options[i] === 'm' || this.options[i] === 'x' || this.options[i] === 'l' || this.options[i] === 's' || this.options[i] === 'u')) {\n      throw new Error('the regular expression options [' + this.options[i] + '] is not supported');\n    }\n  }\n}\n\nmodule.exports = BSONRegExp;\nmodule.exports.BSONRegExp = BSONRegExp;","map":{"version":3,"sources":["C:/Users/Tanja Aakerholt/Documents/GitHub/portfolio2/client/node_modules/bson/lib/bson/regexp.js"],"names":["BSONRegExp","pattern","options","_bsontype","i","length","Error","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,UAAT,CAAoBC,OAApB,EAA6BC,OAA7B,EAAsC;AACpC,MAAI,EAAE,gBAAgBF,UAAlB,CAAJ,EAAmC,OAAO,IAAIA,UAAJ,EAAP,CADC,CAGpC;;AACA,OAAKG,SAAL,GAAiB,YAAjB;AACA,OAAKF,OAAL,GAAeA,OAAO,IAAI,EAA1B;AACA,OAAKC,OAAL,GAAeA,OAAO,IAAI,EAA1B,CANoC,CAQpC;;AACA,OAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKF,OAAL,CAAaG,MAAjC,EAAyCD,CAAC,EAA1C,EAA8C;AAC5C,QACE,EACE,KAAKF,OAAL,CAAaE,CAAb,MAAoB,GAApB,IACA,KAAKF,OAAL,CAAaE,CAAb,MAAoB,GADpB,IAEA,KAAKF,OAAL,CAAaE,CAAb,MAAoB,GAFpB,IAGA,KAAKF,OAAL,CAAaE,CAAb,MAAoB,GAHpB,IAIA,KAAKF,OAAL,CAAaE,CAAb,MAAoB,GAJpB,IAKA,KAAKF,OAAL,CAAaE,CAAb,MAAoB,GANtB,CADF,EASE;AACA,YAAM,IAAIE,KAAJ,CAAU,qCAAqC,KAAKJ,OAAL,CAAaE,CAAb,CAArC,GAAuD,oBAAjE,CAAN;AACD;AACF;AACF;;AAEDG,MAAM,CAACC,OAAP,GAAiBR,UAAjB;AACAO,MAAM,CAACC,OAAP,CAAeR,UAAf,GAA4BA,UAA5B","sourcesContent":["/**\r\n * A class representation of the BSON RegExp type.\r\n *\r\n * @class\r\n * @return {BSONRegExp} A MinKey instance\r\n */\r\nfunction BSONRegExp(pattern, options) {\r\n  if (!(this instanceof BSONRegExp)) return new BSONRegExp();\r\n\r\n  // Execute\r\n  this._bsontype = 'BSONRegExp';\r\n  this.pattern = pattern || '';\r\n  this.options = options || '';\r\n\r\n  // Validate options\r\n  for (var i = 0; i < this.options.length; i++) {\r\n    if (\r\n      !(\r\n        this.options[i] === 'i' ||\r\n        this.options[i] === 'm' ||\r\n        this.options[i] === 'x' ||\r\n        this.options[i] === 'l' ||\r\n        this.options[i] === 's' ||\r\n        this.options[i] === 'u'\r\n      )\r\n    ) {\r\n      throw new Error('the regular expression options [' + this.options[i] + '] is not supported');\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = BSONRegExp;\r\nmodule.exports.BSONRegExp = BSONRegExp;\r\n"]},"metadata":{},"sourceType":"script"}