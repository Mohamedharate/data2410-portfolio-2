{"ast":null,"code":"'use strict';\n\nconst Aspect = require('./operation').Aspect;\n\nconst defineAspects = require('./operation').defineAspects;\n\nconst CommandOperationV2 = require('./command_v2');\n\nconst MongoError = require('../core').MongoError;\n\nconst parseIndexOptions = require('../utils').parseIndexOptions;\n\nconst maxWireVersion = require('../core/utils').maxWireVersion;\n\nconst VALID_INDEX_OPTIONS = new Set(['background', 'unique', 'name', 'partialFilterExpression', 'sparse', 'expireAfterSeconds', 'storageEngine', 'collation', // text indexes\n'weights', 'default_language', 'language_override', 'textIndexVersion', // 2d-sphere indexes\n'2dsphereIndexVersion', // 2d indexes\n'bits', 'min', 'max', // geoHaystack Indexes\n'bucketSize', // wildcard indexes\n'wildcardProjection']);\n\nclass CreateIndexesOperation extends CommandOperationV2 {\n  /**\r\n   * @ignore\r\n   */\n  constructor(parent, collection, indexes, options) {\n    super(parent, options);\n    this.collection = collection; // createIndex can be called with a variety of styles:\n    //   coll.createIndex('a');\n    //   coll.createIndex({ a: 1 });\n    //   coll.createIndex([['a', 1]]);\n    // createIndexes is always called with an array of index spec objects\n\n    if (!Array.isArray(indexes) || Array.isArray(indexes[0])) {\n      this.onlyReturnNameOfCreatedIndex = true; // TODO: remove in v4 (breaking change); make createIndex return full response as createIndexes does\n\n      const indexParameters = parseIndexOptions(indexes); // Generate the index name\n\n      const name = typeof options.name === 'string' ? options.name : indexParameters.name; // Set up the index\n\n      const indexSpec = {\n        name,\n        key: indexParameters.fieldHash\n      }; // merge valid index options into the index spec\n\n      for (let optionName in options) {\n        if (VALID_INDEX_OPTIONS.has(optionName)) {\n          indexSpec[optionName] = options[optionName];\n        }\n      }\n\n      this.indexes = [indexSpec];\n      return;\n    }\n\n    this.indexes = indexes;\n  }\n  /**\r\n   * @ignore\r\n   */\n\n\n  execute(server, callback) {\n    const options = this.options;\n    const indexes = this.indexes;\n    const serverWireVersion = maxWireVersion(server); // Ensure we generate the correct name if the parameter is not set\n\n    for (let i = 0; i < indexes.length; i++) {\n      // Did the user pass in a collation, check if our write server supports it\n      if (indexes[i].collation && serverWireVersion < 5) {\n        callback(new MongoError(`Server ${server.name}, which reports wire version ${serverWireVersion}, does not support collation`));\n        return;\n      }\n\n      if (indexes[i].name == null) {\n        const keys = [];\n\n        for (let name in indexes[i].key) {\n          keys.push(`${name}_${indexes[i].key[name]}`);\n        } // Set the name\n\n\n        indexes[i].name = keys.join('_');\n      }\n    }\n\n    const cmd = {\n      createIndexes: this.collection,\n      indexes\n    };\n\n    if (options.commitQuorum != null) {\n      if (serverWireVersion < 9) {\n        callback(new MongoError('`commitQuorum` option for `createIndexes` not supported on servers < 4.4'));\n        return;\n      }\n\n      cmd.commitQuorum = options.commitQuorum;\n    } // collation is set on each index, it should not be defined at the root\n\n\n    this.options.collation = undefined;\n    super.executeCommand(server, cmd, (err, result) => {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      callback(null, this.onlyReturnNameOfCreatedIndex ? indexes[0].name : result);\n    });\n  }\n\n}\n\ndefineAspects(CreateIndexesOperation, [Aspect.WRITE_OPERATION, Aspect.EXECUTE_WITH_SELECTION]);\nmodule.exports = CreateIndexesOperation;","map":{"version":3,"sources":["C:/Users/Tanja Aakerholt/Documents/GitHub/portfolio2/client/node_modules/mongodb/lib/operations/create_indexes.js"],"names":["Aspect","require","defineAspects","CommandOperationV2","MongoError","parseIndexOptions","maxWireVersion","VALID_INDEX_OPTIONS","Set","CreateIndexesOperation","constructor","parent","collection","indexes","options","Array","isArray","onlyReturnNameOfCreatedIndex","indexParameters","name","indexSpec","key","fieldHash","optionName","has","execute","server","callback","serverWireVersion","i","length","collation","keys","push","join","cmd","createIndexes","commitQuorum","undefined","executeCommand","err","result","WRITE_OPERATION","EXECUTE_WITH_SELECTION","module","exports"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nconst Aspect = require('./operation').Aspect;\r\nconst defineAspects = require('./operation').defineAspects;\r\nconst CommandOperationV2 = require('./command_v2');\r\nconst MongoError = require('../core').MongoError;\r\nconst parseIndexOptions = require('../utils').parseIndexOptions;\r\nconst maxWireVersion = require('../core/utils').maxWireVersion;\r\n\r\nconst VALID_INDEX_OPTIONS = new Set([\r\n  'background',\r\n  'unique',\r\n  'name',\r\n  'partialFilterExpression',\r\n  'sparse',\r\n  'expireAfterSeconds',\r\n  'storageEngine',\r\n  'collation',\r\n\r\n  // text indexes\r\n  'weights',\r\n  'default_language',\r\n  'language_override',\r\n  'textIndexVersion',\r\n\r\n  // 2d-sphere indexes\r\n  '2dsphereIndexVersion',\r\n\r\n  // 2d indexes\r\n  'bits',\r\n  'min',\r\n  'max',\r\n\r\n  // geoHaystack Indexes\r\n  'bucketSize',\r\n\r\n  // wildcard indexes\r\n  'wildcardProjection'\r\n]);\r\n\r\nclass CreateIndexesOperation extends CommandOperationV2 {\r\n  /**\r\n   * @ignore\r\n   */\r\n  constructor(parent, collection, indexes, options) {\r\n    super(parent, options);\r\n    this.collection = collection;\r\n\r\n    // createIndex can be called with a variety of styles:\r\n    //   coll.createIndex('a');\r\n    //   coll.createIndex({ a: 1 });\r\n    //   coll.createIndex([['a', 1]]);\r\n    // createIndexes is always called with an array of index spec objects\r\n    if (!Array.isArray(indexes) || Array.isArray(indexes[0])) {\r\n      this.onlyReturnNameOfCreatedIndex = true;\r\n      // TODO: remove in v4 (breaking change); make createIndex return full response as createIndexes does\r\n\r\n      const indexParameters = parseIndexOptions(indexes);\r\n      // Generate the index name\r\n      const name = typeof options.name === 'string' ? options.name : indexParameters.name;\r\n      // Set up the index\r\n      const indexSpec = { name, key: indexParameters.fieldHash };\r\n      // merge valid index options into the index spec\r\n      for (let optionName in options) {\r\n        if (VALID_INDEX_OPTIONS.has(optionName)) {\r\n          indexSpec[optionName] = options[optionName];\r\n        }\r\n      }\r\n      this.indexes = [indexSpec];\r\n      return;\r\n    }\r\n\r\n    this.indexes = indexes;\r\n  }\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  execute(server, callback) {\r\n    const options = this.options;\r\n    const indexes = this.indexes;\r\n\r\n    const serverWireVersion = maxWireVersion(server);\r\n\r\n    // Ensure we generate the correct name if the parameter is not set\r\n    for (let i = 0; i < indexes.length; i++) {\r\n      // Did the user pass in a collation, check if our write server supports it\r\n      if (indexes[i].collation && serverWireVersion < 5) {\r\n        callback(\r\n          new MongoError(\r\n            `Server ${server.name}, which reports wire version ${serverWireVersion}, does not support collation`\r\n          )\r\n        );\r\n        return;\r\n      }\r\n\r\n      if (indexes[i].name == null) {\r\n        const keys = [];\r\n\r\n        for (let name in indexes[i].key) {\r\n          keys.push(`${name}_${indexes[i].key[name]}`);\r\n        }\r\n\r\n        // Set the name\r\n        indexes[i].name = keys.join('_');\r\n      }\r\n    }\r\n\r\n    const cmd = { createIndexes: this.collection, indexes };\r\n\r\n    if (options.commitQuorum != null) {\r\n      if (serverWireVersion < 9) {\r\n        callback(\r\n          new MongoError('`commitQuorum` option for `createIndexes` not supported on servers < 4.4')\r\n        );\r\n        return;\r\n      }\r\n      cmd.commitQuorum = options.commitQuorum;\r\n    }\r\n\r\n    // collation is set on each index, it should not be defined at the root\r\n    this.options.collation = undefined;\r\n\r\n    super.executeCommand(server, cmd, (err, result) => {\r\n      if (err) {\r\n        callback(err);\r\n        return;\r\n      }\r\n\r\n      callback(null, this.onlyReturnNameOfCreatedIndex ? indexes[0].name : result);\r\n    });\r\n  }\r\n}\r\n\r\ndefineAspects(CreateIndexesOperation, [Aspect.WRITE_OPERATION, Aspect.EXECUTE_WITH_SELECTION]);\r\n\r\nmodule.exports = CreateIndexesOperation;\r\n"]},"metadata":{},"sourceType":"script"}