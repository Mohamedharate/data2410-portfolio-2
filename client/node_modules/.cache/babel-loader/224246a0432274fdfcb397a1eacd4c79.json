{"ast":null,"code":"/**\n * Module dependencies.\n */\nvar sep = require('path').sep || '/';\n/**\n * Module exports.\n */\n\nmodule.exports = fileUriToPath;\n/**\n * File URI to Path function.\n *\n * @param {String} uri\n * @return {String} path\n * @api public\n */\n\nfunction fileUriToPath(uri) {\n  if ('string' != typeof uri || uri.length <= 7 || 'file://' != uri.substring(0, 7)) {\n    throw new TypeError('must pass in a file:// URI to convert to a file path');\n  }\n\n  var rest = decodeURI(uri.substring(7));\n  var firstSlash = rest.indexOf('/');\n  var host = rest.substring(0, firstSlash);\n  var path = rest.substring(firstSlash + 1); // 2.  Scheme Definition\n  // As a special case, <host> can be the string \"localhost\" or the empty\n  // string; this is interpreted as \"the machine from which the URL is\n  // being interpreted\".\n\n  if ('localhost' == host) host = '';\n\n  if (host) {\n    host = sep + sep + host;\n  } // 3.2  Drives, drive letters, mount points, file system root\n  // Drive letters are mapped into the top of a file URI in various ways,\n  // depending on the implementation; some applications substitute\n  // vertical bar (\"|\") for the colon after the drive letter, yielding\n  // \"file:///c|/tmp/test.txt\".  In some cases, the colon is left\n  // unchanged, as in \"file:///c:/tmp/test.txt\".  In other cases, the\n  // colon is simply omitted, as in \"file:///c/tmp/test.txt\".\n\n\n  path = path.replace(/^(.+)\\|/, '$1:'); // for Windows, we need to invert the path separators from what a URI uses\n\n  if (sep == '\\\\') {\n    path = path.replace(/\\//g, '\\\\');\n  }\n\n  if (/^.+\\:/.test(path)) {// has Windows drive at beginning of path\n  } else {\n    // unix path…\n    path = sep + path;\n  }\n\n  return host + path;\n}","map":{"version":3,"sources":["C:/Users/Tanja Aakerholt/Documents/GitHub/portfolio2/node_modules/file-uri-to-path/index.js"],"names":["sep","require","module","exports","fileUriToPath","uri","length","substring","TypeError","rest","decodeURI","firstSlash","indexOf","host","path","replace","test"],"mappings":"AACA;AACA;AACA;AAEA,IAAIA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAP,CAAgBD,GAAhB,IAAuB,GAAjC;AAEA;AACA;AACA;;AAEAE,MAAM,CAACC,OAAP,GAAiBC,aAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,aAAT,CAAwBC,GAAxB,EAA6B;AAC3B,MAAI,YAAY,OAAOA,GAAnB,IACAA,GAAG,CAACC,MAAJ,IAAc,CADd,IAEA,aAAaD,GAAG,CAACE,SAAJ,CAAc,CAAd,EAAiB,CAAjB,CAFjB,EAEsC;AACpC,UAAM,IAAIC,SAAJ,CAAc,sDAAd,CAAN;AACD;;AAED,MAAIC,IAAI,GAAGC,SAAS,CAACL,GAAG,CAACE,SAAJ,CAAc,CAAd,CAAD,CAApB;AACA,MAAII,UAAU,GAAGF,IAAI,CAACG,OAAL,CAAa,GAAb,CAAjB;AACA,MAAIC,IAAI,GAAGJ,IAAI,CAACF,SAAL,CAAe,CAAf,EAAkBI,UAAlB,CAAX;AACA,MAAIG,IAAI,GAAGL,IAAI,CAACF,SAAL,CAAeI,UAAU,GAAG,CAA5B,CAAX,CAV2B,CAY3B;AACA;AACA;AACA;;AACA,MAAI,eAAeE,IAAnB,EAAyBA,IAAI,GAAG,EAAP;;AAEzB,MAAIA,IAAJ,EAAU;AACRA,IAAAA,IAAI,GAAGb,GAAG,GAAGA,GAAN,GAAYa,IAAnB;AACD,GApB0B,CAsB3B;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAC,EAAAA,IAAI,GAAGA,IAAI,CAACC,OAAL,CAAa,SAAb,EAAwB,KAAxB,CAAP,CA7B2B,CA+B3B;;AACA,MAAIf,GAAG,IAAI,IAAX,EAAiB;AACfc,IAAAA,IAAI,GAAGA,IAAI,CAACC,OAAL,CAAa,KAAb,EAAoB,IAApB,CAAP;AACD;;AAED,MAAI,QAAQC,IAAR,CAAaF,IAAb,CAAJ,EAAwB,CACtB;AACD,GAFD,MAEO;AACL;AACAA,IAAAA,IAAI,GAAGd,GAAG,GAAGc,IAAb;AACD;;AAED,SAAOD,IAAI,GAAGC,IAAd;AACD","sourcesContent":["\n/**\n * Module dependencies.\n */\n\nvar sep = require('path').sep || '/';\n\n/**\n * Module exports.\n */\n\nmodule.exports = fileUriToPath;\n\n/**\n * File URI to Path function.\n *\n * @param {String} uri\n * @return {String} path\n * @api public\n */\n\nfunction fileUriToPath (uri) {\n  if ('string' != typeof uri ||\n      uri.length <= 7 ||\n      'file://' != uri.substring(0, 7)) {\n    throw new TypeError('must pass in a file:// URI to convert to a file path');\n  }\n\n  var rest = decodeURI(uri.substring(7));\n  var firstSlash = rest.indexOf('/');\n  var host = rest.substring(0, firstSlash);\n  var path = rest.substring(firstSlash + 1);\n\n  // 2.  Scheme Definition\n  // As a special case, <host> can be the string \"localhost\" or the empty\n  // string; this is interpreted as \"the machine from which the URL is\n  // being interpreted\".\n  if ('localhost' == host) host = '';\n\n  if (host) {\n    host = sep + sep + host;\n  }\n\n  // 3.2  Drives, drive letters, mount points, file system root\n  // Drive letters are mapped into the top of a file URI in various ways,\n  // depending on the implementation; some applications substitute\n  // vertical bar (\"|\") for the colon after the drive letter, yielding\n  // \"file:///c|/tmp/test.txt\".  In some cases, the colon is left\n  // unchanged, as in \"file:///c:/tmp/test.txt\".  In other cases, the\n  // colon is simply omitted, as in \"file:///c/tmp/test.txt\".\n  path = path.replace(/^(.+)\\|/, '$1:');\n\n  // for Windows, we need to invert the path separators from what a URI uses\n  if (sep == '\\\\') {\n    path = path.replace(/\\//g, '\\\\');\n  }\n\n  if (/^.+\\:/.test(path)) {\n    // has Windows drive at beginning of path\n  } else {\n    // unix path…\n    path = sep + path;\n  }\n\n  return host + path;\n}\n"]},"metadata":{},"sourceType":"script"}