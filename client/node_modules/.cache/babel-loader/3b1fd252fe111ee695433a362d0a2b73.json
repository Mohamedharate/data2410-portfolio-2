{"ast":null,"code":"'use strict';\n\nvar Long = require('../long').Long,\n    Double = require('../double').Double,\n    Timestamp = require('../timestamp').Timestamp,\n    ObjectID = require('../objectid').ObjectID,\n    Symbol = require('../symbol').Symbol,\n    BSONRegExp = require('../regexp').BSONRegExp,\n    Code = require('../code').Code,\n    Decimal128 = require('../decimal128'),\n    MinKey = require('../min_key').MinKey,\n    MaxKey = require('../max_key').MaxKey,\n    DBRef = require('../db_ref').DBRef,\n    Binary = require('../binary').Binary;\n\nvar normalizedFunctionString = require('./utils').normalizedFunctionString; // To ensure that 0.4 of node works correctly\n\n\nvar isDate = function isDate(d) {\n  return typeof d === 'object' && Object.prototype.toString.call(d) === '[object Date]';\n};\n\nvar calculateObjectSize = function calculateObjectSize(object, serializeFunctions, ignoreUndefined) {\n  var totalLength = 4 + 1;\n\n  if (Array.isArray(object)) {\n    for (var i = 0; i < object.length; i++) {\n      totalLength += calculateElement(i.toString(), object[i], serializeFunctions, true, ignoreUndefined);\n    }\n  } else {\n    // If we have toBSON defined, override the current object\n    if (object.toBSON) {\n      object = object.toBSON();\n    } // Calculate size\n\n\n    for (var key in object) {\n      totalLength += calculateElement(key, object[key], serializeFunctions, false, ignoreUndefined);\n    }\n  }\n\n  return totalLength;\n};\n/**\r\n * @ignore\r\n * @api private\r\n */\n\n\nfunction calculateElement(name, value, serializeFunctions, isArray, ignoreUndefined) {\n  // If we have toBSON defined, override the current object\n  if (value && value.toBSON) {\n    value = value.toBSON();\n  }\n\n  switch (typeof value) {\n    case 'string':\n      return 1 + Buffer.byteLength(name, 'utf8') + 1 + 4 + Buffer.byteLength(value, 'utf8') + 1;\n\n    case 'number':\n      if (Math.floor(value) === value && value >= BSON.JS_INT_MIN && value <= BSON.JS_INT_MAX) {\n        if (value >= BSON.BSON_INT32_MIN && value <= BSON.BSON_INT32_MAX) {\n          // 32 bit\n          return (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + (4 + 1);\n        } else {\n          return (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + (8 + 1);\n        }\n      } else {\n        // 64 bit\n        return (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + (8 + 1);\n      }\n\n    case 'undefined':\n      if (isArray || !ignoreUndefined) return (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + 1;\n      return 0;\n\n    case 'boolean':\n      return (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + (1 + 1);\n\n    case 'object':\n      if (value == null || value instanceof MinKey || value instanceof MaxKey || value['_bsontype'] === 'MinKey' || value['_bsontype'] === 'MaxKey') {\n        return (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + 1;\n      } else if (value instanceof ObjectID || value['_bsontype'] === 'ObjectID' || value['_bsontype'] === 'ObjectId') {\n        return (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + (12 + 1);\n      } else if (value instanceof Date || isDate(value)) {\n        return (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + (8 + 1);\n      } else if (typeof Buffer !== 'undefined' && Buffer.isBuffer(value)) {\n        return (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + (1 + 4 + 1) + value.length;\n      } else if (value instanceof Long || value instanceof Double || value instanceof Timestamp || value['_bsontype'] === 'Long' || value['_bsontype'] === 'Double' || value['_bsontype'] === 'Timestamp') {\n        return (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + (8 + 1);\n      } else if (value instanceof Decimal128 || value['_bsontype'] === 'Decimal128') {\n        return (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + (16 + 1);\n      } else if (value instanceof Code || value['_bsontype'] === 'Code') {\n        // Calculate size depending on the availability of a scope\n        if (value.scope != null && Object.keys(value.scope).length > 0) {\n          return (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + 1 + 4 + 4 + Buffer.byteLength(value.code.toString(), 'utf8') + 1 + calculateObjectSize(value.scope, serializeFunctions, ignoreUndefined);\n        } else {\n          return (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + 1 + 4 + Buffer.byteLength(value.code.toString(), 'utf8') + 1;\n        }\n      } else if (value instanceof Binary || value['_bsontype'] === 'Binary') {\n        // Check what kind of subtype we have\n        if (value.sub_type === Binary.SUBTYPE_BYTE_ARRAY) {\n          return (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + (value.position + 1 + 4 + 1 + 4);\n        } else {\n          return (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + (value.position + 1 + 4 + 1);\n        }\n      } else if (value instanceof Symbol || value['_bsontype'] === 'Symbol') {\n        return (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + Buffer.byteLength(value.value, 'utf8') + 4 + 1 + 1;\n      } else if (value instanceof DBRef || value['_bsontype'] === 'DBRef') {\n        // Set up correct object for serialization\n        var ordered_values = {\n          $ref: value.namespace,\n          $id: value.oid\n        }; // Add db reference if it exists\n\n        if (null != value.db) {\n          ordered_values['$db'] = value.db;\n        }\n\n        return (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + 1 + calculateObjectSize(ordered_values, serializeFunctions, ignoreUndefined);\n      } else if (value instanceof RegExp || Object.prototype.toString.call(value) === '[object RegExp]') {\n        return (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + 1 + Buffer.byteLength(value.source, 'utf8') + 1 + (value.global ? 1 : 0) + (value.ignoreCase ? 1 : 0) + (value.multiline ? 1 : 0) + 1;\n      } else if (value instanceof BSONRegExp || value['_bsontype'] === 'BSONRegExp') {\n        return (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + 1 + Buffer.byteLength(value.pattern, 'utf8') + 1 + Buffer.byteLength(value.options, 'utf8') + 1;\n      } else {\n        return (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + calculateObjectSize(value, serializeFunctions, ignoreUndefined) + 1;\n      }\n\n    case 'function':\n      // WTF for 0.4.X where typeof /someregexp/ === 'function'\n      if (value instanceof RegExp || Object.prototype.toString.call(value) === '[object RegExp]' || String.call(value) === '[object RegExp]') {\n        return (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + 1 + Buffer.byteLength(value.source, 'utf8') + 1 + (value.global ? 1 : 0) + (value.ignoreCase ? 1 : 0) + (value.multiline ? 1 : 0) + 1;\n      } else {\n        if (serializeFunctions && value.scope != null && Object.keys(value.scope).length > 0) {\n          return (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + 1 + 4 + 4 + Buffer.byteLength(normalizedFunctionString(value), 'utf8') + 1 + calculateObjectSize(value.scope, serializeFunctions, ignoreUndefined);\n        } else if (serializeFunctions) {\n          return (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + 1 + 4 + Buffer.byteLength(normalizedFunctionString(value), 'utf8') + 1;\n        }\n      }\n\n  }\n\n  return 0;\n}\n\nvar BSON = {}; // BSON MAX VALUES\n\nBSON.BSON_INT32_MAX = 0x7fffffff;\nBSON.BSON_INT32_MIN = -0x80000000; // JS MAX PRECISE VALUES\n\nBSON.JS_INT_MAX = 0x20000000000000; // Any integer up to 2^53 can be precisely represented by a double.\n\nBSON.JS_INT_MIN = -0x20000000000000; // Any integer down to -2^53 can be precisely represented by a double.\n\nmodule.exports = calculateObjectSize;","map":{"version":3,"sources":["C:/Users/Tanja Aakerholt/Documents/GitHub/portfolio2/client/node_modules/bson/lib/bson/parser/calculate_size.js"],"names":["Long","require","Double","Timestamp","ObjectID","Symbol","BSONRegExp","Code","Decimal128","MinKey","MaxKey","DBRef","Binary","normalizedFunctionString","isDate","d","Object","prototype","toString","call","calculateObjectSize","object","serializeFunctions","ignoreUndefined","totalLength","Array","isArray","i","length","calculateElement","toBSON","key","name","value","Buffer","byteLength","Math","floor","BSON","JS_INT_MIN","JS_INT_MAX","BSON_INT32_MIN","BSON_INT32_MAX","Date","isBuffer","scope","keys","code","sub_type","SUBTYPE_BYTE_ARRAY","position","ordered_values","$ref","namespace","$id","oid","db","RegExp","source","global","ignoreCase","multiline","pattern","options","String","module","exports"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nvar Long = require('../long').Long,\r\n  Double = require('../double').Double,\r\n  Timestamp = require('../timestamp').Timestamp,\r\n  ObjectID = require('../objectid').ObjectID,\r\n  Symbol = require('../symbol').Symbol,\r\n  BSONRegExp = require('../regexp').BSONRegExp,\r\n  Code = require('../code').Code,\r\n  Decimal128 = require('../decimal128'),\r\n  MinKey = require('../min_key').MinKey,\r\n  MaxKey = require('../max_key').MaxKey,\r\n  DBRef = require('../db_ref').DBRef,\r\n  Binary = require('../binary').Binary;\r\n\r\nvar normalizedFunctionString = require('./utils').normalizedFunctionString;\r\n\r\n// To ensure that 0.4 of node works correctly\r\nvar isDate = function isDate(d) {\r\n  return typeof d === 'object' && Object.prototype.toString.call(d) === '[object Date]';\r\n};\r\n\r\nvar calculateObjectSize = function calculateObjectSize(\r\n  object,\r\n  serializeFunctions,\r\n  ignoreUndefined\r\n) {\r\n  var totalLength = 4 + 1;\r\n\r\n  if (Array.isArray(object)) {\r\n    for (var i = 0; i < object.length; i++) {\r\n      totalLength += calculateElement(\r\n        i.toString(),\r\n        object[i],\r\n        serializeFunctions,\r\n        true,\r\n        ignoreUndefined\r\n      );\r\n    }\r\n  } else {\r\n    // If we have toBSON defined, override the current object\r\n    if (object.toBSON) {\r\n      object = object.toBSON();\r\n    }\r\n\r\n    // Calculate size\r\n    for (var key in object) {\r\n      totalLength += calculateElement(key, object[key], serializeFunctions, false, ignoreUndefined);\r\n    }\r\n  }\r\n\r\n  return totalLength;\r\n};\r\n\r\n/**\r\n * @ignore\r\n * @api private\r\n */\r\nfunction calculateElement(name, value, serializeFunctions, isArray, ignoreUndefined) {\r\n  // If we have toBSON defined, override the current object\r\n  if (value && value.toBSON) {\r\n    value = value.toBSON();\r\n  }\r\n\r\n  switch (typeof value) {\r\n    case 'string':\r\n      return 1 + Buffer.byteLength(name, 'utf8') + 1 + 4 + Buffer.byteLength(value, 'utf8') + 1;\r\n    case 'number':\r\n      if (Math.floor(value) === value && value >= BSON.JS_INT_MIN && value <= BSON.JS_INT_MAX) {\r\n        if (value >= BSON.BSON_INT32_MIN && value <= BSON.BSON_INT32_MAX) {\r\n          // 32 bit\r\n          return (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + (4 + 1);\r\n        } else {\r\n          return (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + (8 + 1);\r\n        }\r\n      } else {\r\n        // 64 bit\r\n        return (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + (8 + 1);\r\n      }\r\n    case 'undefined':\r\n      if (isArray || !ignoreUndefined)\r\n        return (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + 1;\r\n      return 0;\r\n    case 'boolean':\r\n      return (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + (1 + 1);\r\n    case 'object':\r\n      if (\r\n        value == null ||\r\n        value instanceof MinKey ||\r\n        value instanceof MaxKey ||\r\n        value['_bsontype'] === 'MinKey' ||\r\n        value['_bsontype'] === 'MaxKey'\r\n      ) {\r\n        return (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + 1;\r\n      } else if (value instanceof ObjectID || value['_bsontype'] === 'ObjectID' || value['_bsontype'] === 'ObjectId') {\r\n        return (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + (12 + 1);\r\n      } else if (value instanceof Date || isDate(value)) {\r\n        return (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + (8 + 1);\r\n      } else if (typeof Buffer !== 'undefined' && Buffer.isBuffer(value)) {\r\n        return (\r\n          (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + (1 + 4 + 1) + value.length\r\n        );\r\n      } else if (\r\n        value instanceof Long ||\r\n        value instanceof Double ||\r\n        value instanceof Timestamp ||\r\n        value['_bsontype'] === 'Long' ||\r\n        value['_bsontype'] === 'Double' ||\r\n        value['_bsontype'] === 'Timestamp'\r\n      ) {\r\n        return (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + (8 + 1);\r\n      } else if (value instanceof Decimal128 || value['_bsontype'] === 'Decimal128') {\r\n        return (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + (16 + 1);\r\n      } else if (value instanceof Code || value['_bsontype'] === 'Code') {\r\n        // Calculate size depending on the availability of a scope\r\n        if (value.scope != null && Object.keys(value.scope).length > 0) {\r\n          return (\r\n            (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) +\r\n            1 +\r\n            4 +\r\n            4 +\r\n            Buffer.byteLength(value.code.toString(), 'utf8') +\r\n            1 +\r\n            calculateObjectSize(value.scope, serializeFunctions, ignoreUndefined)\r\n          );\r\n        } else {\r\n          return (\r\n            (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) +\r\n            1 +\r\n            4 +\r\n            Buffer.byteLength(value.code.toString(), 'utf8') +\r\n            1\r\n          );\r\n        }\r\n      } else if (value instanceof Binary || value['_bsontype'] === 'Binary') {\r\n        // Check what kind of subtype we have\r\n        if (value.sub_type === Binary.SUBTYPE_BYTE_ARRAY) {\r\n          return (\r\n            (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) +\r\n            (value.position + 1 + 4 + 1 + 4)\r\n          );\r\n        } else {\r\n          return (\r\n            (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + (value.position + 1 + 4 + 1)\r\n          );\r\n        }\r\n      } else if (value instanceof Symbol || value['_bsontype'] === 'Symbol') {\r\n        return (\r\n          (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) +\r\n          Buffer.byteLength(value.value, 'utf8') +\r\n          4 +\r\n          1 +\r\n          1\r\n        );\r\n      } else if (value instanceof DBRef || value['_bsontype'] === 'DBRef') {\r\n        // Set up correct object for serialization\r\n        var ordered_values = {\r\n          $ref: value.namespace,\r\n          $id: value.oid\r\n        };\r\n\r\n        // Add db reference if it exists\r\n        if (null != value.db) {\r\n          ordered_values['$db'] = value.db;\r\n        }\r\n\r\n        return (\r\n          (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) +\r\n          1 +\r\n          calculateObjectSize(ordered_values, serializeFunctions, ignoreUndefined)\r\n        );\r\n      } else if (\r\n        value instanceof RegExp ||\r\n        Object.prototype.toString.call(value) === '[object RegExp]'\r\n      ) {\r\n        return (\r\n          (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) +\r\n          1 +\r\n          Buffer.byteLength(value.source, 'utf8') +\r\n          1 +\r\n          (value.global ? 1 : 0) +\r\n          (value.ignoreCase ? 1 : 0) +\r\n          (value.multiline ? 1 : 0) +\r\n          1\r\n        );\r\n      } else if (value instanceof BSONRegExp || value['_bsontype'] === 'BSONRegExp') {\r\n        return (\r\n          (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) +\r\n          1 +\r\n          Buffer.byteLength(value.pattern, 'utf8') +\r\n          1 +\r\n          Buffer.byteLength(value.options, 'utf8') +\r\n          1\r\n        );\r\n      } else {\r\n        return (\r\n          (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) +\r\n          calculateObjectSize(value, serializeFunctions, ignoreUndefined) +\r\n          1\r\n        );\r\n      }\r\n    case 'function':\r\n      // WTF for 0.4.X where typeof /someregexp/ === 'function'\r\n      if (\r\n        value instanceof RegExp ||\r\n        Object.prototype.toString.call(value) === '[object RegExp]' ||\r\n        String.call(value) === '[object RegExp]'\r\n      ) {\r\n        return (\r\n          (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) +\r\n          1 +\r\n          Buffer.byteLength(value.source, 'utf8') +\r\n          1 +\r\n          (value.global ? 1 : 0) +\r\n          (value.ignoreCase ? 1 : 0) +\r\n          (value.multiline ? 1 : 0) +\r\n          1\r\n        );\r\n      } else {\r\n        if (serializeFunctions && value.scope != null && Object.keys(value.scope).length > 0) {\r\n          return (\r\n            (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) +\r\n            1 +\r\n            4 +\r\n            4 +\r\n            Buffer.byteLength(normalizedFunctionString(value), 'utf8') +\r\n            1 +\r\n            calculateObjectSize(value.scope, serializeFunctions, ignoreUndefined)\r\n          );\r\n        } else if (serializeFunctions) {\r\n          return (\r\n            (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) +\r\n            1 +\r\n            4 +\r\n            Buffer.byteLength(normalizedFunctionString(value), 'utf8') +\r\n            1\r\n          );\r\n        }\r\n      }\r\n  }\r\n\r\n  return 0;\r\n}\r\n\r\nvar BSON = {};\r\n\r\n// BSON MAX VALUES\r\nBSON.BSON_INT32_MAX = 0x7fffffff;\r\nBSON.BSON_INT32_MIN = -0x80000000;\r\n\r\n// JS MAX PRECISE VALUES\r\nBSON.JS_INT_MAX = 0x20000000000000; // Any integer up to 2^53 can be precisely represented by a double.\r\nBSON.JS_INT_MIN = -0x20000000000000; // Any integer down to -2^53 can be precisely represented by a double.\r\n\r\nmodule.exports = calculateObjectSize;\r\n"]},"metadata":{},"sourceType":"script"}