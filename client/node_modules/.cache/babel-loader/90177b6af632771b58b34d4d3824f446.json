{"ast":null,"code":"'use strict';\n\nconst spawn = require('child_process').spawn;\n/**\n * @ignore\n * An internal class that handles spawning a mongocryptd.\n */\n\n\nclass MongocryptdManager {\n  /**\n   * @ignore\n   * Creates a new Mongocryptd Manager\n   * @param {AutoEncrypter~AutoEncryptionExtraOptions} [extraOptions] extra options that determine how/when to spawn a mongocryptd\n   */\n  constructor(extraOptions) {\n    extraOptions = extraOptions || {}; // TODO: this is not actually supported by the spec, so we should clarify\n    // with the spec or get rid of this\n\n    if (extraOptions.mongocryptdURI) {\n      this.uri = extraOptions.mongocryptdURI;\n    } else {\n      // TODO: eventually support connecting on Linux Socket for non-windows,\n      // blocked by SERVER-41029\n      this.uri = 'mongodb://localhost:27020/?serverSelectionTimeoutMS=1000';\n    }\n\n    this.bypassSpawn = !!extraOptions.mongocryptdBypassSpawn;\n    this.spawnPath = extraOptions.mongocryptdSpawnPath || '';\n    this.spawnArgs = [];\n\n    if (Array.isArray(extraOptions.mongocryptdSpawnArgs)) {\n      this.spawnArgs = this.spawnArgs.concat(extraOptions.mongocryptdSpawnArgs);\n    }\n\n    if (this.spawnArgs.filter(arg => typeof arg === 'string').every(arg => arg.indexOf('--idleShutdownTimeoutSecs') < 0)) {\n      this.spawnArgs.push('--idleShutdownTimeoutSecs', 60);\n    }\n  }\n  /**\n   * @ignore\n   * Will check to see if a mongocryptd is up. If it is not up, it will attempt\n   * to spawn a mongocryptd in a detached process, and then wait for it to be up.\n   * @param {Function} callback Invoked when we think a mongocryptd is up\n   */\n\n\n  spawn(callback) {\n    const cmdName = this.spawnPath || 'mongocryptd'; // Spawned with stdio: ignore and detatched:true\n    // to ensure child can outlive parent.\n\n    this._child = spawn(cmdName, this.spawnArgs, {\n      stdio: 'ignore',\n      detached: true\n    });\n\n    this._child.on('error', () => {}); // unref child to remove handle from event loop\n\n\n    this._child.unref();\n\n    process.nextTick(callback);\n  }\n\n}\n\nmodule.exports = {\n  MongocryptdManager\n};","map":{"version":3,"sources":["C:/Users/Tanja Aakerholt/Documents/GitHub/portfolio2/node_modules/mongodb-client-encryption/lib/mongocryptdManager.js"],"names":["spawn","require","MongocryptdManager","constructor","extraOptions","mongocryptdURI","uri","bypassSpawn","mongocryptdBypassSpawn","spawnPath","mongocryptdSpawnPath","spawnArgs","Array","isArray","mongocryptdSpawnArgs","concat","filter","arg","every","indexOf","push","callback","cmdName","_child","stdio","detached","on","unref","process","nextTick","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,eAAD,CAAP,CAAyBD,KAAvC;AAEA;AACA;AACA;AACA;;;AACA,MAAME,kBAAN,CAAyB;AACvB;AACF;AACA;AACA;AACA;AACEC,EAAAA,WAAW,CAACC,YAAD,EAAe;AACxBA,IAAAA,YAAY,GAAGA,YAAY,IAAI,EAA/B,CADwB,CAGxB;AACA;;AACA,QAAIA,YAAY,CAACC,cAAjB,EAAiC;AAC/B,WAAKC,GAAL,GAAWF,YAAY,CAACC,cAAxB;AACD,KAFD,MAEO;AACL;AACA;AACA,WAAKC,GAAL,GAAW,0DAAX;AACD;;AAED,SAAKC,WAAL,GAAmB,CAAC,CAACH,YAAY,CAACI,sBAAlC;AAEA,SAAKC,SAAL,GAAiBL,YAAY,CAACM,oBAAb,IAAqC,EAAtD;AACA,SAAKC,SAAL,GAAiB,EAAjB;;AACA,QAAIC,KAAK,CAACC,OAAN,CAAcT,YAAY,CAACU,oBAA3B,CAAJ,EAAsD;AACpD,WAAKH,SAAL,GAAiB,KAAKA,SAAL,CAAeI,MAAf,CAAsBX,YAAY,CAACU,oBAAnC,CAAjB;AACD;;AACD,QACE,KAAKH,SAAL,CACGK,MADH,CACUC,GAAG,IAAI,OAAOA,GAAP,KAAe,QADhC,EAEGC,KAFH,CAESD,GAAG,IAAIA,GAAG,CAACE,OAAJ,CAAY,2BAAZ,IAA2C,CAF3D,CADF,EAIE;AACA,WAAKR,SAAL,CAAeS,IAAf,CAAoB,2BAApB,EAAiD,EAAjD;AACD;AACF;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEpB,EAAAA,KAAK,CAACqB,QAAD,EAAW;AACd,UAAMC,OAAO,GAAG,KAAKb,SAAL,IAAkB,aAAlC,CADc,CAGd;AACA;;AACA,SAAKc,MAAL,GAAcvB,KAAK,CAACsB,OAAD,EAAU,KAAKX,SAAf,EAA0B;AAC3Ca,MAAAA,KAAK,EAAE,QADoC;AAE3CC,MAAAA,QAAQ,EAAE;AAFiC,KAA1B,CAAnB;;AAKA,SAAKF,MAAL,CAAYG,EAAZ,CAAe,OAAf,EAAwB,MAAM,CAAE,CAAhC,EAVc,CAYd;;;AACA,SAAKH,MAAL,CAAYI,KAAZ;;AAEAC,IAAAA,OAAO,CAACC,QAAR,CAAiBR,QAAjB;AACD;;AAzDsB;;AA4DzBS,MAAM,CAACC,OAAP,GAAiB;AAAE7B,EAAAA;AAAF,CAAjB","sourcesContent":["'use strict';\n\nconst spawn = require('child_process').spawn;\n\n/**\n * @ignore\n * An internal class that handles spawning a mongocryptd.\n */\nclass MongocryptdManager {\n  /**\n   * @ignore\n   * Creates a new Mongocryptd Manager\n   * @param {AutoEncrypter~AutoEncryptionExtraOptions} [extraOptions] extra options that determine how/when to spawn a mongocryptd\n   */\n  constructor(extraOptions) {\n    extraOptions = extraOptions || {};\n\n    // TODO: this is not actually supported by the spec, so we should clarify\n    // with the spec or get rid of this\n    if (extraOptions.mongocryptdURI) {\n      this.uri = extraOptions.mongocryptdURI;\n    } else {\n      // TODO: eventually support connecting on Linux Socket for non-windows,\n      // blocked by SERVER-41029\n      this.uri = 'mongodb://localhost:27020/?serverSelectionTimeoutMS=1000';\n    }\n\n    this.bypassSpawn = !!extraOptions.mongocryptdBypassSpawn;\n\n    this.spawnPath = extraOptions.mongocryptdSpawnPath || '';\n    this.spawnArgs = [];\n    if (Array.isArray(extraOptions.mongocryptdSpawnArgs)) {\n      this.spawnArgs = this.spawnArgs.concat(extraOptions.mongocryptdSpawnArgs);\n    }\n    if (\n      this.spawnArgs\n        .filter(arg => typeof arg === 'string')\n        .every(arg => arg.indexOf('--idleShutdownTimeoutSecs') < 0)\n    ) {\n      this.spawnArgs.push('--idleShutdownTimeoutSecs', 60);\n    }\n  }\n\n  /**\n   * @ignore\n   * Will check to see if a mongocryptd is up. If it is not up, it will attempt\n   * to spawn a mongocryptd in a detached process, and then wait for it to be up.\n   * @param {Function} callback Invoked when we think a mongocryptd is up\n   */\n  spawn(callback) {\n    const cmdName = this.spawnPath || 'mongocryptd';\n\n    // Spawned with stdio: ignore and detatched:true\n    // to ensure child can outlive parent.\n    this._child = spawn(cmdName, this.spawnArgs, {\n      stdio: 'ignore',\n      detached: true\n    });\n\n    this._child.on('error', () => {});\n\n    // unref child to remove handle from event loop\n    this._child.unref();\n\n    process.nextTick(callback);\n  }\n}\n\nmodule.exports = { MongocryptdManager };\n"]},"metadata":{},"sourceType":"script"}