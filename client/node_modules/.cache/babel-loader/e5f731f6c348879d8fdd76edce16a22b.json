{"ast":null,"code":"'use strict';\n\nconst CommandOperation = require('./command');\n\nconst levelValues = new Set(['off', 'slow_only', 'all']);\n\nclass SetProfilingLevelOperation extends CommandOperation {\n  constructor(db, level, options) {\n    let profile = 0;\n\n    if (level === 'off') {\n      profile = 0;\n    } else if (level === 'slow_only') {\n      profile = 1;\n    } else if (level === 'all') {\n      profile = 2;\n    }\n\n    super(db, options);\n    this.level = level;\n    this.profile = profile;\n  }\n\n  _buildCommand() {\n    const profile = this.profile; // Set up the profile number\n\n    const command = {\n      profile\n    };\n    return command;\n  }\n\n  execute(callback) {\n    const level = this.level;\n\n    if (!levelValues.has(level)) {\n      return callback(new Error('Error: illegal profiling level value ' + level));\n    }\n\n    super.execute((err, doc) => {\n      if (err == null && doc.ok === 1) return callback(null, level);\n      return err != null ? callback(err, null) : callback(new Error('Error with profile command'), null);\n    });\n  }\n\n}\n\nmodule.exports = SetProfilingLevelOperation;","map":{"version":3,"sources":["C:/Users/Tanja Aakerholt/Documents/GitHub/portfolio2/client/node_modules/mongodb/lib/operations/set_profiling_level.js"],"names":["CommandOperation","require","levelValues","Set","SetProfilingLevelOperation","constructor","db","level","options","profile","_buildCommand","command","execute","callback","has","Error","err","doc","ok","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,gBAAgB,GAAGC,OAAO,CAAC,WAAD,CAAhC;;AACA,MAAMC,WAAW,GAAG,IAAIC,GAAJ,CAAQ,CAAC,KAAD,EAAQ,WAAR,EAAqB,KAArB,CAAR,CAApB;;AAEA,MAAMC,0BAAN,SAAyCJ,gBAAzC,CAA0D;AACxDK,EAAAA,WAAW,CAACC,EAAD,EAAKC,KAAL,EAAYC,OAAZ,EAAqB;AAC9B,QAAIC,OAAO,GAAG,CAAd;;AAEA,QAAIF,KAAK,KAAK,KAAd,EAAqB;AACnBE,MAAAA,OAAO,GAAG,CAAV;AACD,KAFD,MAEO,IAAIF,KAAK,KAAK,WAAd,EAA2B;AAChCE,MAAAA,OAAO,GAAG,CAAV;AACD,KAFM,MAEA,IAAIF,KAAK,KAAK,KAAd,EAAqB;AAC1BE,MAAAA,OAAO,GAAG,CAAV;AACD;;AAED,UAAMH,EAAN,EAAUE,OAAV;AACA,SAAKD,KAAL,GAAaA,KAAb;AACA,SAAKE,OAAL,GAAeA,OAAf;AACD;;AAEDC,EAAAA,aAAa,GAAG;AACd,UAAMD,OAAO,GAAG,KAAKA,OAArB,CADc,CAGd;;AACA,UAAME,OAAO,GAAG;AAAEF,MAAAA;AAAF,KAAhB;AAEA,WAAOE,OAAP;AACD;;AAEDC,EAAAA,OAAO,CAACC,QAAD,EAAW;AAChB,UAAMN,KAAK,GAAG,KAAKA,KAAnB;;AAEA,QAAI,CAACL,WAAW,CAACY,GAAZ,CAAgBP,KAAhB,CAAL,EAA6B;AAC3B,aAAOM,QAAQ,CAAC,IAAIE,KAAJ,CAAU,0CAA0CR,KAApD,CAAD,CAAf;AACD;;AAED,UAAMK,OAAN,CAAc,CAACI,GAAD,EAAMC,GAAN,KAAc;AAC1B,UAAID,GAAG,IAAI,IAAP,IAAeC,GAAG,CAACC,EAAJ,KAAW,CAA9B,EAAiC,OAAOL,QAAQ,CAAC,IAAD,EAAON,KAAP,CAAf;AACjC,aAAOS,GAAG,IAAI,IAAP,GACHH,QAAQ,CAACG,GAAD,EAAM,IAAN,CADL,GAEHH,QAAQ,CAAC,IAAIE,KAAJ,CAAU,4BAAV,CAAD,EAA0C,IAA1C,CAFZ;AAGD,KALD;AAMD;;AAvCuD;;AA0C1DI,MAAM,CAACC,OAAP,GAAiBhB,0BAAjB","sourcesContent":["'use strict';\r\n\r\nconst CommandOperation = require('./command');\r\nconst levelValues = new Set(['off', 'slow_only', 'all']);\r\n\r\nclass SetProfilingLevelOperation extends CommandOperation {\r\n  constructor(db, level, options) {\r\n    let profile = 0;\r\n\r\n    if (level === 'off') {\r\n      profile = 0;\r\n    } else if (level === 'slow_only') {\r\n      profile = 1;\r\n    } else if (level === 'all') {\r\n      profile = 2;\r\n    }\r\n\r\n    super(db, options);\r\n    this.level = level;\r\n    this.profile = profile;\r\n  }\r\n\r\n  _buildCommand() {\r\n    const profile = this.profile;\r\n\r\n    // Set up the profile number\r\n    const command = { profile };\r\n\r\n    return command;\r\n  }\r\n\r\n  execute(callback) {\r\n    const level = this.level;\r\n\r\n    if (!levelValues.has(level)) {\r\n      return callback(new Error('Error: illegal profiling level value ' + level));\r\n    }\r\n\r\n    super.execute((err, doc) => {\r\n      if (err == null && doc.ok === 1) return callback(null, level);\r\n      return err != null\r\n        ? callback(err, null)\r\n        : callback(new Error('Error with profile command'), null);\r\n    });\r\n  }\r\n}\r\n\r\nmodule.exports = SetProfilingLevelOperation;\r\n"]},"metadata":{},"sourceType":"script"}