{"ast":null,"code":"'use strict';\n\nconst kWriteConcernKeys = new Set(['w', 'wtimeout', 'j', 'journal', 'fsync']);\nlet utils;\n/**\r\n * The **WriteConcern** class is a class that represents a MongoDB WriteConcern.\r\n * @class\r\n * @property {(number|string)} w The write concern\r\n * @property {number} wtimeout The write concern timeout\r\n * @property {boolean} j The journal write concern\r\n * @property {boolean} fsync The file sync write concern\r\n * @see https://docs.mongodb.com/manual/reference/write-concern/index.html\r\n */\n\nclass WriteConcern {\n  /**\r\n   * Constructs a WriteConcern from the write concern properties.\r\n   * @param {(number|string)} [w] The write concern\r\n   * @param {number} [wtimeout] The write concern timeout\r\n   * @param {boolean} [j] The journal write concern\r\n   * @param {boolean} [fsync] The file sync write concern\r\n   */\n  constructor(w, wtimeout, j, fsync) {\n    if (w != null) {\n      this.w = w;\n    }\n\n    if (wtimeout != null) {\n      this.wtimeout = wtimeout;\n    }\n\n    if (j != null) {\n      this.j = j;\n    }\n\n    if (fsync != null) {\n      this.fsync = fsync;\n    }\n  }\n  /**\r\n   * Construct a WriteConcern given an options object.\r\n   *\r\n   * @param {object} [options] The options object from which to extract the write concern.\r\n   * @param {(number|string)} [options.w] **Deprecated** Use `options.writeConcern` instead\r\n   * @param {number} [options.wtimeout] **Deprecated** Use `options.writeConcern` instead\r\n   * @param {boolean} [options.j] **Deprecated** Use `options.writeConcern` instead\r\n   * @param {boolean} [options.fsync] **Deprecated** Use `options.writeConcern` instead\r\n   * @param {object|WriteConcern} [options.writeConcern] Specify write concern settings.\r\n   * @return {WriteConcern}\r\n   */\n\n\n  static fromOptions(options) {\n    if (options == null || options.writeConcern == null && options.w == null && options.wtimeout == null && options.j == null && options.journal == null && options.fsync == null) {\n      return;\n    }\n\n    if (options.writeConcern) {\n      if (typeof options.writeConcern === 'string') {\n        return new WriteConcern(options.writeConcern);\n      }\n\n      if (!Object.keys(options.writeConcern).some(key => kWriteConcernKeys.has(key))) {\n        return;\n      }\n\n      return new WriteConcern(options.writeConcern.w, options.writeConcern.wtimeout, options.writeConcern.j || options.writeConcern.journal, options.writeConcern.fsync);\n    } // this is down here to prevent circular dependency\n\n\n    if (!utils) utils = require('./utils');\n    utils.emitWarningOnce(`Top-level use of w, wtimeout, j, and fsync is deprecated. Use writeConcern instead.`);\n    return new WriteConcern(options.w, options.wtimeout, options.j || options.journal, options.fsync);\n  }\n\n}\n\nmodule.exports = WriteConcern;","map":{"version":3,"sources":["C:/Users/Tanja Aakerholt/Documents/GitHub/portfolio2/client/node_modules/mongodb/lib/write_concern.js"],"names":["kWriteConcernKeys","Set","utils","WriteConcern","constructor","w","wtimeout","j","fsync","fromOptions","options","writeConcern","journal","Object","keys","some","key","has","require","emitWarningOnce","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,iBAAiB,GAAG,IAAIC,GAAJ,CAAQ,CAAC,GAAD,EAAM,UAAN,EAAkB,GAAlB,EAAuB,SAAvB,EAAkC,OAAlC,CAAR,CAA1B;AACA,IAAIC,KAAJ;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,YAAN,CAAmB;AACjB;AACF;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,WAAW,CAACC,CAAD,EAAIC,QAAJ,EAAcC,CAAd,EAAiBC,KAAjB,EAAwB;AACjC,QAAIH,CAAC,IAAI,IAAT,EAAe;AACb,WAAKA,CAAL,GAASA,CAAT;AACD;;AACD,QAAIC,QAAQ,IAAI,IAAhB,EAAsB;AACpB,WAAKA,QAAL,GAAgBA,QAAhB;AACD;;AACD,QAAIC,CAAC,IAAI,IAAT,EAAe;AACb,WAAKA,CAAL,GAASA,CAAT;AACD;;AACD,QAAIC,KAAK,IAAI,IAAb,EAAmB;AACjB,WAAKA,KAAL,GAAaA,KAAb;AACD;AACF;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACoB,SAAXC,WAAW,CAACC,OAAD,EAAU;AAC1B,QACEA,OAAO,IAAI,IAAX,IACCA,OAAO,CAACC,YAAR,IAAwB,IAAxB,IACCD,OAAO,CAACL,CAAR,IAAa,IADd,IAECK,OAAO,CAACJ,QAAR,IAAoB,IAFrB,IAGCI,OAAO,CAACH,CAAR,IAAa,IAHd,IAICG,OAAO,CAACE,OAAR,IAAmB,IAJpB,IAKCF,OAAO,CAACF,KAAR,IAAiB,IAPrB,EAQE;AACA;AACD;;AAED,QAAIE,OAAO,CAACC,YAAZ,EAA0B;AACxB,UAAI,OAAOD,OAAO,CAACC,YAAf,KAAgC,QAApC,EAA8C;AAC5C,eAAO,IAAIR,YAAJ,CAAiBO,OAAO,CAACC,YAAzB,CAAP;AACD;;AAED,UAAI,CAACE,MAAM,CAACC,IAAP,CAAYJ,OAAO,CAACC,YAApB,EAAkCI,IAAlC,CAAuCC,GAAG,IAAIhB,iBAAiB,CAACiB,GAAlB,CAAsBD,GAAtB,CAA9C,CAAL,EAAgF;AAC9E;AACD;;AAED,aAAO,IAAIb,YAAJ,CACLO,OAAO,CAACC,YAAR,CAAqBN,CADhB,EAELK,OAAO,CAACC,YAAR,CAAqBL,QAFhB,EAGLI,OAAO,CAACC,YAAR,CAAqBJ,CAArB,IAA0BG,OAAO,CAACC,YAAR,CAAqBC,OAH1C,EAILF,OAAO,CAACC,YAAR,CAAqBH,KAJhB,CAAP;AAMD,KA5ByB,CA8B1B;;;AACA,QAAI,CAACN,KAAL,EAAYA,KAAK,GAAGgB,OAAO,CAAC,SAAD,CAAf;AAEZhB,IAAAA,KAAK,CAACiB,eAAN,CACG,qFADH;AAGA,WAAO,IAAIhB,YAAJ,CACLO,OAAO,CAACL,CADH,EAELK,OAAO,CAACJ,QAFH,EAGLI,OAAO,CAACH,CAAR,IAAaG,OAAO,CAACE,OAHhB,EAILF,OAAO,CAACF,KAJH,CAAP;AAMD;;AA5EgB;;AA+EnBY,MAAM,CAACC,OAAP,GAAiBlB,YAAjB","sourcesContent":["'use strict';\r\n\r\nconst kWriteConcernKeys = new Set(['w', 'wtimeout', 'j', 'journal', 'fsync']);\r\nlet utils;\r\n\r\n/**\r\n * The **WriteConcern** class is a class that represents a MongoDB WriteConcern.\r\n * @class\r\n * @property {(number|string)} w The write concern\r\n * @property {number} wtimeout The write concern timeout\r\n * @property {boolean} j The journal write concern\r\n * @property {boolean} fsync The file sync write concern\r\n * @see https://docs.mongodb.com/manual/reference/write-concern/index.html\r\n */\r\nclass WriteConcern {\r\n  /**\r\n   * Constructs a WriteConcern from the write concern properties.\r\n   * @param {(number|string)} [w] The write concern\r\n   * @param {number} [wtimeout] The write concern timeout\r\n   * @param {boolean} [j] The journal write concern\r\n   * @param {boolean} [fsync] The file sync write concern\r\n   */\r\n  constructor(w, wtimeout, j, fsync) {\r\n    if (w != null) {\r\n      this.w = w;\r\n    }\r\n    if (wtimeout != null) {\r\n      this.wtimeout = wtimeout;\r\n    }\r\n    if (j != null) {\r\n      this.j = j;\r\n    }\r\n    if (fsync != null) {\r\n      this.fsync = fsync;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Construct a WriteConcern given an options object.\r\n   *\r\n   * @param {object} [options] The options object from which to extract the write concern.\r\n   * @param {(number|string)} [options.w] **Deprecated** Use `options.writeConcern` instead\r\n   * @param {number} [options.wtimeout] **Deprecated** Use `options.writeConcern` instead\r\n   * @param {boolean} [options.j] **Deprecated** Use `options.writeConcern` instead\r\n   * @param {boolean} [options.fsync] **Deprecated** Use `options.writeConcern` instead\r\n   * @param {object|WriteConcern} [options.writeConcern] Specify write concern settings.\r\n   * @return {WriteConcern}\r\n   */\r\n  static fromOptions(options) {\r\n    if (\r\n      options == null ||\r\n      (options.writeConcern == null &&\r\n        options.w == null &&\r\n        options.wtimeout == null &&\r\n        options.j == null &&\r\n        options.journal == null &&\r\n        options.fsync == null)\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    if (options.writeConcern) {\r\n      if (typeof options.writeConcern === 'string') {\r\n        return new WriteConcern(options.writeConcern);\r\n      }\r\n\r\n      if (!Object.keys(options.writeConcern).some(key => kWriteConcernKeys.has(key))) {\r\n        return;\r\n      }\r\n\r\n      return new WriteConcern(\r\n        options.writeConcern.w,\r\n        options.writeConcern.wtimeout,\r\n        options.writeConcern.j || options.writeConcern.journal,\r\n        options.writeConcern.fsync\r\n      );\r\n    }\r\n\r\n    // this is down here to prevent circular dependency\r\n    if (!utils) utils = require('./utils');\r\n\r\n    utils.emitWarningOnce(\r\n      `Top-level use of w, wtimeout, j, and fsync is deprecated. Use writeConcern instead.`\r\n    );\r\n    return new WriteConcern(\r\n      options.w,\r\n      options.wtimeout,\r\n      options.j || options.journal,\r\n      options.fsync\r\n    );\r\n  }\r\n}\r\n\r\nmodule.exports = WriteConcern;\r\n"]},"metadata":{},"sourceType":"script"}