{"ast":null,"code":"\"use strict\";\n\nconst assert = require(\"assert\");\n\nfunction findModuleNotFound(err, name) {\n  // Check the first line of the error message\n  const msg = err.message.split(\"\\n\")[0];\n  return msg && ( // Check for \"Cannot find module 'foo'\"\n  msg.includes(`'${name}'`) // Check for \"Your application tried to access foo (a peer dependency) ...\" (Yarn v2 PnP)\n  // https://github.com/yarnpkg/berry/blob/e81dc0d29bb2f41818d9c5c1c74bab1406fb979b/packages/yarnpkg-pnp/sources/loader/makeApi.ts#L680\n  || msg.includes(` ${name} `) // Check for \"Your application tried to access foo. While ...\" (Yarn v2 PnP)\n  // https://github.com/yarnpkg/berry/blob/e81dc0d29bb2f41818d9c5c1c74bab1406fb979b/packages/yarnpkg-pnp/sources/loader/makeApi.ts#L704\n  || msg.includes(` ${name}. `) // Check for \"Your application tried to access foo, but ...\" (Yarn v2 PnP)\n  // https://github.com/yarnpkg/berry/blob/e81dc0d29bb2f41818d9c5c1c74bab1406fb979b/packages/yarnpkg-pnp/sources/loader/makeApi.ts#L718\n  || msg.includes(` ${name}, `));\n}\n\nfunction _optionalRequire(callerRequire, resolve, path, message) {\n  let opts;\n\n  if (typeof message === \"object\") {\n    opts = message;\n    assert(!(opts.hasOwnProperty(\"notFound\") && opts.hasOwnProperty(\"default\")), \"optionalRequire: options set with both `notFound` and `default`\");\n  } else {\n    opts = {\n      message\n    };\n  }\n\n  try {\n    return resolve ? callerRequire.resolve(path) : callerRequire(path);\n  } catch (e) {\n    if (e.code !== \"MODULE_NOT_FOUND\" || !findModuleNotFound(e, path)) {\n      // if the module we are requiring fail because it try to require a\n      // module that's not found, then we have to report this as failed.\n      if (typeof opts.fail === \"function\") {\n        return opts.fail(e);\n      }\n\n      throw e;\n    }\n\n    if (opts.message) {\n      const message = typeof opts.message === \"string\" ? `${opts.message} - ` : \"\";\n      const r = resolve ? \"resolved\" : \"found\";\n      optionalRequire.log(`${message}optional module not ${r}`, path);\n    }\n\n    if (typeof opts.notFound === \"function\") {\n      return opts.notFound(e);\n    }\n\n    return opts.default;\n  }\n}\n\nconst tryRequire = (callerRequire, path, message) => _optionalRequire(callerRequire, false, path, message);\n\nconst tryResolve = (callerRequire, path, message) => _optionalRequire(callerRequire, true, path, message);\n\nfunction optionalRequire(callerRequire) {\n  const x = (path, message) => tryRequire(callerRequire, path, message);\n\n  x.resolve = (path, message) => tryResolve(callerRequire, path, message);\n\n  return x;\n}\n\noptionalRequire.try = tryRequire;\noptionalRequire.tryResolve = tryResolve;\noptionalRequire.resolve = tryResolve;\n\noptionalRequire.log = (message, path) => console.log(`Just FYI: ${message}; Path \"${path}\"`);\n\nmodule.exports = optionalRequire;","map":{"version":3,"sources":["C:/Users/Tanja Aakerholt/Documents/GitHub/portfolio2/node_modules/optional-require/index.js"],"names":["assert","require","findModuleNotFound","err","name","msg","message","split","includes","_optionalRequire","callerRequire","resolve","path","opts","hasOwnProperty","e","code","fail","r","optionalRequire","log","notFound","default","tryRequire","tryResolve","x","try","console","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst assert = require(\"assert\");\n\nfunction findModuleNotFound(err, name) {\n  // Check the first line of the error message\n  const msg = err.message.split(\"\\n\")[0];\n  return msg && (\n    // Check for \"Cannot find module 'foo'\"\n    msg.includes(`'${name}'`)\n    // Check for \"Your application tried to access foo (a peer dependency) ...\" (Yarn v2 PnP)\n    // https://github.com/yarnpkg/berry/blob/e81dc0d29bb2f41818d9c5c1c74bab1406fb979b/packages/yarnpkg-pnp/sources/loader/makeApi.ts#L680\n    || msg.includes(` ${name} `)\n    // Check for \"Your application tried to access foo. While ...\" (Yarn v2 PnP)\n    // https://github.com/yarnpkg/berry/blob/e81dc0d29bb2f41818d9c5c1c74bab1406fb979b/packages/yarnpkg-pnp/sources/loader/makeApi.ts#L704\n    || msg.includes(` ${name}. `)\n    // Check for \"Your application tried to access foo, but ...\" (Yarn v2 PnP)\n    // https://github.com/yarnpkg/berry/blob/e81dc0d29bb2f41818d9c5c1c74bab1406fb979b/packages/yarnpkg-pnp/sources/loader/makeApi.ts#L718\n    || msg.includes(` ${name}, `)\n  );\n}\n\nfunction _optionalRequire(callerRequire, resolve, path, message) {\n  let opts;\n\n  if (typeof message === \"object\") {\n    opts = message;\n    assert(\n      !(opts.hasOwnProperty(\"notFound\") && opts.hasOwnProperty(\"default\")),\n      \"optionalRequire: options set with both `notFound` and `default`\"\n    );\n  } else {\n    opts = { message };\n  }\n\n  try {\n    return resolve ? callerRequire.resolve(path) : callerRequire(path);\n  } catch (e) {\n    if (e.code !== \"MODULE_NOT_FOUND\" || !findModuleNotFound(e, path)) {\n      // if the module we are requiring fail because it try to require a\n      // module that's not found, then we have to report this as failed.\n      if (typeof opts.fail === \"function\") {\n        return opts.fail(e);\n      }\n      throw e;\n    }\n\n    if (opts.message) {\n      const message = typeof opts.message === \"string\" ? `${opts.message} - ` : \"\";\n      const r = resolve ? \"resolved\" : \"found\";\n      optionalRequire.log(`${message}optional module not ${r}`, path);\n    }\n\n    if (typeof opts.notFound === \"function\") {\n      return opts.notFound(e);\n    }\n\n    return opts.default;\n  }\n}\n\nconst tryRequire = (callerRequire, path, message) => _optionalRequire(callerRequire, false, path, message);\nconst tryResolve = (callerRequire, path, message) => _optionalRequire(callerRequire, true, path, message);\n\nfunction optionalRequire(callerRequire) {\n  const x = (path, message) => tryRequire(callerRequire, path, message);\n  x.resolve = (path, message) => tryResolve(callerRequire, path, message);\n  return x;\n}\n\noptionalRequire.try = tryRequire;\noptionalRequire.tryResolve = tryResolve;\noptionalRequire.resolve = tryResolve;\noptionalRequire.log = (message, path) => console.log(`Just FYI: ${message}; Path \"${path}\"`);\nmodule.exports = optionalRequire;\n"]},"metadata":{},"sourceType":"script"}