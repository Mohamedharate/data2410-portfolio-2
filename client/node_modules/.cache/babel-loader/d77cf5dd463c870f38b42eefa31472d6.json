{"ast":null,"code":"'use strict';\n\nconst Aspect = require('./operation').Aspect;\n\nconst defineAspects = require('./operation').defineAspects;\n\nconst OperationBase = require('./operation').OperationBase;\n\nconst decorateCommand = require('../utils').decorateCommand;\n\nconst decorateWithReadConcern = require('../utils').decorateWithReadConcern;\n\nconst executeCommand = require('./db_ops').executeCommand;\n\nconst handleCallback = require('../utils').handleCallback;\n\nconst ReadPreference = require('../core').ReadPreference;\n\nconst toError = require('../utils').toError;\n/**\r\n * Execute a geo search using a geo haystack index on a collection.\r\n *\r\n * @class\r\n * @property {Collection} a Collection instance.\r\n * @property {number} x Point to search on the x axis, ensure the indexes are ordered in the same order.\r\n * @property {number} y Point to search on the y axis, ensure the indexes are ordered in the same order.\r\n * @property {object} [options] Optional settings. See Collection.prototype.geoHaystackSearch for a list of options.\r\n */\n\n\nclass GeoHaystackSearchOperation extends OperationBase {\n  /**\r\n   * Construct a GeoHaystackSearch operation.\r\n   *\r\n   * @param {Collection} a Collection instance.\r\n   * @param {number} x Point to search on the x axis, ensure the indexes are ordered in the same order.\r\n   * @param {number} y Point to search on the y axis, ensure the indexes are ordered in the same order.\r\n   * @param {object} [options] Optional settings. See Collection.prototype.geoHaystackSearch for a list of options.\r\n   */\n  constructor(collection, x, y, options) {\n    super(options);\n    this.collection = collection;\n    this.x = x;\n    this.y = y;\n  }\n  /**\r\n   * Execute the operation.\r\n   *\r\n   * @param {Collection~resultCallback} [callback] The command result callback\r\n   */\n\n\n  execute(callback) {\n    const coll = this.collection;\n    const x = this.x;\n    const y = this.y;\n    let options = this.options; // Build command object\n\n    let commandObject = {\n      geoSearch: coll.collectionName,\n      near: [x, y]\n    }; // Remove read preference from hash if it exists\n\n    commandObject = decorateCommand(commandObject, options, ['readPreference', 'session']);\n    options = Object.assign({}, options); // Ensure we have the right read preference inheritance\n\n    options.readPreference = ReadPreference.resolve(coll, options); // Do we have a readConcern specified\n\n    decorateWithReadConcern(commandObject, coll, options); // Execute the command\n\n    executeCommand(coll.s.db, commandObject, options, (err, res) => {\n      if (err) return handleCallback(callback, err);\n      if (res.err || res.errmsg) handleCallback(callback, toError(res)); // should we only be returning res.results here? Not sure if the user\n      // should see the other return information\n\n      handleCallback(callback, null, res);\n    });\n  }\n\n}\n\ndefineAspects(GeoHaystackSearchOperation, Aspect.READ_OPERATION);\nmodule.exports = GeoHaystackSearchOperation;","map":{"version":3,"sources":["C:/Users/Tanja Aakerholt/Documents/GitHub/portfolio2/client/node_modules/mongodb/lib/operations/geo_haystack_search.js"],"names":["Aspect","require","defineAspects","OperationBase","decorateCommand","decorateWithReadConcern","executeCommand","handleCallback","ReadPreference","toError","GeoHaystackSearchOperation","constructor","collection","x","y","options","execute","callback","coll","commandObject","geoSearch","collectionName","near","Object","assign","readPreference","resolve","s","db","err","res","errmsg","READ_OPERATION","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,aAAD,CAAP,CAAuBD,MAAtC;;AACA,MAAME,aAAa,GAAGD,OAAO,CAAC,aAAD,CAAP,CAAuBC,aAA7C;;AACA,MAAMC,aAAa,GAAGF,OAAO,CAAC,aAAD,CAAP,CAAuBE,aAA7C;;AACA,MAAMC,eAAe,GAAGH,OAAO,CAAC,UAAD,CAAP,CAAoBG,eAA5C;;AACA,MAAMC,uBAAuB,GAAGJ,OAAO,CAAC,UAAD,CAAP,CAAoBI,uBAApD;;AACA,MAAMC,cAAc,GAAGL,OAAO,CAAC,UAAD,CAAP,CAAoBK,cAA3C;;AACA,MAAMC,cAAc,GAAGN,OAAO,CAAC,UAAD,CAAP,CAAoBM,cAA3C;;AACA,MAAMC,cAAc,GAAGP,OAAO,CAAC,SAAD,CAAP,CAAmBO,cAA1C;;AACA,MAAMC,OAAO,GAAGR,OAAO,CAAC,UAAD,CAAP,CAAoBQ,OAApC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,0BAAN,SAAyCP,aAAzC,CAAuD;AACrD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEQ,EAAAA,WAAW,CAACC,UAAD,EAAaC,CAAb,EAAgBC,CAAhB,EAAmBC,OAAnB,EAA4B;AACrC,UAAMA,OAAN;AAEA,SAAKH,UAAL,GAAkBA,UAAlB;AACA,SAAKC,CAAL,GAASA,CAAT;AACA,SAAKC,CAAL,GAASA,CAAT;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEE,EAAAA,OAAO,CAACC,QAAD,EAAW;AAChB,UAAMC,IAAI,GAAG,KAAKN,UAAlB;AACA,UAAMC,CAAC,GAAG,KAAKA,CAAf;AACA,UAAMC,CAAC,GAAG,KAAKA,CAAf;AACA,QAAIC,OAAO,GAAG,KAAKA,OAAnB,CAJgB,CAMhB;;AACA,QAAII,aAAa,GAAG;AAClBC,MAAAA,SAAS,EAAEF,IAAI,CAACG,cADE;AAElBC,MAAAA,IAAI,EAAE,CAACT,CAAD,EAAIC,CAAJ;AAFY,KAApB,CAPgB,CAYhB;;AACAK,IAAAA,aAAa,GAAGf,eAAe,CAACe,aAAD,EAAgBJ,OAAhB,EAAyB,CAAC,gBAAD,EAAmB,SAAnB,CAAzB,CAA/B;AAEAA,IAAAA,OAAO,GAAGQ,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBT,OAAlB,CAAV,CAfgB,CAgBhB;;AACAA,IAAAA,OAAO,CAACU,cAAR,GAAyBjB,cAAc,CAACkB,OAAf,CAAuBR,IAAvB,EAA6BH,OAA7B,CAAzB,CAjBgB,CAmBhB;;AACAV,IAAAA,uBAAuB,CAACc,aAAD,EAAgBD,IAAhB,EAAsBH,OAAtB,CAAvB,CApBgB,CAsBhB;;AACAT,IAAAA,cAAc,CAACY,IAAI,CAACS,CAAL,CAAOC,EAAR,EAAYT,aAAZ,EAA2BJ,OAA3B,EAAoC,CAACc,GAAD,EAAMC,GAAN,KAAc;AAC9D,UAAID,GAAJ,EAAS,OAAOtB,cAAc,CAACU,QAAD,EAAWY,GAAX,CAArB;AACT,UAAIC,GAAG,CAACD,GAAJ,IAAWC,GAAG,CAACC,MAAnB,EAA2BxB,cAAc,CAACU,QAAD,EAAWR,OAAO,CAACqB,GAAD,CAAlB,CAAd,CAFmC,CAG9D;AACA;;AACAvB,MAAAA,cAAc,CAACU,QAAD,EAAW,IAAX,EAAiBa,GAAjB,CAAd;AACD,KANa,CAAd;AAOD;;AApDoD;;AAuDvD5B,aAAa,CAACQ,0BAAD,EAA6BV,MAAM,CAACgC,cAApC,CAAb;AAEAC,MAAM,CAACC,OAAP,GAAiBxB,0BAAjB","sourcesContent":["'use strict';\r\n\r\nconst Aspect = require('./operation').Aspect;\r\nconst defineAspects = require('./operation').defineAspects;\r\nconst OperationBase = require('./operation').OperationBase;\r\nconst decorateCommand = require('../utils').decorateCommand;\r\nconst decorateWithReadConcern = require('../utils').decorateWithReadConcern;\r\nconst executeCommand = require('./db_ops').executeCommand;\r\nconst handleCallback = require('../utils').handleCallback;\r\nconst ReadPreference = require('../core').ReadPreference;\r\nconst toError = require('../utils').toError;\r\n\r\n/**\r\n * Execute a geo search using a geo haystack index on a collection.\r\n *\r\n * @class\r\n * @property {Collection} a Collection instance.\r\n * @property {number} x Point to search on the x axis, ensure the indexes are ordered in the same order.\r\n * @property {number} y Point to search on the y axis, ensure the indexes are ordered in the same order.\r\n * @property {object} [options] Optional settings. See Collection.prototype.geoHaystackSearch for a list of options.\r\n */\r\nclass GeoHaystackSearchOperation extends OperationBase {\r\n  /**\r\n   * Construct a GeoHaystackSearch operation.\r\n   *\r\n   * @param {Collection} a Collection instance.\r\n   * @param {number} x Point to search on the x axis, ensure the indexes are ordered in the same order.\r\n   * @param {number} y Point to search on the y axis, ensure the indexes are ordered in the same order.\r\n   * @param {object} [options] Optional settings. See Collection.prototype.geoHaystackSearch for a list of options.\r\n   */\r\n  constructor(collection, x, y, options) {\r\n    super(options);\r\n\r\n    this.collection = collection;\r\n    this.x = x;\r\n    this.y = y;\r\n  }\r\n\r\n  /**\r\n   * Execute the operation.\r\n   *\r\n   * @param {Collection~resultCallback} [callback] The command result callback\r\n   */\r\n  execute(callback) {\r\n    const coll = this.collection;\r\n    const x = this.x;\r\n    const y = this.y;\r\n    let options = this.options;\r\n\r\n    // Build command object\r\n    let commandObject = {\r\n      geoSearch: coll.collectionName,\r\n      near: [x, y]\r\n    };\r\n\r\n    // Remove read preference from hash if it exists\r\n    commandObject = decorateCommand(commandObject, options, ['readPreference', 'session']);\r\n\r\n    options = Object.assign({}, options);\r\n    // Ensure we have the right read preference inheritance\r\n    options.readPreference = ReadPreference.resolve(coll, options);\r\n\r\n    // Do we have a readConcern specified\r\n    decorateWithReadConcern(commandObject, coll, options);\r\n\r\n    // Execute the command\r\n    executeCommand(coll.s.db, commandObject, options, (err, res) => {\r\n      if (err) return handleCallback(callback, err);\r\n      if (res.err || res.errmsg) handleCallback(callback, toError(res));\r\n      // should we only be returning res.results here? Not sure if the user\r\n      // should see the other return information\r\n      handleCallback(callback, null, res);\r\n    });\r\n  }\r\n}\r\n\r\ndefineAspects(GeoHaystackSearchOperation, Aspect.READ_OPERATION);\r\n\r\nmodule.exports = GeoHaystackSearchOperation;\r\n"]},"metadata":{},"sourceType":"script"}