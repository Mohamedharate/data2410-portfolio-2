{"ast":null,"code":"'use strict';\n\nconst MongoClient = require('./mongo_client');\n\nconst BSON = require('./core/connection/utils').retrieveBSON();\n\nconst MongoError = require('./core/error').MongoError;\n\ntry {\n  require.resolve('mongodb-client-encryption');\n} catch (err) {\n  throw new MongoError('Auto-encryption requested, but the module is not installed. ' + 'Please add `mongodb-client-encryption` as a dependency of your project');\n}\n\nconst mongodbClientEncryption = require('mongodb-client-encryption');\n\nif (typeof mongodbClientEncryption.extension !== 'function') {\n  throw new MongoError('loaded version of `mongodb-client-encryption` does not have property `extension`. ' + 'Please make sure you are loading the correct version of `mongodb-client-encryption`');\n}\n\nconst AutoEncrypter = mongodbClientEncryption.extension(require('../index')).AutoEncrypter;\nconst kInternalClient = Symbol('internalClient');\n\nclass Encrypter {\n  /**\n   * @param {MongoClient} client\n   * @param {{autoEncryption: import('./mongo_client').AutoEncryptionOptions, bson: object}} options\n   */\n  constructor(client, options) {\n    this.bypassAutoEncryption = !!options.autoEncryption.bypassAutoEncryption;\n    this.needsConnecting = false;\n\n    if (options.maxPoolSize === 0 && options.autoEncryption.keyVaultClient == null) {\n      options.autoEncryption.keyVaultClient = client;\n    } else if (options.autoEncryption.keyVaultClient == null) {\n      options.autoEncryption.keyVaultClient = this.getInternalClient(client);\n    }\n\n    if (this.bypassAutoEncryption) {\n      options.autoEncryption.metadataClient = undefined;\n    } else if (options.maxPoolSize === 0) {\n      options.autoEncryption.metadataClient = client;\n    } else {\n      options.autoEncryption.metadataClient = this.getInternalClient(client);\n    }\n\n    options.autoEncryption.bson = Encrypter.makeBSON(options);\n    this.autoEncrypter = new AutoEncrypter(client, options.autoEncryption);\n  }\n\n  getInternalClient(client) {\n    if (!this[kInternalClient]) {\n      const clonedOptions = {};\n\n      for (const key of Object.keys(client.s.options)) {\n        if (['autoEncryption', 'minPoolSize', 'servers', 'caseTranslate', 'dbName'].indexOf(key) !== -1) continue;\n        clonedOptions[key] = client.s.options[key];\n      }\n\n      clonedOptions.minPoolSize = 0;\n      const allEvents = [// APM\n      'commandStarted', 'commandSucceeded', 'commandFailed', // SDAM\n      'serverOpening', 'serverClosed', 'serverDescriptionChanged', 'serverHeartbeatStarted', 'serverHeartbeatSucceeded', 'serverHeartbeatFailed', 'topologyOpening', 'topologyClosed', 'topologyDescriptionChanged', // Legacy\n      'joined', 'left', 'ping', 'ha', // CMAP\n      'connectionPoolCreated', 'connectionPoolClosed', 'connectionCreated', 'connectionReady', 'connectionClosed', 'connectionCheckOutStarted', 'connectionCheckOutFailed', 'connectionCheckedOut', 'connectionCheckedIn', 'connectionPoolCleared'];\n      this[kInternalClient] = new MongoClient(client.s.url, clonedOptions);\n\n      for (const eventName of allEvents) {\n        for (const listener of client.listeners(eventName)) {\n          this[kInternalClient].on(eventName, listener);\n        }\n      }\n\n      client.on('newListener', (eventName, listener) => {\n        this[kInternalClient].on(eventName, listener);\n      });\n      this.needsConnecting = true;\n    }\n\n    return this[kInternalClient];\n  }\n\n  connectInternalClient(callback) {\n    if (this.needsConnecting) {\n      this.needsConnecting = false;\n      return this[kInternalClient].connect(callback);\n    }\n\n    return callback();\n  }\n\n  close(client, force, callback) {\n    this.autoEncrypter.teardown(e => {\n      if (this[kInternalClient] && client !== this[kInternalClient]) {\n        return this[kInternalClient].close(force, callback);\n      }\n\n      callback(e);\n    });\n  }\n\n  static makeBSON(options) {\n    return (options || {}).bson || new BSON([BSON.Binary, BSON.Code, BSON.DBRef, BSON.Decimal128, BSON.Double, BSON.Int32, BSON.Long, BSON.Map, BSON.MaxKey, BSON.MinKey, BSON.ObjectId, BSON.BSONRegExp, BSON.Symbol, BSON.Timestamp]);\n  }\n\n}\n\nmodule.exports = {\n  Encrypter\n};","map":{"version":3,"sources":["C:/Users/Tanja Aakerholt/Documents/GitHub/portfolio2/node_modules/mongodb/lib/encrypter.js"],"names":["MongoClient","require","BSON","retrieveBSON","MongoError","resolve","err","mongodbClientEncryption","extension","AutoEncrypter","kInternalClient","Symbol","Encrypter","constructor","client","options","bypassAutoEncryption","autoEncryption","needsConnecting","maxPoolSize","keyVaultClient","getInternalClient","metadataClient","undefined","bson","makeBSON","autoEncrypter","clonedOptions","key","Object","keys","s","indexOf","minPoolSize","allEvents","url","eventName","listener","listeners","on","connectInternalClient","callback","connect","close","force","teardown","e","Binary","Code","DBRef","Decimal128","Double","Int32","Long","Map","MaxKey","MinKey","ObjectId","BSONRegExp","Timestamp","module","exports"],"mappings":"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","sourcesContent":["'use strict';\nconst MongoClient = require('./mongo_client');\nconst BSON = require('./core/connection/utils').retrieveBSON();\nconst MongoError = require('./core/error').MongoError;\n\ntry {\n  require.resolve('mongodb-client-encryption');\n} catch (err) {\n  throw new MongoError(\n    'Auto-encryption requested, but the module is not installed. ' +\n      'Please add `mongodb-client-encryption` as a dependency of your project'\n  );\n}\n\nconst mongodbClientEncryption = require('mongodb-client-encryption');\nif (typeof mongodbClientEncryption.extension !== 'function') {\n  throw new MongoError(\n    'loaded version of `mongodb-client-encryption` does not have property `extension`. ' +\n      'Please make sure you are loading the correct version of `mongodb-client-encryption`'\n  );\n}\nconst AutoEncrypter = mongodbClientEncryption.extension(require('../index')).AutoEncrypter;\n\nconst kInternalClient = Symbol('internalClient');\n\nclass Encrypter {\n  /**\n   * @param {MongoClient} client\n   * @param {{autoEncryption: import('./mongo_client').AutoEncryptionOptions, bson: object}} options\n   */\n  constructor(client, options) {\n    this.bypassAutoEncryption = !!options.autoEncryption.bypassAutoEncryption;\n    this.needsConnecting = false;\n\n    if (options.maxPoolSize === 0 && options.autoEncryption.keyVaultClient == null) {\n      options.autoEncryption.keyVaultClient = client;\n    } else if (options.autoEncryption.keyVaultClient == null) {\n      options.autoEncryption.keyVaultClient = this.getInternalClient(client);\n    }\n\n    if (this.bypassAutoEncryption) {\n      options.autoEncryption.metadataClient = undefined;\n    } else if (options.maxPoolSize === 0) {\n      options.autoEncryption.metadataClient = client;\n    } else {\n      options.autoEncryption.metadataClient = this.getInternalClient(client);\n    }\n\n    options.autoEncryption.bson = Encrypter.makeBSON(options);\n\n    this.autoEncrypter = new AutoEncrypter(client, options.autoEncryption);\n  }\n\n  getInternalClient(client) {\n    if (!this[kInternalClient]) {\n      const clonedOptions = {};\n\n      for (const key of Object.keys(client.s.options)) {\n        if (\n          ['autoEncryption', 'minPoolSize', 'servers', 'caseTranslate', 'dbName'].indexOf(key) !==\n          -1\n        )\n          continue;\n        clonedOptions[key] = client.s.options[key];\n      }\n\n      clonedOptions.minPoolSize = 0;\n\n      const allEvents = [\n        // APM\n        'commandStarted',\n        'commandSucceeded',\n        'commandFailed',\n\n        // SDAM\n        'serverOpening',\n        'serverClosed',\n        'serverDescriptionChanged',\n        'serverHeartbeatStarted',\n        'serverHeartbeatSucceeded',\n        'serverHeartbeatFailed',\n        'topologyOpening',\n        'topologyClosed',\n        'topologyDescriptionChanged',\n\n        // Legacy\n        'joined',\n        'left',\n        'ping',\n        'ha',\n\n        // CMAP\n        'connectionPoolCreated',\n        'connectionPoolClosed',\n        'connectionCreated',\n        'connectionReady',\n        'connectionClosed',\n        'connectionCheckOutStarted',\n        'connectionCheckOutFailed',\n        'connectionCheckedOut',\n        'connectionCheckedIn',\n        'connectionPoolCleared'\n      ];\n\n      this[kInternalClient] = new MongoClient(client.s.url, clonedOptions);\n\n      for (const eventName of allEvents) {\n        for (const listener of client.listeners(eventName)) {\n          this[kInternalClient].on(eventName, listener);\n        }\n      }\n\n      client.on('newListener', (eventName, listener) => {\n        this[kInternalClient].on(eventName, listener);\n      });\n\n      this.needsConnecting = true;\n    }\n    return this[kInternalClient];\n  }\n\n  connectInternalClient(callback) {\n    if (this.needsConnecting) {\n      this.needsConnecting = false;\n      return this[kInternalClient].connect(callback);\n    }\n\n    return callback();\n  }\n\n  close(client, force, callback) {\n    this.autoEncrypter.teardown(e => {\n      if (this[kInternalClient] && client !== this[kInternalClient]) {\n        return this[kInternalClient].close(force, callback);\n      }\n      callback(e);\n    });\n  }\n\n  static makeBSON(options) {\n    return (\n      (options || {}).bson ||\n      new BSON([\n        BSON.Binary,\n        BSON.Code,\n        BSON.DBRef,\n        BSON.Decimal128,\n        BSON.Double,\n        BSON.Int32,\n        BSON.Long,\n        BSON.Map,\n        BSON.MaxKey,\n        BSON.MinKey,\n        BSON.ObjectId,\n        BSON.BSONRegExp,\n        BSON.Symbol,\n        BSON.Timestamp\n      ])\n    );\n  }\n}\n\nmodule.exports = { Encrypter };\n"]},"metadata":{},"sourceType":"script"}