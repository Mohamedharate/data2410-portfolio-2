{"ast":null,"code":"'use strict';\n\nconst OperationBase = require('./operation').OperationBase;\n\nconst applyWriteConcern = require('../utils').applyWriteConcern;\n\nconst checkCollectionName = require('../utils').checkCollectionName;\n\nconst executeDbAdminCommand = require('./db_ops').executeDbAdminCommand;\n\nconst handleCallback = require('../utils').handleCallback;\n\nconst loadCollection = require('../dynamic_loaders').loadCollection;\n\nconst toError = require('../utils').toError;\n\nclass RenameOperation extends OperationBase {\n  constructor(collection, newName, options) {\n    super(options);\n    this.collection = collection;\n    this.newName = newName;\n  }\n\n  execute(callback) {\n    const coll = this.collection;\n    const newName = this.newName;\n    const options = this.options;\n    let Collection = loadCollection(); // Check the collection name\n\n    checkCollectionName(newName); // Build the command\n\n    const renameCollection = coll.namespace;\n    const toCollection = coll.s.namespace.withCollection(newName).toString();\n    const dropTarget = typeof options.dropTarget === 'boolean' ? options.dropTarget : false;\n    const cmd = {\n      renameCollection: renameCollection,\n      to: toCollection,\n      dropTarget: dropTarget\n    }; // Decorate command with writeConcern if supported\n\n    applyWriteConcern(cmd, {\n      db: coll.s.db,\n      collection: coll\n    }, options); // Execute against admin\n\n    executeDbAdminCommand(coll.s.db.admin().s.db, cmd, options, (err, doc) => {\n      if (err) return handleCallback(callback, err, null); // We have an error\n\n      if (doc.errmsg) return handleCallback(callback, toError(doc), null);\n\n      try {\n        return handleCallback(callback, null, new Collection(coll.s.db, coll.s.topology, coll.s.namespace.db, newName, coll.s.pkFactory, coll.s.options));\n      } catch (err) {\n        return handleCallback(callback, toError(err), null);\n      }\n    });\n  }\n\n}\n\nmodule.exports = RenameOperation;","map":{"version":3,"sources":["C:/Users/Tanja Aakerholt/Documents/GitHub/portfolio2/client/node_modules/mongodb/lib/operations/rename.js"],"names":["OperationBase","require","applyWriteConcern","checkCollectionName","executeDbAdminCommand","handleCallback","loadCollection","toError","RenameOperation","constructor","collection","newName","options","execute","callback","coll","Collection","renameCollection","namespace","toCollection","s","withCollection","toString","dropTarget","cmd","to","db","admin","err","doc","errmsg","topology","pkFactory","module","exports"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nconst OperationBase = require('./operation').OperationBase;\r\nconst applyWriteConcern = require('../utils').applyWriteConcern;\r\nconst checkCollectionName = require('../utils').checkCollectionName;\r\nconst executeDbAdminCommand = require('./db_ops').executeDbAdminCommand;\r\nconst handleCallback = require('../utils').handleCallback;\r\nconst loadCollection = require('../dynamic_loaders').loadCollection;\r\nconst toError = require('../utils').toError;\r\n\r\nclass RenameOperation extends OperationBase {\r\n  constructor(collection, newName, options) {\r\n    super(options);\r\n\r\n    this.collection = collection;\r\n    this.newName = newName;\r\n  }\r\n\r\n  execute(callback) {\r\n    const coll = this.collection;\r\n    const newName = this.newName;\r\n    const options = this.options;\r\n\r\n    let Collection = loadCollection();\r\n    // Check the collection name\r\n    checkCollectionName(newName);\r\n    // Build the command\r\n    const renameCollection = coll.namespace;\r\n    const toCollection = coll.s.namespace.withCollection(newName).toString();\r\n    const dropTarget = typeof options.dropTarget === 'boolean' ? options.dropTarget : false;\r\n    const cmd = { renameCollection: renameCollection, to: toCollection, dropTarget: dropTarget };\r\n\r\n    // Decorate command with writeConcern if supported\r\n    applyWriteConcern(cmd, { db: coll.s.db, collection: coll }, options);\r\n\r\n    // Execute against admin\r\n    executeDbAdminCommand(coll.s.db.admin().s.db, cmd, options, (err, doc) => {\r\n      if (err) return handleCallback(callback, err, null);\r\n      // We have an error\r\n      if (doc.errmsg) return handleCallback(callback, toError(doc), null);\r\n      try {\r\n        return handleCallback(\r\n          callback,\r\n          null,\r\n          new Collection(\r\n            coll.s.db,\r\n            coll.s.topology,\r\n            coll.s.namespace.db,\r\n            newName,\r\n            coll.s.pkFactory,\r\n            coll.s.options\r\n          )\r\n        );\r\n      } catch (err) {\r\n        return handleCallback(callback, toError(err), null);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nmodule.exports = RenameOperation;\r\n"]},"metadata":{},"sourceType":"script"}