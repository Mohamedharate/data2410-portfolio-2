{"ast":null,"code":"'use strict';\n\nconst OperationBase = require('./operation').OperationBase;\n\nconst Aspect = require('./operation').Aspect;\n\nconst defineAspects = require('./operation').defineAspects;\n\nconst ReadPreference = require('../core').ReadPreference;\n\nconst maxWireVersion = require('../core/utils').maxWireVersion;\n\nconst MongoError = require('../core/error').MongoError;\n\nclass FindOperation extends OperationBase {\n  constructor(collection, ns, command, options) {\n    super(options);\n    this.ns = ns;\n    this.cmd = command;\n    this.readPreference = ReadPreference.resolve(collection, this.options);\n  }\n\n  execute(server, callback) {\n    // copied from `CommandOperationV2`, to be subclassed in the future\n    this.server = server; // updates readPreference if setReadPreference was called on the cursor\n\n    this.readPreference = ReadPreference.resolve(this, this.options);\n\n    if (typeof this.cmd.allowDiskUse !== 'undefined' && maxWireVersion(server) < 4) {\n      callback(new MongoError('The `allowDiskUse` option is not supported on MongoDB < 3.2'));\n      return;\n    }\n\n    if (this.explain) {\n      // We need to manually ensure explain is in the options.\n      this.options.explain = this.explain.verbosity;\n    } // TOOD: use `MongoDBNamespace` through and through\n\n\n    const cursorState = this.cursorState || {};\n    server.query(this.ns.toString(), this.cmd, cursorState, this.options, callback);\n  }\n\n}\n\ndefineAspects(FindOperation, [Aspect.READ_OPERATION, Aspect.RETRYABLE, Aspect.EXECUTE_WITH_SELECTION, Aspect.EXPLAINABLE]);\nmodule.exports = FindOperation;","map":{"version":3,"sources":["C:/Users/Tanja Aakerholt/Documents/GitHub/portfolio2/client/node_modules/mongodb/lib/operations/find.js"],"names":["OperationBase","require","Aspect","defineAspects","ReadPreference","maxWireVersion","MongoError","FindOperation","constructor","collection","ns","command","options","cmd","readPreference","resolve","execute","server","callback","allowDiskUse","explain","verbosity","cursorState","query","toString","READ_OPERATION","RETRYABLE","EXECUTE_WITH_SELECTION","EXPLAINABLE","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,aAAa,GAAGC,OAAO,CAAC,aAAD,CAAP,CAAuBD,aAA7C;;AACA,MAAME,MAAM,GAAGD,OAAO,CAAC,aAAD,CAAP,CAAuBC,MAAtC;;AACA,MAAMC,aAAa,GAAGF,OAAO,CAAC,aAAD,CAAP,CAAuBE,aAA7C;;AACA,MAAMC,cAAc,GAAGH,OAAO,CAAC,SAAD,CAAP,CAAmBG,cAA1C;;AACA,MAAMC,cAAc,GAAGJ,OAAO,CAAC,eAAD,CAAP,CAAyBI,cAAhD;;AACA,MAAMC,UAAU,GAAGL,OAAO,CAAC,eAAD,CAAP,CAAyBK,UAA5C;;AAEA,MAAMC,aAAN,SAA4BP,aAA5B,CAA0C;AACxCQ,EAAAA,WAAW,CAACC,UAAD,EAAaC,EAAb,EAAiBC,OAAjB,EAA0BC,OAA1B,EAAmC;AAC5C,UAAMA,OAAN;AAEA,SAAKF,EAAL,GAAUA,EAAV;AACA,SAAKG,GAAL,GAAWF,OAAX;AACA,SAAKG,cAAL,GAAsBV,cAAc,CAACW,OAAf,CAAuBN,UAAvB,EAAmC,KAAKG,OAAxC,CAAtB;AACD;;AAEDI,EAAAA,OAAO,CAACC,MAAD,EAASC,QAAT,EAAmB;AACxB;AACA,SAAKD,MAAL,GAAcA,MAAd,CAFwB,CAIxB;;AACA,SAAKH,cAAL,GAAsBV,cAAc,CAACW,OAAf,CAAuB,IAAvB,EAA6B,KAAKH,OAAlC,CAAtB;;AAEA,QAAI,OAAO,KAAKC,GAAL,CAASM,YAAhB,KAAiC,WAAjC,IAAgDd,cAAc,CAACY,MAAD,CAAd,GAAyB,CAA7E,EAAgF;AAC9EC,MAAAA,QAAQ,CAAC,IAAIZ,UAAJ,CAAe,6DAAf,CAAD,CAAR;AACA;AACD;;AAED,QAAI,KAAKc,OAAT,EAAkB;AAChB;AACA,WAAKR,OAAL,CAAaQ,OAAb,GAAuB,KAAKA,OAAL,CAAaC,SAApC;AACD,KAfuB,CAiBxB;;;AACA,UAAMC,WAAW,GAAG,KAAKA,WAAL,IAAoB,EAAxC;AACAL,IAAAA,MAAM,CAACM,KAAP,CAAa,KAAKb,EAAL,CAAQc,QAAR,EAAb,EAAiC,KAAKX,GAAtC,EAA2CS,WAA3C,EAAwD,KAAKV,OAA7D,EAAsEM,QAAtE;AACD;;AA7BuC;;AAgC1Cf,aAAa,CAACI,aAAD,EAAgB,CAC3BL,MAAM,CAACuB,cADoB,EAE3BvB,MAAM,CAACwB,SAFoB,EAG3BxB,MAAM,CAACyB,sBAHoB,EAI3BzB,MAAM,CAAC0B,WAJoB,CAAhB,CAAb;AAOAC,MAAM,CAACC,OAAP,GAAiBvB,aAAjB","sourcesContent":["'use strict';\r\n\r\nconst OperationBase = require('./operation').OperationBase;\r\nconst Aspect = require('./operation').Aspect;\r\nconst defineAspects = require('./operation').defineAspects;\r\nconst ReadPreference = require('../core').ReadPreference;\r\nconst maxWireVersion = require('../core/utils').maxWireVersion;\r\nconst MongoError = require('../core/error').MongoError;\r\n\r\nclass FindOperation extends OperationBase {\r\n  constructor(collection, ns, command, options) {\r\n    super(options);\r\n\r\n    this.ns = ns;\r\n    this.cmd = command;\r\n    this.readPreference = ReadPreference.resolve(collection, this.options);\r\n  }\r\n\r\n  execute(server, callback) {\r\n    // copied from `CommandOperationV2`, to be subclassed in the future\r\n    this.server = server;\r\n\r\n    // updates readPreference if setReadPreference was called on the cursor\r\n    this.readPreference = ReadPreference.resolve(this, this.options);\r\n\r\n    if (typeof this.cmd.allowDiskUse !== 'undefined' && maxWireVersion(server) < 4) {\r\n      callback(new MongoError('The `allowDiskUse` option is not supported on MongoDB < 3.2'));\r\n      return;\r\n    }\r\n\r\n    if (this.explain) {\r\n      // We need to manually ensure explain is in the options.\r\n      this.options.explain = this.explain.verbosity;\r\n    }\r\n\r\n    // TOOD: use `MongoDBNamespace` through and through\r\n    const cursorState = this.cursorState || {};\r\n    server.query(this.ns.toString(), this.cmd, cursorState, this.options, callback);\r\n  }\r\n}\r\n\r\ndefineAspects(FindOperation, [\r\n  Aspect.READ_OPERATION,\r\n  Aspect.RETRYABLE,\r\n  Aspect.EXECUTE_WITH_SELECTION,\r\n  Aspect.EXPLAINABLE\r\n]);\r\n\r\nmodule.exports = FindOperation;\r\n"]},"metadata":{},"sourceType":"script"}