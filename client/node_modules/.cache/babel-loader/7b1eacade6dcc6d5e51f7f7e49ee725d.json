{"ast":null,"code":"'use strict';\n\nvar Map = require('./map'),\n    Long = require('./long'),\n    Double = require('./double'),\n    Timestamp = require('./timestamp'),\n    ObjectID = require('./objectid'),\n    BSONRegExp = require('./regexp'),\n    Symbol = require('./symbol'),\n    Int32 = require('./int_32'),\n    Code = require('./code'),\n    Decimal128 = require('./decimal128'),\n    MinKey = require('./min_key'),\n    MaxKey = require('./max_key'),\n    DBRef = require('./db_ref'),\n    Binary = require('./binary'); // Parts of the parser\n\n\nvar deserialize = require('./parser/deserializer'),\n    serializer = require('./parser/serializer'),\n    calculateObjectSize = require('./parser/calculate_size'),\n    utils = require('./parser/utils');\n/**\r\n * @ignore\r\n * @api private\r\n */\n// Default Max Size\n\n\nvar MAXSIZE = 1024 * 1024 * 17; // Current Internal Temporary Serialization Buffer\n\nvar buffer = utils.allocBuffer(MAXSIZE);\n\nvar BSON = function () {};\n/**\r\n * Serialize a Javascript object.\r\n *\r\n * @param {Object} object the Javascript object to serialize.\r\n * @param {Boolean} [options.checkKeys] the serializer will check if keys are valid.\r\n * @param {Boolean} [options.serializeFunctions=false] serialize the javascript functions **(default:false)**.\r\n * @param {Boolean} [options.ignoreUndefined=true] ignore undefined fields **(default:true)**.\r\n * @param {Number} [options.minInternalBufferSize=1024*1024*17] minimum size of the internal temporary serialization buffer **(default:1024*1024*17)**.\r\n * @return {Buffer} returns the Buffer object containing the serialized object.\r\n * @api public\r\n */\n\n\nBSON.prototype.serialize = function serialize(object, options) {\n  options = options || {}; // Unpack the options\n\n  var checkKeys = typeof options.checkKeys === 'boolean' ? options.checkKeys : false;\n  var serializeFunctions = typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n  var ignoreUndefined = typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : true;\n  var minInternalBufferSize = typeof options.minInternalBufferSize === 'number' ? options.minInternalBufferSize : MAXSIZE; // Resize the internal serialization buffer if needed\n\n  if (buffer.length < minInternalBufferSize) {\n    buffer = utils.allocBuffer(minInternalBufferSize);\n  } // Attempt to serialize\n\n\n  var serializationIndex = serializer(buffer, object, checkKeys, 0, 0, serializeFunctions, ignoreUndefined, []); // Create the final buffer\n\n  var finishedBuffer = utils.allocBuffer(serializationIndex); // Copy into the finished buffer\n\n  buffer.copy(finishedBuffer, 0, 0, finishedBuffer.length); // Return the buffer\n\n  return finishedBuffer;\n};\n/**\r\n * Serialize a Javascript object using a predefined Buffer and index into the buffer, useful when pre-allocating the space for serialization.\r\n *\r\n * @param {Object} object the Javascript object to serialize.\r\n * @param {Buffer} buffer the Buffer you pre-allocated to store the serialized BSON object.\r\n * @param {Boolean} [options.checkKeys] the serializer will check if keys are valid.\r\n * @param {Boolean} [options.serializeFunctions=false] serialize the javascript functions **(default:false)**.\r\n * @param {Boolean} [options.ignoreUndefined=true] ignore undefined fields **(default:true)**.\r\n * @param {Number} [options.index] the index in the buffer where we wish to start serializing into.\r\n * @return {Number} returns the index pointing to the last written byte in the buffer.\r\n * @api public\r\n */\n\n\nBSON.prototype.serializeWithBufferAndIndex = function (object, finalBuffer, options) {\n  options = options || {}; // Unpack the options\n\n  var checkKeys = typeof options.checkKeys === 'boolean' ? options.checkKeys : false;\n  var serializeFunctions = typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n  var ignoreUndefined = typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : true;\n  var startIndex = typeof options.index === 'number' ? options.index : 0; // Attempt to serialize\n\n  var serializationIndex = serializer(finalBuffer, object, checkKeys, startIndex || 0, 0, serializeFunctions, ignoreUndefined); // Return the index\n\n  return serializationIndex - 1;\n};\n/**\r\n * Deserialize data as BSON.\r\n *\r\n * @param {Buffer} buffer the buffer containing the serialized set of BSON documents.\r\n * @param {Object} [options.evalFunctions=false] evaluate functions in the BSON document scoped to the object deserialized.\r\n * @param {Object} [options.cacheFunctions=false] cache evaluated functions for reuse.\r\n * @param {Object} [options.cacheFunctionsCrc32=false] use a crc32 code for caching, otherwise use the string of the function.\r\n * @param {Object} [options.promoteLongs=true] when deserializing a Long will fit it into a Number if it's smaller than 53 bits\r\n * @param {Object} [options.promoteBuffers=false] when deserializing a Binary will return it as a node.js Buffer instance.\r\n * @param {Object} [options.promoteValues=false] when deserializing will promote BSON values to their Node.js closest equivalent types.\r\n * @param {Object} [options.fieldsAsRaw=null] allow to specify if there what fields we wish to return as unserialized raw buffer.\r\n * @param {Object} [options.bsonRegExp=false] return BSON regular expressions as BSONRegExp instances.\r\n * @return {Object} returns the deserialized Javascript Object.\r\n * @api public\r\n */\n\n\nBSON.prototype.deserialize = function (buffer, options) {\n  return deserialize(buffer, options);\n};\n/**\r\n * Calculate the bson size for a passed in Javascript object.\r\n *\r\n * @param {Object} object the Javascript object to calculate the BSON byte size for.\r\n * @param {Boolean} [options.serializeFunctions=false] serialize the javascript functions **(default:false)**.\r\n * @param {Boolean} [options.ignoreUndefined=true] ignore undefined fields **(default:true)**.\r\n * @return {Number} returns the number of bytes the BSON object will take up.\r\n * @api public\r\n */\n\n\nBSON.prototype.calculateObjectSize = function (object, options) {\n  options = options || {};\n  var serializeFunctions = typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n  var ignoreUndefined = typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : true;\n  return calculateObjectSize(object, serializeFunctions, ignoreUndefined);\n};\n/**\r\n * Deserialize stream data as BSON documents.\r\n *\r\n * @param {Buffer} data the buffer containing the serialized set of BSON documents.\r\n * @param {Number} startIndex the start index in the data Buffer where the deserialization is to start.\r\n * @param {Number} numberOfDocuments number of documents to deserialize.\r\n * @param {Array} documents an array where to store the deserialized documents.\r\n * @param {Number} docStartIndex the index in the documents array from where to start inserting documents.\r\n * @param {Object} [options] additional options used for the deserialization.\r\n * @param {Object} [options.evalFunctions=false] evaluate functions in the BSON document scoped to the object deserialized.\r\n * @param {Object} [options.cacheFunctions=false] cache evaluated functions for reuse.\r\n * @param {Object} [options.cacheFunctionsCrc32=false] use a crc32 code for caching, otherwise use the string of the function.\r\n * @param {Object} [options.promoteLongs=true] when deserializing a Long will fit it into a Number if it's smaller than 53 bits\r\n * @param {Object} [options.promoteBuffers=false] when deserializing a Binary will return it as a node.js Buffer instance.\r\n * @param {Object} [options.promoteValues=false] when deserializing will promote BSON values to their Node.js closest equivalent types.\r\n * @param {Object} [options.fieldsAsRaw=null] allow to specify if there what fields we wish to return as unserialized raw buffer.\r\n * @param {Object} [options.bsonRegExp=false] return BSON regular expressions as BSONRegExp instances.\r\n * @return {Number} returns the next index in the buffer after deserialization **x** numbers of documents.\r\n * @api public\r\n */\n\n\nBSON.prototype.deserializeStream = function (data, startIndex, numberOfDocuments, documents, docStartIndex, options) {\n  options = options != null ? options : {};\n  var index = startIndex; // Loop over all documents\n\n  for (var i = 0; i < numberOfDocuments; i++) {\n    // Find size of the document\n    var size = data[index] | data[index + 1] << 8 | data[index + 2] << 16 | data[index + 3] << 24; // Update options with index\n\n    options['index'] = index; // Parse the document at this point\n\n    documents[docStartIndex + i] = this.deserialize(data, options); // Adjust index by the document size\n\n    index = index + size;\n  } // Return object containing end index of parsing and list of documents\n\n\n  return index;\n};\n/**\r\n * @ignore\r\n * @api private\r\n */\n// BSON MAX VALUES\n\n\nBSON.BSON_INT32_MAX = 0x7fffffff;\nBSON.BSON_INT32_MIN = -0x80000000;\nBSON.BSON_INT64_MAX = Math.pow(2, 63) - 1;\nBSON.BSON_INT64_MIN = -Math.pow(2, 63); // JS MAX PRECISE VALUES\n\nBSON.JS_INT_MAX = 0x20000000000000; // Any integer up to 2^53 can be precisely represented by a double.\n\nBSON.JS_INT_MIN = -0x20000000000000; // Any integer down to -2^53 can be precisely represented by a double.\n// Internal long versions\n// var JS_INT_MAX_LONG = Long.fromNumber(0x20000000000000); // Any integer up to 2^53 can be precisely represented by a double.\n// var JS_INT_MIN_LONG = Long.fromNumber(-0x20000000000000); // Any integer down to -2^53 can be precisely represented by a double.\n\n/**\r\n * Number BSON Type\r\n *\r\n * @classconstant BSON_DATA_NUMBER\r\n **/\n\nBSON.BSON_DATA_NUMBER = 1;\n/**\r\n * String BSON Type\r\n *\r\n * @classconstant BSON_DATA_STRING\r\n **/\n\nBSON.BSON_DATA_STRING = 2;\n/**\r\n * Object BSON Type\r\n *\r\n * @classconstant BSON_DATA_OBJECT\r\n **/\n\nBSON.BSON_DATA_OBJECT = 3;\n/**\r\n * Array BSON Type\r\n *\r\n * @classconstant BSON_DATA_ARRAY\r\n **/\n\nBSON.BSON_DATA_ARRAY = 4;\n/**\r\n * Binary BSON Type\r\n *\r\n * @classconstant BSON_DATA_BINARY\r\n **/\n\nBSON.BSON_DATA_BINARY = 5;\n/**\r\n * ObjectID BSON Type\r\n *\r\n * @classconstant BSON_DATA_OID\r\n **/\n\nBSON.BSON_DATA_OID = 7;\n/**\r\n * Boolean BSON Type\r\n *\r\n * @classconstant BSON_DATA_BOOLEAN\r\n **/\n\nBSON.BSON_DATA_BOOLEAN = 8;\n/**\r\n * Date BSON Type\r\n *\r\n * @classconstant BSON_DATA_DATE\r\n **/\n\nBSON.BSON_DATA_DATE = 9;\n/**\r\n * null BSON Type\r\n *\r\n * @classconstant BSON_DATA_NULL\r\n **/\n\nBSON.BSON_DATA_NULL = 10;\n/**\r\n * RegExp BSON Type\r\n *\r\n * @classconstant BSON_DATA_REGEXP\r\n **/\n\nBSON.BSON_DATA_REGEXP = 11;\n/**\r\n * Code BSON Type\r\n *\r\n * @classconstant BSON_DATA_CODE\r\n **/\n\nBSON.BSON_DATA_CODE = 13;\n/**\r\n * Symbol BSON Type\r\n *\r\n * @classconstant BSON_DATA_SYMBOL\r\n **/\n\nBSON.BSON_DATA_SYMBOL = 14;\n/**\r\n * Code with Scope BSON Type\r\n *\r\n * @classconstant BSON_DATA_CODE_W_SCOPE\r\n **/\n\nBSON.BSON_DATA_CODE_W_SCOPE = 15;\n/**\r\n * 32 bit Integer BSON Type\r\n *\r\n * @classconstant BSON_DATA_INT\r\n **/\n\nBSON.BSON_DATA_INT = 16;\n/**\r\n * Timestamp BSON Type\r\n *\r\n * @classconstant BSON_DATA_TIMESTAMP\r\n **/\n\nBSON.BSON_DATA_TIMESTAMP = 17;\n/**\r\n * Long BSON Type\r\n *\r\n * @classconstant BSON_DATA_LONG\r\n **/\n\nBSON.BSON_DATA_LONG = 18;\n/**\r\n * MinKey BSON Type\r\n *\r\n * @classconstant BSON_DATA_MIN_KEY\r\n **/\n\nBSON.BSON_DATA_MIN_KEY = 0xff;\n/**\r\n * MaxKey BSON Type\r\n *\r\n * @classconstant BSON_DATA_MAX_KEY\r\n **/\n\nBSON.BSON_DATA_MAX_KEY = 0x7f;\n/**\r\n * Binary Default Type\r\n *\r\n * @classconstant BSON_BINARY_SUBTYPE_DEFAULT\r\n **/\n\nBSON.BSON_BINARY_SUBTYPE_DEFAULT = 0;\n/**\r\n * Binary Function Type\r\n *\r\n * @classconstant BSON_BINARY_SUBTYPE_FUNCTION\r\n **/\n\nBSON.BSON_BINARY_SUBTYPE_FUNCTION = 1;\n/**\r\n * Binary Byte Array Type\r\n *\r\n * @classconstant BSON_BINARY_SUBTYPE_BYTE_ARRAY\r\n **/\n\nBSON.BSON_BINARY_SUBTYPE_BYTE_ARRAY = 2;\n/**\r\n * Binary UUID Type\r\n *\r\n * @classconstant BSON_BINARY_SUBTYPE_UUID\r\n **/\n\nBSON.BSON_BINARY_SUBTYPE_UUID = 3;\n/**\r\n * Binary MD5 Type\r\n *\r\n * @classconstant BSON_BINARY_SUBTYPE_MD5\r\n **/\n\nBSON.BSON_BINARY_SUBTYPE_MD5 = 4;\n/**\r\n * Binary User Defined Type\r\n *\r\n * @classconstant BSON_BINARY_SUBTYPE_USER_DEFINED\r\n **/\n\nBSON.BSON_BINARY_SUBTYPE_USER_DEFINED = 128; // Return BSON\n\nmodule.exports = BSON;\nmodule.exports.Code = Code;\nmodule.exports.Map = Map;\nmodule.exports.Symbol = Symbol;\nmodule.exports.BSON = BSON;\nmodule.exports.DBRef = DBRef;\nmodule.exports.Binary = Binary;\nmodule.exports.ObjectID = ObjectID;\nmodule.exports.Long = Long;\nmodule.exports.Timestamp = Timestamp;\nmodule.exports.Double = Double;\nmodule.exports.Int32 = Int32;\nmodule.exports.MinKey = MinKey;\nmodule.exports.MaxKey = MaxKey;\nmodule.exports.BSONRegExp = BSONRegExp;\nmodule.exports.Decimal128 = Decimal128;","map":{"version":3,"sources":["C:/Users/Tanja Aakerholt/Documents/GitHub/portfolio2/client/node_modules/bson/lib/bson/bson.js"],"names":["Map","require","Long","Double","Timestamp","ObjectID","BSONRegExp","Symbol","Int32","Code","Decimal128","MinKey","MaxKey","DBRef","Binary","deserialize","serializer","calculateObjectSize","utils","MAXSIZE","buffer","allocBuffer","BSON","prototype","serialize","object","options","checkKeys","serializeFunctions","ignoreUndefined","minInternalBufferSize","length","serializationIndex","finishedBuffer","copy","serializeWithBufferAndIndex","finalBuffer","startIndex","index","deserializeStream","data","numberOfDocuments","documents","docStartIndex","i","size","BSON_INT32_MAX","BSON_INT32_MIN","BSON_INT64_MAX","Math","pow","BSON_INT64_MIN","JS_INT_MAX","JS_INT_MIN","BSON_DATA_NUMBER","BSON_DATA_STRING","BSON_DATA_OBJECT","BSON_DATA_ARRAY","BSON_DATA_BINARY","BSON_DATA_OID","BSON_DATA_BOOLEAN","BSON_DATA_DATE","BSON_DATA_NULL","BSON_DATA_REGEXP","BSON_DATA_CODE","BSON_DATA_SYMBOL","BSON_DATA_CODE_W_SCOPE","BSON_DATA_INT","BSON_DATA_TIMESTAMP","BSON_DATA_LONG","BSON_DATA_MIN_KEY","BSON_DATA_MAX_KEY","BSON_BINARY_SUBTYPE_DEFAULT","BSON_BINARY_SUBTYPE_FUNCTION","BSON_BINARY_SUBTYPE_BYTE_ARRAY","BSON_BINARY_SUBTYPE_UUID","BSON_BINARY_SUBTYPE_MD5","BSON_BINARY_SUBTYPE_USER_DEFINED","module","exports"],"mappings":"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,CAAxB;AACA;AACA;AACA;AACA;AACA;;AACAjC,IAAI,CAACkC,gBAAL,GAAwB,CAAxB;AACA;AACA;AACA;AACA;AACA;;AACAlC,IAAI,CAACmC,eAAL,GAAuB,CAAvB;AACA;AACA;AACA;AACA;AACA;;AACAnC,IAAI,CAACoC,gBAAL,GAAwB,CAAxB;AACA;AACA;AACA;AACA;AACA;;AACApC,IAAI,CAACqC,aAAL,GAAqB,CAArB;AACA;AACA;AACA;AACA;AACA;;AACArC,IAAI,CAACsC,iBAAL,GAAyB,CAAzB;AACA;AACA;AACA;AACA;AACA;;AACAtC,IAAI,CAACuC,cAAL,GAAsB,CAAtB;AACA;AACA;AACA;AACA;AACA;;AACAvC,IAAI,CAACwC,cAAL,GAAsB,EAAtB;AACA;AACA;AACA;AACA;AACA;;AACAxC,IAAI,CAACyC,gBAAL,GAAwB,EAAxB;AACA;AACA;AACA;AACA;AACA;;AACAzC,IAAI,CAAC0C,cAAL,GAAsB,EAAtB;AACA;AACA;AACA;AACA;AACA;;AACA1C,IAAI,CAAC2C,gBAAL,GAAwB,EAAxB;AACA;AACA;AACA;AACA;AACA;;AACA3C,IAAI,CAAC4C,sBAAL,GAA8B,EAA9B;AACA;AACA;AACA;AACA;AACA;;AACA5C,IAAI,CAAC6C,aAAL,GAAqB,EAArB;AACA;AACA;AACA;AACA;AACA;;AACA7C,IAAI,CAAC8C,mBAAL,GAA2B,EAA3B;AACA;AACA;AACA;AACA;AACA;;AACA9C,IAAI,CAAC+C,cAAL,GAAsB,EAAtB;AACA;AACA;AACA;AACA;AACA;;AACA/C,IAAI,CAACgD,iBAAL,GAAyB,IAAzB;AACA;AACA;AACA;AACA;AACA;;AACAhD,IAAI,CAACiD,iBAAL,GAAyB,IAAzB;AAEA;AACA;AACA;AACA;AACA;;AACAjD,IAAI,CAACkD,2BAAL,GAAmC,CAAnC;AACA;AACA;AACA;AACA;AACA;;AACAlD,IAAI,CAACmD,4BAAL,GAAoC,CAApC;AACA;AACA;AACA;AACA;AACA;;AACAnD,IAAI,CAACoD,8BAAL,GAAsC,CAAtC;AACA;AACA;AACA;AACA;AACA;;AACApD,IAAI,CAACqD,wBAAL,GAAgC,CAAhC;AACA;AACA;AACA;AACA;AACA;;AACArD,IAAI,CAACsD,uBAAL,GAA+B,CAA/B;AACA;AACA;AACA;AACA;AACA;;AACAtD,IAAI,CAACuD,gCAAL,GAAwC,GAAxC,C,CAEA;;AACAC,MAAM,CAACC,OAAP,GAAiBzD,IAAjB;AACAwD,MAAM,CAACC,OAAP,CAAetE,IAAf,GAAsBA,IAAtB;AACAqE,MAAM,CAACC,OAAP,CAAe/E,GAAf,GAAqBA,GAArB;AACA8E,MAAM,CAACC,OAAP,CAAexE,MAAf,GAAwBA,MAAxB;AACAuE,MAAM,CAACC,OAAP,CAAezD,IAAf,GAAsBA,IAAtB;AACAwD,MAAM,CAACC,OAAP,CAAelE,KAAf,GAAuBA,KAAvB;AACAiE,MAAM,CAACC,OAAP,CAAejE,MAAf,GAAwBA,MAAxB;AACAgE,MAAM,CAACC,OAAP,CAAe1E,QAAf,GAA0BA,QAA1B;AACAyE,MAAM,CAACC,OAAP,CAAe7E,IAAf,GAAsBA,IAAtB;AACA4E,MAAM,CAACC,OAAP,CAAe3E,SAAf,GAA2BA,SAA3B;AACA0E,MAAM,CAACC,OAAP,CAAe5E,MAAf,GAAwBA,MAAxB;AACA2E,MAAM,CAACC,OAAP,CAAevE,KAAf,GAAuBA,KAAvB;AACAsE,MAAM,CAACC,OAAP,CAAepE,MAAf,GAAwBA,MAAxB;AACAmE,MAAM,CAACC,OAAP,CAAenE,MAAf,GAAwBA,MAAxB;AACAkE,MAAM,CAACC,OAAP,CAAezE,UAAf,GAA4BA,UAA5B;AACAwE,MAAM,CAACC,OAAP,CAAerE,UAAf,GAA4BA,UAA5B","sourcesContent":["'use strict';\r\n\r\nvar Map = require('./map'),\r\n  Long = require('./long'),\r\n  Double = require('./double'),\r\n  Timestamp = require('./timestamp'),\r\n  ObjectID = require('./objectid'),\r\n  BSONRegExp = require('./regexp'),\r\n  Symbol = require('./symbol'),\r\n  Int32 = require('./int_32'),\r\n  Code = require('./code'),\r\n  Decimal128 = require('./decimal128'),\r\n  MinKey = require('./min_key'),\r\n  MaxKey = require('./max_key'),\r\n  DBRef = require('./db_ref'),\r\n  Binary = require('./binary');\r\n\r\n// Parts of the parser\r\nvar deserialize = require('./parser/deserializer'),\r\n  serializer = require('./parser/serializer'),\r\n  calculateObjectSize = require('./parser/calculate_size'),\r\n  utils = require('./parser/utils');\r\n\r\n/**\r\n * @ignore\r\n * @api private\r\n */\r\n// Default Max Size\r\nvar MAXSIZE = 1024 * 1024 * 17;\r\n\r\n// Current Internal Temporary Serialization Buffer\r\nvar buffer = utils.allocBuffer(MAXSIZE);\r\n\r\nvar BSON = function() {};\r\n\r\n/**\r\n * Serialize a Javascript object.\r\n *\r\n * @param {Object} object the Javascript object to serialize.\r\n * @param {Boolean} [options.checkKeys] the serializer will check if keys are valid.\r\n * @param {Boolean} [options.serializeFunctions=false] serialize the javascript functions **(default:false)**.\r\n * @param {Boolean} [options.ignoreUndefined=true] ignore undefined fields **(default:true)**.\r\n * @param {Number} [options.minInternalBufferSize=1024*1024*17] minimum size of the internal temporary serialization buffer **(default:1024*1024*17)**.\r\n * @return {Buffer} returns the Buffer object containing the serialized object.\r\n * @api public\r\n */\r\nBSON.prototype.serialize = function serialize(object, options) {\r\n  options = options || {};\r\n  // Unpack the options\r\n  var checkKeys = typeof options.checkKeys === 'boolean' ? options.checkKeys : false;\r\n  var serializeFunctions =\r\n    typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\r\n  var ignoreUndefined =\r\n    typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : true;\r\n  var minInternalBufferSize =\r\n    typeof options.minInternalBufferSize === 'number' ? options.minInternalBufferSize : MAXSIZE;\r\n  \r\n  // Resize the internal serialization buffer if needed\r\n  if (buffer.length < minInternalBufferSize) {\r\n    buffer = utils.allocBuffer(minInternalBufferSize);\r\n  }\r\n\r\n  // Attempt to serialize\r\n  var serializationIndex = serializer(\r\n    buffer,\r\n    object,\r\n    checkKeys,\r\n    0,\r\n    0,\r\n    serializeFunctions,\r\n    ignoreUndefined,\r\n    []\r\n  );\r\n  // Create the final buffer\r\n  var finishedBuffer = utils.allocBuffer(serializationIndex);\r\n  // Copy into the finished buffer\r\n  buffer.copy(finishedBuffer, 0, 0, finishedBuffer.length);\r\n  // Return the buffer\r\n  return finishedBuffer;\r\n};\r\n\r\n/**\r\n * Serialize a Javascript object using a predefined Buffer and index into the buffer, useful when pre-allocating the space for serialization.\r\n *\r\n * @param {Object} object the Javascript object to serialize.\r\n * @param {Buffer} buffer the Buffer you pre-allocated to store the serialized BSON object.\r\n * @param {Boolean} [options.checkKeys] the serializer will check if keys are valid.\r\n * @param {Boolean} [options.serializeFunctions=false] serialize the javascript functions **(default:false)**.\r\n * @param {Boolean} [options.ignoreUndefined=true] ignore undefined fields **(default:true)**.\r\n * @param {Number} [options.index] the index in the buffer where we wish to start serializing into.\r\n * @return {Number} returns the index pointing to the last written byte in the buffer.\r\n * @api public\r\n */\r\nBSON.prototype.serializeWithBufferAndIndex = function(object, finalBuffer, options) {\r\n  options = options || {};\r\n  // Unpack the options\r\n  var checkKeys = typeof options.checkKeys === 'boolean' ? options.checkKeys : false;\r\n  var serializeFunctions =\r\n    typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\r\n  var ignoreUndefined =\r\n    typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : true;\r\n  var startIndex = typeof options.index === 'number' ? options.index : 0;\r\n\r\n  // Attempt to serialize\r\n  var serializationIndex = serializer(\r\n    finalBuffer,\r\n    object,\r\n    checkKeys,\r\n    startIndex || 0,\r\n    0,\r\n    serializeFunctions,\r\n    ignoreUndefined\r\n  );\r\n\r\n  // Return the index\r\n  return serializationIndex - 1;\r\n};\r\n\r\n/**\r\n * Deserialize data as BSON.\r\n *\r\n * @param {Buffer} buffer the buffer containing the serialized set of BSON documents.\r\n * @param {Object} [options.evalFunctions=false] evaluate functions in the BSON document scoped to the object deserialized.\r\n * @param {Object} [options.cacheFunctions=false] cache evaluated functions for reuse.\r\n * @param {Object} [options.cacheFunctionsCrc32=false] use a crc32 code for caching, otherwise use the string of the function.\r\n * @param {Object} [options.promoteLongs=true] when deserializing a Long will fit it into a Number if it's smaller than 53 bits\r\n * @param {Object} [options.promoteBuffers=false] when deserializing a Binary will return it as a node.js Buffer instance.\r\n * @param {Object} [options.promoteValues=false] when deserializing will promote BSON values to their Node.js closest equivalent types.\r\n * @param {Object} [options.fieldsAsRaw=null] allow to specify if there what fields we wish to return as unserialized raw buffer.\r\n * @param {Object} [options.bsonRegExp=false] return BSON regular expressions as BSONRegExp instances.\r\n * @return {Object} returns the deserialized Javascript Object.\r\n * @api public\r\n */\r\nBSON.prototype.deserialize = function(buffer, options) {\r\n  return deserialize(buffer, options);\r\n};\r\n\r\n/**\r\n * Calculate the bson size for a passed in Javascript object.\r\n *\r\n * @param {Object} object the Javascript object to calculate the BSON byte size for.\r\n * @param {Boolean} [options.serializeFunctions=false] serialize the javascript functions **(default:false)**.\r\n * @param {Boolean} [options.ignoreUndefined=true] ignore undefined fields **(default:true)**.\r\n * @return {Number} returns the number of bytes the BSON object will take up.\r\n * @api public\r\n */\r\nBSON.prototype.calculateObjectSize = function(object, options) {\r\n  options = options || {};\r\n\r\n  var serializeFunctions =\r\n    typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\r\n  var ignoreUndefined =\r\n    typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : true;\r\n\r\n  return calculateObjectSize(object, serializeFunctions, ignoreUndefined);\r\n};\r\n\r\n/**\r\n * Deserialize stream data as BSON documents.\r\n *\r\n * @param {Buffer} data the buffer containing the serialized set of BSON documents.\r\n * @param {Number} startIndex the start index in the data Buffer where the deserialization is to start.\r\n * @param {Number} numberOfDocuments number of documents to deserialize.\r\n * @param {Array} documents an array where to store the deserialized documents.\r\n * @param {Number} docStartIndex the index in the documents array from where to start inserting documents.\r\n * @param {Object} [options] additional options used for the deserialization.\r\n * @param {Object} [options.evalFunctions=false] evaluate functions in the BSON document scoped to the object deserialized.\r\n * @param {Object} [options.cacheFunctions=false] cache evaluated functions for reuse.\r\n * @param {Object} [options.cacheFunctionsCrc32=false] use a crc32 code for caching, otherwise use the string of the function.\r\n * @param {Object} [options.promoteLongs=true] when deserializing a Long will fit it into a Number if it's smaller than 53 bits\r\n * @param {Object} [options.promoteBuffers=false] when deserializing a Binary will return it as a node.js Buffer instance.\r\n * @param {Object} [options.promoteValues=false] when deserializing will promote BSON values to their Node.js closest equivalent types.\r\n * @param {Object} [options.fieldsAsRaw=null] allow to specify if there what fields we wish to return as unserialized raw buffer.\r\n * @param {Object} [options.bsonRegExp=false] return BSON regular expressions as BSONRegExp instances.\r\n * @return {Number} returns the next index in the buffer after deserialization **x** numbers of documents.\r\n * @api public\r\n */\r\nBSON.prototype.deserializeStream = function(\r\n  data,\r\n  startIndex,\r\n  numberOfDocuments,\r\n  documents,\r\n  docStartIndex,\r\n  options\r\n) {\r\n  options = options != null ? options : {};\r\n  var index = startIndex;\r\n  // Loop over all documents\r\n  for (var i = 0; i < numberOfDocuments; i++) {\r\n    // Find size of the document\r\n    var size =\r\n      data[index] | (data[index + 1] << 8) | (data[index + 2] << 16) | (data[index + 3] << 24);\r\n    // Update options with index\r\n    options['index'] = index;\r\n    // Parse the document at this point\r\n    documents[docStartIndex + i] = this.deserialize(data, options);\r\n    // Adjust index by the document size\r\n    index = index + size;\r\n  }\r\n\r\n  // Return object containing end index of parsing and list of documents\r\n  return index;\r\n};\r\n\r\n/**\r\n * @ignore\r\n * @api private\r\n */\r\n// BSON MAX VALUES\r\nBSON.BSON_INT32_MAX = 0x7fffffff;\r\nBSON.BSON_INT32_MIN = -0x80000000;\r\n\r\nBSON.BSON_INT64_MAX = Math.pow(2, 63) - 1;\r\nBSON.BSON_INT64_MIN = -Math.pow(2, 63);\r\n\r\n// JS MAX PRECISE VALUES\r\nBSON.JS_INT_MAX = 0x20000000000000; // Any integer up to 2^53 can be precisely represented by a double.\r\nBSON.JS_INT_MIN = -0x20000000000000; // Any integer down to -2^53 can be precisely represented by a double.\r\n\r\n// Internal long versions\r\n// var JS_INT_MAX_LONG = Long.fromNumber(0x20000000000000); // Any integer up to 2^53 can be precisely represented by a double.\r\n// var JS_INT_MIN_LONG = Long.fromNumber(-0x20000000000000); // Any integer down to -2^53 can be precisely represented by a double.\r\n\r\n/**\r\n * Number BSON Type\r\n *\r\n * @classconstant BSON_DATA_NUMBER\r\n **/\r\nBSON.BSON_DATA_NUMBER = 1;\r\n/**\r\n * String BSON Type\r\n *\r\n * @classconstant BSON_DATA_STRING\r\n **/\r\nBSON.BSON_DATA_STRING = 2;\r\n/**\r\n * Object BSON Type\r\n *\r\n * @classconstant BSON_DATA_OBJECT\r\n **/\r\nBSON.BSON_DATA_OBJECT = 3;\r\n/**\r\n * Array BSON Type\r\n *\r\n * @classconstant BSON_DATA_ARRAY\r\n **/\r\nBSON.BSON_DATA_ARRAY = 4;\r\n/**\r\n * Binary BSON Type\r\n *\r\n * @classconstant BSON_DATA_BINARY\r\n **/\r\nBSON.BSON_DATA_BINARY = 5;\r\n/**\r\n * ObjectID BSON Type\r\n *\r\n * @classconstant BSON_DATA_OID\r\n **/\r\nBSON.BSON_DATA_OID = 7;\r\n/**\r\n * Boolean BSON Type\r\n *\r\n * @classconstant BSON_DATA_BOOLEAN\r\n **/\r\nBSON.BSON_DATA_BOOLEAN = 8;\r\n/**\r\n * Date BSON Type\r\n *\r\n * @classconstant BSON_DATA_DATE\r\n **/\r\nBSON.BSON_DATA_DATE = 9;\r\n/**\r\n * null BSON Type\r\n *\r\n * @classconstant BSON_DATA_NULL\r\n **/\r\nBSON.BSON_DATA_NULL = 10;\r\n/**\r\n * RegExp BSON Type\r\n *\r\n * @classconstant BSON_DATA_REGEXP\r\n **/\r\nBSON.BSON_DATA_REGEXP = 11;\r\n/**\r\n * Code BSON Type\r\n *\r\n * @classconstant BSON_DATA_CODE\r\n **/\r\nBSON.BSON_DATA_CODE = 13;\r\n/**\r\n * Symbol BSON Type\r\n *\r\n * @classconstant BSON_DATA_SYMBOL\r\n **/\r\nBSON.BSON_DATA_SYMBOL = 14;\r\n/**\r\n * Code with Scope BSON Type\r\n *\r\n * @classconstant BSON_DATA_CODE_W_SCOPE\r\n **/\r\nBSON.BSON_DATA_CODE_W_SCOPE = 15;\r\n/**\r\n * 32 bit Integer BSON Type\r\n *\r\n * @classconstant BSON_DATA_INT\r\n **/\r\nBSON.BSON_DATA_INT = 16;\r\n/**\r\n * Timestamp BSON Type\r\n *\r\n * @classconstant BSON_DATA_TIMESTAMP\r\n **/\r\nBSON.BSON_DATA_TIMESTAMP = 17;\r\n/**\r\n * Long BSON Type\r\n *\r\n * @classconstant BSON_DATA_LONG\r\n **/\r\nBSON.BSON_DATA_LONG = 18;\r\n/**\r\n * MinKey BSON Type\r\n *\r\n * @classconstant BSON_DATA_MIN_KEY\r\n **/\r\nBSON.BSON_DATA_MIN_KEY = 0xff;\r\n/**\r\n * MaxKey BSON Type\r\n *\r\n * @classconstant BSON_DATA_MAX_KEY\r\n **/\r\nBSON.BSON_DATA_MAX_KEY = 0x7f;\r\n\r\n/**\r\n * Binary Default Type\r\n *\r\n * @classconstant BSON_BINARY_SUBTYPE_DEFAULT\r\n **/\r\nBSON.BSON_BINARY_SUBTYPE_DEFAULT = 0;\r\n/**\r\n * Binary Function Type\r\n *\r\n * @classconstant BSON_BINARY_SUBTYPE_FUNCTION\r\n **/\r\nBSON.BSON_BINARY_SUBTYPE_FUNCTION = 1;\r\n/**\r\n * Binary Byte Array Type\r\n *\r\n * @classconstant BSON_BINARY_SUBTYPE_BYTE_ARRAY\r\n **/\r\nBSON.BSON_BINARY_SUBTYPE_BYTE_ARRAY = 2;\r\n/**\r\n * Binary UUID Type\r\n *\r\n * @classconstant BSON_BINARY_SUBTYPE_UUID\r\n **/\r\nBSON.BSON_BINARY_SUBTYPE_UUID = 3;\r\n/**\r\n * Binary MD5 Type\r\n *\r\n * @classconstant BSON_BINARY_SUBTYPE_MD5\r\n **/\r\nBSON.BSON_BINARY_SUBTYPE_MD5 = 4;\r\n/**\r\n * Binary User Defined Type\r\n *\r\n * @classconstant BSON_BINARY_SUBTYPE_USER_DEFINED\r\n **/\r\nBSON.BSON_BINARY_SUBTYPE_USER_DEFINED = 128;\r\n\r\n// Return BSON\r\nmodule.exports = BSON;\r\nmodule.exports.Code = Code;\r\nmodule.exports.Map = Map;\r\nmodule.exports.Symbol = Symbol;\r\nmodule.exports.BSON = BSON;\r\nmodule.exports.DBRef = DBRef;\r\nmodule.exports.Binary = Binary;\r\nmodule.exports.ObjectID = ObjectID;\r\nmodule.exports.Long = Long;\r\nmodule.exports.Timestamp = Timestamp;\r\nmodule.exports.Double = Double;\r\nmodule.exports.Int32 = Int32;\r\nmodule.exports.MinKey = MinKey;\r\nmodule.exports.MaxKey = MaxKey;\r\nmodule.exports.BSONRegExp = BSONRegExp;\r\nmodule.exports.Decimal128 = Decimal128;\r\n"]},"metadata":{},"sourceType":"script"}