{"ast":null,"code":"'use strict';\n\nconst {\n  unassigned_code_points,\n  commonly_mapped_to_nothing,\n  non_ASCII_space_characters,\n  prohibited_characters,\n  bidirectional_r_al,\n  bidirectional_l\n} = require('./lib/memory-code-points');\n\nmodule.exports = saslprep; // 2.1.  Mapping\n\n/**\r\n * non-ASCII space characters [StringPrep, C.1.2] that can be\r\n * mapped to SPACE (U+0020)\r\n */\n\nconst mapping2space = non_ASCII_space_characters;\n/**\r\n * the \"commonly mapped to nothing\" characters [StringPrep, B.1]\r\n * that can be mapped to nothing.\r\n */\n\nconst mapping2nothing = commonly_mapped_to_nothing; // utils\n\nconst getCodePoint = character => character.codePointAt(0);\n\nconst first = x => x[0];\n\nconst last = x => x[x.length - 1];\n/**\r\n * Convert provided string into an array of Unicode Code Points.\r\n * Based on https://stackoverflow.com/a/21409165/1556249\r\n * and https://www.npmjs.com/package/code-point-at.\r\n * @param {string} input\r\n * @returns {number[]}\r\n */\n\n\nfunction toCodePoints(input) {\n  const codepoints = [];\n  const size = input.length;\n\n  for (let i = 0; i < size; i += 1) {\n    const before = input.charCodeAt(i);\n\n    if (before >= 0xd800 && before <= 0xdbff && size > i + 1) {\n      const next = input.charCodeAt(i + 1);\n\n      if (next >= 0xdc00 && next <= 0xdfff) {\n        codepoints.push((before - 0xd800) * 0x400 + next - 0xdc00 + 0x10000);\n        i += 1;\n        continue;\n      }\n    }\n\n    codepoints.push(before);\n  }\n\n  return codepoints;\n}\n/**\r\n * SASLprep.\r\n * @param {string} input\r\n * @param {Object} opts\r\n * @param {boolean} opts.allowUnassigned\r\n * @returns {string}\r\n */\n\n\nfunction saslprep(input, opts = {}) {\n  if (typeof input !== 'string') {\n    throw new TypeError('Expected string.');\n  }\n\n  if (input.length === 0) {\n    return '';\n  } // 1. Map\n\n\n  const mapped_input = toCodePoints(input) // 1.1 mapping to space\n  .map(character => mapping2space.get(character) ? 0x20 : character) // 1.2 mapping to nothing\n  .filter(character => !mapping2nothing.get(character)); // 2. Normalize\n\n  const normalized_input = String.fromCodePoint.apply(null, mapped_input).normalize('NFKC');\n  const normalized_map = toCodePoints(normalized_input); // 3. Prohibit\n\n  const hasProhibited = normalized_map.some(character => prohibited_characters.get(character));\n\n  if (hasProhibited) {\n    throw new Error('Prohibited character, see https://tools.ietf.org/html/rfc4013#section-2.3');\n  } // Unassigned Code Points\n\n\n  if (opts.allowUnassigned !== true) {\n    const hasUnassigned = normalized_map.some(character => unassigned_code_points.get(character));\n\n    if (hasUnassigned) {\n      throw new Error('Unassigned code point, see https://tools.ietf.org/html/rfc4013#section-2.5');\n    }\n  } // 4. check bidi\n\n\n  const hasBidiRAL = normalized_map.some(character => bidirectional_r_al.get(character));\n  const hasBidiL = normalized_map.some(character => bidirectional_l.get(character)); // 4.1 If a string contains any RandALCat character, the string MUST NOT\n  // contain any LCat character.\n\n  if (hasBidiRAL && hasBidiL) {\n    throw new Error('String must not contain RandALCat and LCat at the same time,' + ' see https://tools.ietf.org/html/rfc3454#section-6');\n  }\n  /**\r\n   * 4.2 If a string contains any RandALCat character, a RandALCat\r\n   * character MUST be the first character of the string, and a\r\n   * RandALCat character MUST be the last character of the string.\r\n   */\n\n\n  const isFirstBidiRAL = bidirectional_r_al.get(getCodePoint(first(normalized_input)));\n  const isLastBidiRAL = bidirectional_r_al.get(getCodePoint(last(normalized_input)));\n\n  if (hasBidiRAL && !(isFirstBidiRAL && isLastBidiRAL)) {\n    throw new Error('Bidirectional RandALCat character must be the first and the last' + ' character of the string, see https://tools.ietf.org/html/rfc3454#section-6');\n  }\n\n  return normalized_input;\n}","map":{"version":3,"sources":["C:/Users/Tanja Aakerholt/Documents/GitHub/portfolio2/client/node_modules/saslprep/index.js"],"names":["unassigned_code_points","commonly_mapped_to_nothing","non_ASCII_space_characters","prohibited_characters","bidirectional_r_al","bidirectional_l","require","module","exports","saslprep","mapping2space","mapping2nothing","getCodePoint","character","codePointAt","first","x","last","length","toCodePoints","input","codepoints","size","i","before","charCodeAt","next","push","opts","TypeError","mapped_input","map","get","filter","normalized_input","String","fromCodePoint","apply","normalize","normalized_map","hasProhibited","some","Error","allowUnassigned","hasUnassigned","hasBidiRAL","hasBidiL","isFirstBidiRAL","isLastBidiRAL"],"mappings":"AAAA;;AAEA,MAAM;AACJA,EAAAA,sBADI;AAEJC,EAAAA,0BAFI;AAGJC,EAAAA,0BAHI;AAIJC,EAAAA,qBAJI;AAKJC,EAAAA,kBALI;AAMJC,EAAAA;AANI,IAOFC,OAAO,CAAC,0BAAD,CAPX;;AASAC,MAAM,CAACC,OAAP,GAAiBC,QAAjB,C,CAEA;;AAEA;AACA;AACA;AACA;;AACA,MAAMC,aAAa,GAAGR,0BAAtB;AAEA;AACA;AACA;AACA;;AACA,MAAMS,eAAe,GAAGV,0BAAxB,C,CAEA;;AACA,MAAMW,YAAY,GAAGC,SAAS,IAAIA,SAAS,CAACC,WAAV,CAAsB,CAAtB,CAAlC;;AACA,MAAMC,KAAK,GAAGC,CAAC,IAAIA,CAAC,CAAC,CAAD,CAApB;;AACA,MAAMC,IAAI,GAAGD,CAAC,IAAIA,CAAC,CAACA,CAAC,CAACE,MAAF,GAAW,CAAZ,CAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC3B,QAAMC,UAAU,GAAG,EAAnB;AACA,QAAMC,IAAI,GAAGF,KAAK,CAACF,MAAnB;;AAEA,OAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,IAApB,EAA0BC,CAAC,IAAI,CAA/B,EAAkC;AAChC,UAAMC,MAAM,GAAGJ,KAAK,CAACK,UAAN,CAAiBF,CAAjB,CAAf;;AAEA,QAAIC,MAAM,IAAI,MAAV,IAAoBA,MAAM,IAAI,MAA9B,IAAwCF,IAAI,GAAGC,CAAC,GAAG,CAAvD,EAA0D;AACxD,YAAMG,IAAI,GAAGN,KAAK,CAACK,UAAN,CAAiBF,CAAC,GAAG,CAArB,CAAb;;AAEA,UAAIG,IAAI,IAAI,MAAR,IAAkBA,IAAI,IAAI,MAA9B,EAAsC;AACpCL,QAAAA,UAAU,CAACM,IAAX,CAAgB,CAACH,MAAM,GAAG,MAAV,IAAoB,KAApB,GAA4BE,IAA5B,GAAmC,MAAnC,GAA4C,OAA5D;AACAH,QAAAA,CAAC,IAAI,CAAL;AACA;AACD;AACF;;AAEDF,IAAAA,UAAU,CAACM,IAAX,CAAgBH,MAAhB;AACD;;AAED,SAAOH,UAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASZ,QAAT,CAAkBW,KAAlB,EAAyBQ,IAAI,GAAG,EAAhC,EAAoC;AAClC,MAAI,OAAOR,KAAP,KAAiB,QAArB,EAA+B;AAC7B,UAAM,IAAIS,SAAJ,CAAc,kBAAd,CAAN;AACD;;AAED,MAAIT,KAAK,CAACF,MAAN,KAAiB,CAArB,EAAwB;AACtB,WAAO,EAAP;AACD,GAPiC,CASlC;;;AACA,QAAMY,YAAY,GAAGX,YAAY,CAACC,KAAD,CAAZ,CACnB;AADmB,GAElBW,GAFkB,CAEdlB,SAAS,IAAKH,aAAa,CAACsB,GAAd,CAAkBnB,SAAlB,IAA+B,IAA/B,GAAsCA,SAFtC,EAGnB;AAHmB,GAIlBoB,MAJkB,CAIXpB,SAAS,IAAI,CAACF,eAAe,CAACqB,GAAhB,CAAoBnB,SAApB,CAJH,CAArB,CAVkC,CAgBlC;;AACA,QAAMqB,gBAAgB,GAAGC,MAAM,CAACC,aAAP,CACtBC,KADsB,CAChB,IADgB,EACVP,YADU,EAEtBQ,SAFsB,CAEZ,MAFY,CAAzB;AAIA,QAAMC,cAAc,GAAGpB,YAAY,CAACe,gBAAD,CAAnC,CArBkC,CAuBlC;;AACA,QAAMM,aAAa,GAAGD,cAAc,CAACE,IAAf,CAAoB5B,SAAS,IACjDV,qBAAqB,CAAC6B,GAAtB,CAA0BnB,SAA1B,CADoB,CAAtB;;AAIA,MAAI2B,aAAJ,EAAmB;AACjB,UAAM,IAAIE,KAAJ,CACJ,2EADI,CAAN;AAGD,GAhCiC,CAkClC;;;AACA,MAAId,IAAI,CAACe,eAAL,KAAyB,IAA7B,EAAmC;AACjC,UAAMC,aAAa,GAAGL,cAAc,CAACE,IAAf,CAAoB5B,SAAS,IACjDb,sBAAsB,CAACgC,GAAvB,CAA2BnB,SAA3B,CADoB,CAAtB;;AAIA,QAAI+B,aAAJ,EAAmB;AACjB,YAAM,IAAIF,KAAJ,CACJ,4EADI,CAAN;AAGD;AACF,GA7CiC,CA+ClC;;;AAEA,QAAMG,UAAU,GAAGN,cAAc,CAACE,IAAf,CAAoB5B,SAAS,IAC9CT,kBAAkB,CAAC4B,GAAnB,CAAuBnB,SAAvB,CADiB,CAAnB;AAIA,QAAMiC,QAAQ,GAAGP,cAAc,CAACE,IAAf,CAAoB5B,SAAS,IAC5CR,eAAe,CAAC2B,GAAhB,CAAoBnB,SAApB,CADe,CAAjB,CArDkC,CAyDlC;AACA;;AACA,MAAIgC,UAAU,IAAIC,QAAlB,EAA4B;AAC1B,UAAM,IAAIJ,KAAJ,CACJ,iEACE,oDAFE,CAAN;AAID;AAED;AACF;AACA;AACA;AACA;;;AAEE,QAAMK,cAAc,GAAG3C,kBAAkB,CAAC4B,GAAnB,CACrBpB,YAAY,CAACG,KAAK,CAACmB,gBAAD,CAAN,CADS,CAAvB;AAGA,QAAMc,aAAa,GAAG5C,kBAAkB,CAAC4B,GAAnB,CACpBpB,YAAY,CAACK,IAAI,CAACiB,gBAAD,CAAL,CADQ,CAAtB;;AAIA,MAAIW,UAAU,IAAI,EAAEE,cAAc,IAAIC,aAApB,CAAlB,EAAsD;AACpD,UAAM,IAAIN,KAAJ,CACJ,qEACE,6EAFE,CAAN;AAID;;AAED,SAAOR,gBAAP;AACD","sourcesContent":["'use strict';\r\n\r\nconst {\r\n  unassigned_code_points,\r\n  commonly_mapped_to_nothing,\r\n  non_ASCII_space_characters,\r\n  prohibited_characters,\r\n  bidirectional_r_al,\r\n  bidirectional_l,\r\n} = require('./lib/memory-code-points');\r\n\r\nmodule.exports = saslprep;\r\n\r\n// 2.1.  Mapping\r\n\r\n/**\r\n * non-ASCII space characters [StringPrep, C.1.2] that can be\r\n * mapped to SPACE (U+0020)\r\n */\r\nconst mapping2space = non_ASCII_space_characters;\r\n\r\n/**\r\n * the \"commonly mapped to nothing\" characters [StringPrep, B.1]\r\n * that can be mapped to nothing.\r\n */\r\nconst mapping2nothing = commonly_mapped_to_nothing;\r\n\r\n// utils\r\nconst getCodePoint = character => character.codePointAt(0);\r\nconst first = x => x[0];\r\nconst last = x => x[x.length - 1];\r\n\r\n/**\r\n * Convert provided string into an array of Unicode Code Points.\r\n * Based on https://stackoverflow.com/a/21409165/1556249\r\n * and https://www.npmjs.com/package/code-point-at.\r\n * @param {string} input\r\n * @returns {number[]}\r\n */\r\nfunction toCodePoints(input) {\r\n  const codepoints = [];\r\n  const size = input.length;\r\n\r\n  for (let i = 0; i < size; i += 1) {\r\n    const before = input.charCodeAt(i);\r\n\r\n    if (before >= 0xd800 && before <= 0xdbff && size > i + 1) {\r\n      const next = input.charCodeAt(i + 1);\r\n\r\n      if (next >= 0xdc00 && next <= 0xdfff) {\r\n        codepoints.push((before - 0xd800) * 0x400 + next - 0xdc00 + 0x10000);\r\n        i += 1;\r\n        continue;\r\n      }\r\n    }\r\n\r\n    codepoints.push(before);\r\n  }\r\n\r\n  return codepoints;\r\n}\r\n\r\n/**\r\n * SASLprep.\r\n * @param {string} input\r\n * @param {Object} opts\r\n * @param {boolean} opts.allowUnassigned\r\n * @returns {string}\r\n */\r\nfunction saslprep(input, opts = {}) {\r\n  if (typeof input !== 'string') {\r\n    throw new TypeError('Expected string.');\r\n  }\r\n\r\n  if (input.length === 0) {\r\n    return '';\r\n  }\r\n\r\n  // 1. Map\r\n  const mapped_input = toCodePoints(input)\r\n    // 1.1 mapping to space\r\n    .map(character => (mapping2space.get(character) ? 0x20 : character))\r\n    // 1.2 mapping to nothing\r\n    .filter(character => !mapping2nothing.get(character));\r\n\r\n  // 2. Normalize\r\n  const normalized_input = String.fromCodePoint\r\n    .apply(null, mapped_input)\r\n    .normalize('NFKC');\r\n\r\n  const normalized_map = toCodePoints(normalized_input);\r\n\r\n  // 3. Prohibit\r\n  const hasProhibited = normalized_map.some(character =>\r\n    prohibited_characters.get(character)\r\n  );\r\n\r\n  if (hasProhibited) {\r\n    throw new Error(\r\n      'Prohibited character, see https://tools.ietf.org/html/rfc4013#section-2.3'\r\n    );\r\n  }\r\n\r\n  // Unassigned Code Points\r\n  if (opts.allowUnassigned !== true) {\r\n    const hasUnassigned = normalized_map.some(character =>\r\n      unassigned_code_points.get(character)\r\n    );\r\n\r\n    if (hasUnassigned) {\r\n      throw new Error(\r\n        'Unassigned code point, see https://tools.ietf.org/html/rfc4013#section-2.5'\r\n      );\r\n    }\r\n  }\r\n\r\n  // 4. check bidi\r\n\r\n  const hasBidiRAL = normalized_map.some(character =>\r\n    bidirectional_r_al.get(character)\r\n  );\r\n\r\n  const hasBidiL = normalized_map.some(character =>\r\n    bidirectional_l.get(character)\r\n  );\r\n\r\n  // 4.1 If a string contains any RandALCat character, the string MUST NOT\r\n  // contain any LCat character.\r\n  if (hasBidiRAL && hasBidiL) {\r\n    throw new Error(\r\n      'String must not contain RandALCat and LCat at the same time,' +\r\n        ' see https://tools.ietf.org/html/rfc3454#section-6'\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 4.2 If a string contains any RandALCat character, a RandALCat\r\n   * character MUST be the first character of the string, and a\r\n   * RandALCat character MUST be the last character of the string.\r\n   */\r\n\r\n  const isFirstBidiRAL = bidirectional_r_al.get(\r\n    getCodePoint(first(normalized_input))\r\n  );\r\n  const isLastBidiRAL = bidirectional_r_al.get(\r\n    getCodePoint(last(normalized_input))\r\n  );\r\n\r\n  if (hasBidiRAL && !(isFirstBidiRAL && isLastBidiRAL)) {\r\n    throw new Error(\r\n      'Bidirectional RandALCat character must be the first and the last' +\r\n        ' character of the string, see https://tools.ietf.org/html/rfc3454#section-6'\r\n    );\r\n  }\r\n\r\n  return normalized_input;\r\n}\r\n"]},"metadata":{},"sourceType":"script"}