{"ast":null,"code":"'use strict';\n\nconst retrieveBSON = require('./connection/utils').retrieveBSON;\n\nconst EventEmitter = require('events');\n\nconst BSON = retrieveBSON();\nconst Binary = BSON.Binary;\n\nconst uuidV4 = require('./utils').uuidV4;\n\nconst MongoError = require('./error').MongoError;\n\nconst isRetryableError = require('././error').isRetryableError;\n\nconst MongoNetworkError = require('./error').MongoNetworkError;\n\nconst MongoWriteConcernError = require('./error').MongoWriteConcernError;\n\nconst Transaction = require('./transactions').Transaction;\n\nconst TxnState = require('./transactions').TxnState;\n\nconst isPromiseLike = require('./utils').isPromiseLike;\n\nconst ReadPreference = require('./topologies/read_preference');\n\nconst maybePromise = require('../utils').maybePromise;\n\nconst isTransactionCommand = require('./transactions').isTransactionCommand;\n\nconst resolveClusterTime = require('./topologies/shared').resolveClusterTime;\n\nconst isSharded = require('./wireprotocol/shared').isSharded;\n\nconst maxWireVersion = require('./utils').maxWireVersion;\n\nconst now = require('./../utils').now;\n\nconst calculateDurationInMs = require('./../utils').calculateDurationInMs;\n\nconst minWireVersionForShardedTransactions = 8;\n\nfunction assertAlive(session, callback) {\n  if (session.serverSession == null) {\n    const error = new MongoError('Cannot use a session that has ended');\n\n    if (typeof callback === 'function') {\n      callback(error, null);\n      return false;\n    }\n\n    throw error;\n  }\n\n  return true;\n}\n/**\r\n * Options to pass when creating a Client Session\r\n * @typedef {Object} SessionOptions\r\n * @property {boolean} [causalConsistency=true] Whether causal consistency should be enabled on this session\r\n * @property {TransactionOptions} [defaultTransactionOptions] The default TransactionOptions to use for transactions started on this session.\r\n */\n\n/**\r\n * A BSON document reflecting the lsid of a {@link ClientSession}\r\n * @typedef {Object} SessionId\r\n */\n\n\nconst kServerSession = Symbol('serverSession');\n/**\r\n * A class representing a client session on the server\r\n * WARNING: not meant to be instantiated directly.\r\n * @class\r\n * @hideconstructor\r\n */\n\nclass ClientSession extends EventEmitter {\n  /**\r\n   * Create a client session.\r\n   * WARNING: not meant to be instantiated directly\r\n   *\r\n   * @param {Topology} topology The current client's topology (Internal Class)\r\n   * @param {ServerSessionPool} sessionPool The server session pool (Internal Class)\r\n   * @param {SessionOptions} [options] Optional settings\r\n   * @param {Object} [clientOptions] Optional settings provided when creating a client in the porcelain driver\r\n   */\n  constructor(topology, sessionPool, options, clientOptions) {\n    super();\n\n    if (topology == null) {\n      throw new Error('ClientSession requires a topology');\n    }\n\n    if (sessionPool == null || !(sessionPool instanceof ServerSessionPool)) {\n      throw new Error('ClientSession requires a ServerSessionPool');\n    }\n\n    options = options || {};\n    clientOptions = clientOptions || {};\n    this.topology = topology;\n    this.sessionPool = sessionPool;\n    this.hasEnded = false;\n    this.clientOptions = clientOptions;\n    this[kServerSession] = undefined;\n    this.supports = {\n      causalConsistency: typeof options.causalConsistency !== 'undefined' ? options.causalConsistency : true\n    };\n    this.clusterTime = options.initialClusterTime;\n    this.operationTime = null;\n    this.explicit = !!options.explicit;\n    this.owner = options.owner;\n    this.defaultTransactionOptions = Object.assign({}, options.defaultTransactionOptions);\n    this.transaction = new Transaction();\n  }\n  /**\r\n   * The server id associated with this session\r\n   * @type {SessionId}\r\n   */\n\n\n  get id() {\n    return this.serverSession.id;\n  }\n\n  get serverSession() {\n    if (this[kServerSession] == null) {\n      this[kServerSession] = this.sessionPool.acquire();\n    }\n\n    return this[kServerSession];\n  }\n  /**\r\n   * Ends this session on the server\r\n   *\r\n   * @param {Object} [options] Optional settings. Currently reserved for future use\r\n   * @param {Function} [callback] Optional callback for completion of this operation\r\n   */\n\n\n  endSession(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options || {};\n    const session = this;\n    return maybePromise(this, callback, done => {\n      if (session.hasEnded) {\n        return done();\n      }\n\n      function completeEndSession() {\n        // release the server session back to the pool\n        session.sessionPool.release(session.serverSession);\n        session[kServerSession] = undefined; // mark the session as ended, and emit a signal\n\n        session.hasEnded = true;\n        session.emit('ended', session); // spec indicates that we should ignore all errors for `endSessions`\n\n        done();\n      }\n\n      if (session.serverSession && session.inTransaction()) {\n        session.abortTransaction(err => {\n          if (err) return done(err);\n          completeEndSession();\n        });\n        return;\n      }\n\n      completeEndSession();\n    });\n  }\n  /**\r\n   * Advances the operationTime for a ClientSession.\r\n   *\r\n   * @param {Timestamp} operationTime the `BSON.Timestamp` of the operation type it is desired to advance to\r\n   */\n\n\n  advanceOperationTime(operationTime) {\n    if (this.operationTime == null) {\n      this.operationTime = operationTime;\n      return;\n    }\n\n    if (operationTime.greaterThan(this.operationTime)) {\n      this.operationTime = operationTime;\n    }\n  }\n  /**\r\n   * Used to determine if this session equals another\r\n   * @param {ClientSession} session\r\n   * @return {boolean} true if the sessions are equal\r\n   */\n\n\n  equals(session) {\n    if (!(session instanceof ClientSession)) {\n      return false;\n    }\n\n    return this.id.id.buffer.equals(session.id.id.buffer);\n  }\n  /**\r\n   * Increment the transaction number on the internal ServerSession\r\n   */\n\n\n  incrementTransactionNumber() {\n    this.serverSession.txnNumber++;\n  }\n  /**\r\n   * @returns {boolean} whether this session is currently in a transaction or not\r\n   */\n\n\n  inTransaction() {\n    return this.transaction.isActive;\n  }\n  /**\r\n   * Starts a new transaction with the given options.\r\n   *\r\n   * @param {TransactionOptions} options Options for the transaction\r\n   */\n\n\n  startTransaction(options) {\n    assertAlive(this);\n\n    if (this.inTransaction()) {\n      throw new MongoError('Transaction already in progress');\n    }\n\n    const topologyMaxWireVersion = maxWireVersion(this.topology);\n\n    if (isSharded(this.topology) && topologyMaxWireVersion != null && topologyMaxWireVersion < minWireVersionForShardedTransactions) {\n      throw new MongoError('Transactions are not supported on sharded clusters in MongoDB < 4.2.');\n    } // increment txnNumber\n\n\n    this.incrementTransactionNumber(); // create transaction state\n\n    this.transaction = new Transaction(Object.assign({}, this.clientOptions, options || this.defaultTransactionOptions));\n    this.transaction.transition(TxnState.STARTING_TRANSACTION);\n  }\n  /**\r\n   * Commits the currently active transaction in this session.\r\n   *\r\n   * @param {Function} [callback] optional callback for completion of this operation\r\n   * @return {Promise} A promise is returned if no callback is provided\r\n   */\n\n\n  commitTransaction(callback) {\n    return maybePromise(this, callback, done => endTransaction(this, 'commitTransaction', done));\n  }\n  /**\r\n   * Aborts the currently active transaction in this session.\r\n   *\r\n   * @param {Function} [callback] optional callback for completion of this operation\r\n   * @return {Promise} A promise is returned if no callback is provided\r\n   */\n\n\n  abortTransaction(callback) {\n    return maybePromise(this, callback, done => endTransaction(this, 'abortTransaction', done));\n  }\n  /**\r\n   * This is here to ensure that ClientSession is never serialized to BSON.\r\n   * @ignore\r\n   */\n\n\n  toBSON() {\n    throw new Error('ClientSession cannot be serialized to BSON.');\n  }\n  /**\r\n   * A user provided function to be run within a transaction\r\n   *\r\n   * @callback WithTransactionCallback\r\n   * @param {ClientSession} session The parent session of the transaction running the operation. This should be passed into each operation within the lambda.\r\n   * @returns {Promise} The resulting Promise of operations run within this transaction\r\n   */\n\n  /**\r\n   * Runs a provided lambda within a transaction, retrying either the commit operation\r\n   * or entire transaction as needed (and when the error permits) to better ensure that\r\n   * the transaction can complete successfully.\r\n   *\r\n   * IMPORTANT: This method requires the user to return a Promise, all lambdas that do not\r\n   * return a Promise will result in undefined behavior.\r\n   *\r\n   * @param {WithTransactionCallback} fn\r\n   * @param {TransactionOptions} [options] Optional settings for the transaction\r\n   */\n\n\n  withTransaction(fn, options) {\n    const startTime = now();\n    return attemptTransaction(this, startTime, fn, options);\n  }\n\n}\n\nconst MAX_WITH_TRANSACTION_TIMEOUT = 120000;\nconst UNSATISFIABLE_WRITE_CONCERN_CODE = 100;\nconst UNKNOWN_REPL_WRITE_CONCERN_CODE = 79;\nconst MAX_TIME_MS_EXPIRED_CODE = 50;\nconst NON_DETERMINISTIC_WRITE_CONCERN_ERRORS = new Set(['CannotSatisfyWriteConcern', 'UnknownReplWriteConcern', 'UnsatisfiableWriteConcern']);\n\nfunction hasNotTimedOut(startTime, max) {\n  return calculateDurationInMs(startTime) < max;\n}\n\nfunction isUnknownTransactionCommitResult(err) {\n  return isMaxTimeMSExpiredError(err) || !NON_DETERMINISTIC_WRITE_CONCERN_ERRORS.has(err.codeName) && err.code !== UNSATISFIABLE_WRITE_CONCERN_CODE && err.code !== UNKNOWN_REPL_WRITE_CONCERN_CODE;\n}\n\nfunction isMaxTimeMSExpiredError(err) {\n  if (err == null) return false;\n  return err.code === MAX_TIME_MS_EXPIRED_CODE || err.writeConcernError && err.writeConcernError.code === MAX_TIME_MS_EXPIRED_CODE;\n}\n\nfunction attemptTransactionCommit(session, startTime, fn, options) {\n  return session.commitTransaction().catch(err => {\n    if (err instanceof MongoError && hasNotTimedOut(startTime, MAX_WITH_TRANSACTION_TIMEOUT) && !isMaxTimeMSExpiredError(err)) {\n      if (err.hasErrorLabel('UnknownTransactionCommitResult')) {\n        return attemptTransactionCommit(session, startTime, fn, options);\n      }\n\n      if (err.hasErrorLabel('TransientTransactionError')) {\n        return attemptTransaction(session, startTime, fn, options);\n      }\n    }\n\n    throw err;\n  });\n}\n\nconst USER_EXPLICIT_TXN_END_STATES = new Set([TxnState.NO_TRANSACTION, TxnState.TRANSACTION_COMMITTED, TxnState.TRANSACTION_ABORTED]);\n\nfunction userExplicitlyEndedTransaction(session) {\n  return USER_EXPLICIT_TXN_END_STATES.has(session.transaction.state);\n}\n\nfunction attemptTransaction(session, startTime, fn, options) {\n  session.startTransaction(options);\n  let promise;\n\n  try {\n    promise = fn(session);\n  } catch (err) {\n    promise = Promise.reject(err);\n  }\n\n  if (!isPromiseLike(promise)) {\n    session.abortTransaction();\n    throw new TypeError('Function provided to `withTransaction` must return a Promise');\n  }\n\n  return promise.then(() => {\n    if (userExplicitlyEndedTransaction(session)) {\n      return;\n    }\n\n    return attemptTransactionCommit(session, startTime, fn, options);\n  }).catch(err => {\n    function maybeRetryOrThrow(err) {\n      if (err instanceof MongoError && err.hasErrorLabel('TransientTransactionError') && hasNotTimedOut(startTime, MAX_WITH_TRANSACTION_TIMEOUT)) {\n        return attemptTransaction(session, startTime, fn, options);\n      }\n\n      if (isMaxTimeMSExpiredError(err)) {\n        err.addErrorLabel('UnknownTransactionCommitResult');\n      }\n\n      throw err;\n    }\n\n    if (session.transaction.isActive) {\n      return session.abortTransaction().then(() => maybeRetryOrThrow(err));\n    }\n\n    return maybeRetryOrThrow(err);\n  });\n}\n\nfunction endTransaction(session, commandName, callback) {\n  if (!assertAlive(session, callback)) {\n    // checking result in case callback was called\n    return;\n  } // handle any initial problematic cases\n\n\n  let txnState = session.transaction.state;\n\n  if (txnState === TxnState.NO_TRANSACTION) {\n    callback(new MongoError('No transaction started'));\n    return;\n  }\n\n  if (commandName === 'commitTransaction') {\n    if (txnState === TxnState.STARTING_TRANSACTION || txnState === TxnState.TRANSACTION_COMMITTED_EMPTY) {\n      // the transaction was never started, we can safely exit here\n      session.transaction.transition(TxnState.TRANSACTION_COMMITTED_EMPTY);\n      callback(null, null);\n      return;\n    }\n\n    if (txnState === TxnState.TRANSACTION_ABORTED) {\n      callback(new MongoError('Cannot call commitTransaction after calling abortTransaction'));\n      return;\n    }\n  } else {\n    if (txnState === TxnState.STARTING_TRANSACTION) {\n      // the transaction was never started, we can safely exit here\n      session.transaction.transition(TxnState.TRANSACTION_ABORTED);\n      callback(null, null);\n      return;\n    }\n\n    if (txnState === TxnState.TRANSACTION_ABORTED) {\n      callback(new MongoError('Cannot call abortTransaction twice'));\n      return;\n    }\n\n    if (txnState === TxnState.TRANSACTION_COMMITTED || txnState === TxnState.TRANSACTION_COMMITTED_EMPTY) {\n      callback(new MongoError('Cannot call abortTransaction after calling commitTransaction'));\n      return;\n    }\n  } // construct and send the command\n\n\n  const command = {\n    [commandName]: 1\n  }; // apply a writeConcern if specified\n\n  let writeConcern;\n\n  if (session.transaction.options.writeConcern) {\n    writeConcern = Object.assign({}, session.transaction.options.writeConcern);\n  } else if (session.clientOptions && session.clientOptions.w) {\n    writeConcern = {\n      w: session.clientOptions.w\n    };\n  }\n\n  if (txnState === TxnState.TRANSACTION_COMMITTED) {\n    writeConcern = Object.assign({\n      wtimeout: 10000\n    }, writeConcern, {\n      w: 'majority'\n    });\n  }\n\n  if (writeConcern) {\n    Object.assign(command, {\n      writeConcern\n    });\n  }\n\n  if (commandName === 'commitTransaction' && session.transaction.options.maxTimeMS) {\n    Object.assign(command, {\n      maxTimeMS: session.transaction.options.maxTimeMS\n    });\n  }\n\n  function commandHandler(e, r) {\n    if (commandName === 'commitTransaction') {\n      session.transaction.transition(TxnState.TRANSACTION_COMMITTED);\n\n      if (e && (e instanceof MongoNetworkError || e instanceof MongoWriteConcernError || isRetryableError(e) || isMaxTimeMSExpiredError(e))) {\n        if (isUnknownTransactionCommitResult(e)) {\n          e.addErrorLabel('UnknownTransactionCommitResult'); // per txns spec, must unpin session in this case\n\n          session.transaction.unpinServer();\n        }\n      }\n    } else {\n      session.transaction.transition(TxnState.TRANSACTION_ABORTED);\n    }\n\n    callback(e, r);\n  } // The spec indicates that we should ignore all errors on `abortTransaction`\n\n\n  function transactionError(err) {\n    return commandName === 'commitTransaction' ? err : null;\n  }\n\n  if ( // Assumption here that commandName is \"commitTransaction\" or \"abortTransaction\"\n  session.transaction.recoveryToken && supportsRecoveryToken(session)) {\n    command.recoveryToken = session.transaction.recoveryToken;\n  } // send the command\n\n\n  session.topology.command('admin.$cmd', command, {\n    session\n  }, (err, reply) => {\n    if (err && isRetryableError(err)) {\n      // SPEC-1185: apply majority write concern when retrying commitTransaction\n      if (command.commitTransaction) {\n        // per txns spec, must unpin session in this case\n        session.transaction.unpinServer();\n        command.writeConcern = Object.assign({\n          wtimeout: 10000\n        }, command.writeConcern, {\n          w: 'majority'\n        });\n      }\n\n      return session.topology.command('admin.$cmd', command, {\n        session\n      }, (_err, _reply) => commandHandler(transactionError(_err), _reply));\n    }\n\n    commandHandler(transactionError(err), reply);\n  });\n}\n\nfunction supportsRecoveryToken(session) {\n  const topology = session.topology;\n  return !!topology.s.options.useRecoveryToken;\n}\n/**\r\n * Reflects the existence of a session on the server. Can be reused by the session pool.\r\n * WARNING: not meant to be instantiated directly. For internal use only.\r\n * @ignore\r\n */\n\n\nclass ServerSession {\n  constructor() {\n    this.id = {\n      id: new Binary(uuidV4(), Binary.SUBTYPE_UUID)\n    };\n    this.lastUse = now();\n    this.txnNumber = 0;\n    this.isDirty = false;\n  }\n  /**\r\n   * Determines if the server session has timed out.\r\n   * @ignore\r\n   * @param {Date} sessionTimeoutMinutes The server's \"logicalSessionTimeoutMinutes\"\r\n   * @return {boolean} true if the session has timed out.\r\n   */\n\n\n  hasTimedOut(sessionTimeoutMinutes) {\n    // Take the difference of the lastUse timestamp and now, which will result in a value in\n    // milliseconds, and then convert milliseconds to minutes to compare to `sessionTimeoutMinutes`\n    const idleTimeMinutes = Math.round(calculateDurationInMs(this.lastUse) % 86400000 % 3600000 / 60000);\n    return idleTimeMinutes > sessionTimeoutMinutes - 1;\n  }\n\n}\n/**\r\n * Maintains a pool of Server Sessions.\r\n * For internal use only\r\n * @ignore\r\n */\n\n\nclass ServerSessionPool {\n  constructor(topology) {\n    if (topology == null) {\n      throw new Error('ServerSessionPool requires a topology');\n    }\n\n    this.topology = topology;\n    this.sessions = [];\n  }\n  /**\r\n   * Ends all sessions in the session pool.\r\n   * @ignore\r\n   */\n\n\n  endAllPooledSessions(callback) {\n    if (this.sessions.length) {\n      this.topology.endSessions(this.sessions.map(session => session.id), () => {\n        this.sessions = [];\n\n        if (typeof callback === 'function') {\n          callback();\n        }\n      });\n      return;\n    }\n\n    if (typeof callback === 'function') {\n      callback();\n    }\n  }\n  /**\r\n   * Acquire a Server Session from the pool.\r\n   * Iterates through each session in the pool, removing any stale sessions\r\n   * along the way. The first non-stale session found is removed from the\r\n   * pool and returned. If no non-stale session is found, a new ServerSession\r\n   * is created.\r\n   * @ignore\r\n   * @returns {ServerSession}\r\n   */\n\n\n  acquire() {\n    const sessionTimeoutMinutes = this.topology.logicalSessionTimeoutMinutes;\n\n    while (this.sessions.length) {\n      const session = this.sessions.shift();\n\n      if (!session.hasTimedOut(sessionTimeoutMinutes)) {\n        return session;\n      }\n    }\n\n    return new ServerSession();\n  }\n  /**\r\n   * Release a session to the session pool\r\n   * Adds the session back to the session pool if the session has not timed out yet.\r\n   * This method also removes any stale sessions from the pool.\r\n   * @ignore\r\n   * @param {ServerSession} session The session to release to the pool\r\n   */\n\n\n  release(session) {\n    const sessionTimeoutMinutes = this.topology.logicalSessionTimeoutMinutes;\n\n    while (this.sessions.length) {\n      const pooledSession = this.sessions[this.sessions.length - 1];\n\n      if (pooledSession.hasTimedOut(sessionTimeoutMinutes)) {\n        this.sessions.pop();\n      } else {\n        break;\n      }\n    }\n\n    if (!session.hasTimedOut(sessionTimeoutMinutes)) {\n      if (session.isDirty) {\n        return;\n      } // otherwise, readd this session to the session pool\n\n\n      this.sessions.unshift(session);\n    }\n  }\n\n} // TODO: this should be codified in command construction\n// @see https://github.com/mongodb/specifications/blob/master/source/read-write-concern/read-write-concern.rst#read-concern\n\n\nfunction commandSupportsReadConcern(command, options) {\n  if (command.aggregate || command.count || command.distinct || command.find || command.parallelCollectionScan || command.geoNear || command.geoSearch) {\n    return true;\n  }\n\n  if (command.mapReduce && options && options.out && (options.out.inline === 1 || options.out === 'inline')) {\n    return true;\n  }\n\n  return false;\n}\n/**\r\n * Optionally decorate a command with sessions specific keys\r\n *\r\n * @ignore\r\n * @param {ClientSession} session the session tracking transaction state\r\n * @param {Object} command the command to decorate\r\n * @param {Object} topology the topology for tracking the cluster time\r\n * @param {Object} [options] Optional settings passed to calling operation\r\n * @return {MongoError|null} An error, if some error condition was met\r\n */\n\n\nfunction applySession(session, command, options) {\n  if (session.hasEnded) {\n    // TODO: merge this with `assertAlive`, did not want to throw a try/catch here\n    return new MongoError('Cannot use a session that has ended');\n  } // SPEC-1019: silently ignore explicit session with unacknowledged write for backwards compatibility\n\n\n  if (options && options.writeConcern && options.writeConcern.w === 0) {\n    return;\n  }\n\n  const serverSession = session.serverSession;\n  serverSession.lastUse = now();\n  command.lsid = serverSession.id; // first apply non-transaction-specific sessions data\n\n  const inTransaction = session.inTransaction() || isTransactionCommand(command);\n  const isRetryableWrite = options.willRetryWrite;\n  const shouldApplyReadConcern = commandSupportsReadConcern(command, options);\n\n  if (serverSession.txnNumber && (isRetryableWrite || inTransaction)) {\n    command.txnNumber = BSON.Long.fromNumber(serverSession.txnNumber);\n  } // now attempt to apply transaction-specific sessions data\n\n\n  if (!inTransaction) {\n    if (session.transaction.state !== TxnState.NO_TRANSACTION) {\n      session.transaction.transition(TxnState.NO_TRANSACTION);\n    } // TODO: the following should only be applied to read operation per spec.\n    // for causal consistency\n\n\n    if (session.supports.causalConsistency && session.operationTime && shouldApplyReadConcern) {\n      command.readConcern = command.readConcern || {};\n      Object.assign(command.readConcern, {\n        afterClusterTime: session.operationTime\n      });\n    }\n\n    return;\n  }\n\n  if (options.readPreference && !options.readPreference.equals(ReadPreference.primary)) {\n    return new MongoError(`Read preference in a transaction must be primary, not: ${options.readPreference.mode}`);\n  } // `autocommit` must always be false to differentiate from retryable writes\n\n\n  command.autocommit = false;\n\n  if (session.transaction.state === TxnState.STARTING_TRANSACTION) {\n    session.transaction.transition(TxnState.TRANSACTION_IN_PROGRESS);\n    command.startTransaction = true;\n    const readConcern = session.transaction.options.readConcern || session.clientOptions.readConcern;\n\n    if (readConcern) {\n      command.readConcern = readConcern;\n    }\n\n    if (session.supports.causalConsistency && session.operationTime) {\n      command.readConcern = command.readConcern || {};\n      Object.assign(command.readConcern, {\n        afterClusterTime: session.operationTime\n      });\n    }\n  }\n}\n\nfunction updateSessionFromResponse(session, document) {\n  if (document.$clusterTime) {\n    resolveClusterTime(session, document.$clusterTime);\n  }\n\n  if (document.operationTime && session && session.supports.causalConsistency) {\n    session.advanceOperationTime(document.operationTime);\n  }\n\n  if (document.recoveryToken && session && session.inTransaction()) {\n    session.transaction._recoveryToken = document.recoveryToken;\n  }\n}\n\nmodule.exports = {\n  ClientSession,\n  ServerSession,\n  ServerSessionPool,\n  TxnState,\n  applySession,\n  updateSessionFromResponse,\n  commandSupportsReadConcern\n};","map":{"version":3,"sources":["C:/Users/Tanja Aakerholt/Documents/GitHub/portfolio2/client/node_modules/mongodb/lib/core/sessions.js"],"names":["retrieveBSON","require","EventEmitter","BSON","Binary","uuidV4","MongoError","isRetryableError","MongoNetworkError","MongoWriteConcernError","Transaction","TxnState","isPromiseLike","ReadPreference","maybePromise","isTransactionCommand","resolveClusterTime","isSharded","maxWireVersion","now","calculateDurationInMs","minWireVersionForShardedTransactions","assertAlive","session","callback","serverSession","error","kServerSession","Symbol","ClientSession","constructor","topology","sessionPool","options","clientOptions","Error","ServerSessionPool","hasEnded","undefined","supports","causalConsistency","clusterTime","initialClusterTime","operationTime","explicit","owner","defaultTransactionOptions","Object","assign","transaction","id","acquire","endSession","done","completeEndSession","release","emit","inTransaction","abortTransaction","err","advanceOperationTime","greaterThan","equals","buffer","incrementTransactionNumber","txnNumber","isActive","startTransaction","topologyMaxWireVersion","transition","STARTING_TRANSACTION","commitTransaction","endTransaction","toBSON","withTransaction","fn","startTime","attemptTransaction","MAX_WITH_TRANSACTION_TIMEOUT","UNSATISFIABLE_WRITE_CONCERN_CODE","UNKNOWN_REPL_WRITE_CONCERN_CODE","MAX_TIME_MS_EXPIRED_CODE","NON_DETERMINISTIC_WRITE_CONCERN_ERRORS","Set","hasNotTimedOut","max","isUnknownTransactionCommitResult","isMaxTimeMSExpiredError","has","codeName","code","writeConcernError","attemptTransactionCommit","catch","hasErrorLabel","USER_EXPLICIT_TXN_END_STATES","NO_TRANSACTION","TRANSACTION_COMMITTED","TRANSACTION_ABORTED","userExplicitlyEndedTransaction","state","promise","Promise","reject","TypeError","then","maybeRetryOrThrow","addErrorLabel","commandName","txnState","TRANSACTION_COMMITTED_EMPTY","command","writeConcern","w","wtimeout","maxTimeMS","commandHandler","e","r","unpinServer","transactionError","recoveryToken","supportsRecoveryToken","reply","_err","_reply","s","useRecoveryToken","ServerSession","SUBTYPE_UUID","lastUse","isDirty","hasTimedOut","sessionTimeoutMinutes","idleTimeMinutes","Math","round","sessions","endAllPooledSessions","length","endSessions","map","logicalSessionTimeoutMinutes","shift","pooledSession","pop","unshift","commandSupportsReadConcern","aggregate","count","distinct","find","parallelCollectionScan","geoNear","geoSearch","mapReduce","out","inline","applySession","lsid","isRetryableWrite","willRetryWrite","shouldApplyReadConcern","Long","fromNumber","readConcern","afterClusterTime","readPreference","primary","mode","autocommit","TRANSACTION_IN_PROGRESS","updateSessionFromResponse","document","$clusterTime","_recoveryToken","module","exports"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nconst retrieveBSON = require('./connection/utils').retrieveBSON;\r\nconst EventEmitter = require('events');\r\nconst BSON = retrieveBSON();\r\nconst Binary = BSON.Binary;\r\nconst uuidV4 = require('./utils').uuidV4;\r\nconst MongoError = require('./error').MongoError;\r\nconst isRetryableError = require('././error').isRetryableError;\r\nconst MongoNetworkError = require('./error').MongoNetworkError;\r\nconst MongoWriteConcernError = require('./error').MongoWriteConcernError;\r\nconst Transaction = require('./transactions').Transaction;\r\nconst TxnState = require('./transactions').TxnState;\r\nconst isPromiseLike = require('./utils').isPromiseLike;\r\nconst ReadPreference = require('./topologies/read_preference');\r\nconst maybePromise = require('../utils').maybePromise;\r\nconst isTransactionCommand = require('./transactions').isTransactionCommand;\r\nconst resolveClusterTime = require('./topologies/shared').resolveClusterTime;\r\nconst isSharded = require('./wireprotocol/shared').isSharded;\r\nconst maxWireVersion = require('./utils').maxWireVersion;\r\nconst now = require('./../utils').now;\r\nconst calculateDurationInMs = require('./../utils').calculateDurationInMs;\r\nconst minWireVersionForShardedTransactions = 8;\r\n\r\nfunction assertAlive(session, callback) {\r\n  if (session.serverSession == null) {\r\n    const error = new MongoError('Cannot use a session that has ended');\r\n    if (typeof callback === 'function') {\r\n      callback(error, null);\r\n      return false;\r\n    }\r\n\r\n    throw error;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n/**\r\n * Options to pass when creating a Client Session\r\n * @typedef {Object} SessionOptions\r\n * @property {boolean} [causalConsistency=true] Whether causal consistency should be enabled on this session\r\n * @property {TransactionOptions} [defaultTransactionOptions] The default TransactionOptions to use for transactions started on this session.\r\n */\r\n\r\n/**\r\n * A BSON document reflecting the lsid of a {@link ClientSession}\r\n * @typedef {Object} SessionId\r\n */\r\n\r\nconst kServerSession = Symbol('serverSession');\r\n\r\n/**\r\n * A class representing a client session on the server\r\n * WARNING: not meant to be instantiated directly.\r\n * @class\r\n * @hideconstructor\r\n */\r\nclass ClientSession extends EventEmitter {\r\n  /**\r\n   * Create a client session.\r\n   * WARNING: not meant to be instantiated directly\r\n   *\r\n   * @param {Topology} topology The current client's topology (Internal Class)\r\n   * @param {ServerSessionPool} sessionPool The server session pool (Internal Class)\r\n   * @param {SessionOptions} [options] Optional settings\r\n   * @param {Object} [clientOptions] Optional settings provided when creating a client in the porcelain driver\r\n   */\r\n  constructor(topology, sessionPool, options, clientOptions) {\r\n    super();\r\n\r\n    if (topology == null) {\r\n      throw new Error('ClientSession requires a topology');\r\n    }\r\n\r\n    if (sessionPool == null || !(sessionPool instanceof ServerSessionPool)) {\r\n      throw new Error('ClientSession requires a ServerSessionPool');\r\n    }\r\n\r\n    options = options || {};\r\n    clientOptions = clientOptions || {};\r\n\r\n    this.topology = topology;\r\n    this.sessionPool = sessionPool;\r\n    this.hasEnded = false;\r\n    this.clientOptions = clientOptions;\r\n    this[kServerSession] = undefined;\r\n\r\n    this.supports = {\r\n      causalConsistency:\r\n        typeof options.causalConsistency !== 'undefined' ? options.causalConsistency : true\r\n    };\r\n\r\n    this.clusterTime = options.initialClusterTime;\r\n\r\n    this.operationTime = null;\r\n    this.explicit = !!options.explicit;\r\n    this.owner = options.owner;\r\n    this.defaultTransactionOptions = Object.assign({}, options.defaultTransactionOptions);\r\n    this.transaction = new Transaction();\r\n  }\r\n\r\n  /**\r\n   * The server id associated with this session\r\n   * @type {SessionId}\r\n   */\r\n  get id() {\r\n    return this.serverSession.id;\r\n  }\r\n\r\n  get serverSession() {\r\n    if (this[kServerSession] == null) {\r\n      this[kServerSession] = this.sessionPool.acquire();\r\n    }\r\n\r\n    return this[kServerSession];\r\n  }\r\n\r\n  /**\r\n   * Ends this session on the server\r\n   *\r\n   * @param {Object} [options] Optional settings. Currently reserved for future use\r\n   * @param {Function} [callback] Optional callback for completion of this operation\r\n   */\r\n  endSession(options, callback) {\r\n    if (typeof options === 'function') (callback = options), (options = {});\r\n    options = options || {};\r\n\r\n    const session = this;\r\n    return maybePromise(this, callback, done => {\r\n      if (session.hasEnded) {\r\n        return done();\r\n      }\r\n\r\n      function completeEndSession() {\r\n        // release the server session back to the pool\r\n        session.sessionPool.release(session.serverSession);\r\n        session[kServerSession] = undefined;\r\n\r\n        // mark the session as ended, and emit a signal\r\n        session.hasEnded = true;\r\n        session.emit('ended', session);\r\n\r\n        // spec indicates that we should ignore all errors for `endSessions`\r\n        done();\r\n      }\r\n\r\n      if (session.serverSession && session.inTransaction()) {\r\n        session.abortTransaction(err => {\r\n          if (err) return done(err);\r\n          completeEndSession();\r\n        });\r\n\r\n        return;\r\n      }\r\n\r\n      completeEndSession();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Advances the operationTime for a ClientSession.\r\n   *\r\n   * @param {Timestamp} operationTime the `BSON.Timestamp` of the operation type it is desired to advance to\r\n   */\r\n  advanceOperationTime(operationTime) {\r\n    if (this.operationTime == null) {\r\n      this.operationTime = operationTime;\r\n      return;\r\n    }\r\n\r\n    if (operationTime.greaterThan(this.operationTime)) {\r\n      this.operationTime = operationTime;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Used to determine if this session equals another\r\n   * @param {ClientSession} session\r\n   * @return {boolean} true if the sessions are equal\r\n   */\r\n  equals(session) {\r\n    if (!(session instanceof ClientSession)) {\r\n      return false;\r\n    }\r\n\r\n    return this.id.id.buffer.equals(session.id.id.buffer);\r\n  }\r\n\r\n  /**\r\n   * Increment the transaction number on the internal ServerSession\r\n   */\r\n  incrementTransactionNumber() {\r\n    this.serverSession.txnNumber++;\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} whether this session is currently in a transaction or not\r\n   */\r\n  inTransaction() {\r\n    return this.transaction.isActive;\r\n  }\r\n\r\n  /**\r\n   * Starts a new transaction with the given options.\r\n   *\r\n   * @param {TransactionOptions} options Options for the transaction\r\n   */\r\n  startTransaction(options) {\r\n    assertAlive(this);\r\n    if (this.inTransaction()) {\r\n      throw new MongoError('Transaction already in progress');\r\n    }\r\n\r\n    const topologyMaxWireVersion = maxWireVersion(this.topology);\r\n    if (\r\n      isSharded(this.topology) &&\r\n      topologyMaxWireVersion != null &&\r\n      topologyMaxWireVersion < minWireVersionForShardedTransactions\r\n    ) {\r\n      throw new MongoError('Transactions are not supported on sharded clusters in MongoDB < 4.2.');\r\n    }\r\n\r\n    // increment txnNumber\r\n    this.incrementTransactionNumber();\r\n\r\n    // create transaction state\r\n    this.transaction = new Transaction(\r\n      Object.assign({}, this.clientOptions, options || this.defaultTransactionOptions)\r\n    );\r\n\r\n    this.transaction.transition(TxnState.STARTING_TRANSACTION);\r\n  }\r\n\r\n  /**\r\n   * Commits the currently active transaction in this session.\r\n   *\r\n   * @param {Function} [callback] optional callback for completion of this operation\r\n   * @return {Promise} A promise is returned if no callback is provided\r\n   */\r\n  commitTransaction(callback) {\r\n    return maybePromise(this, callback, done => endTransaction(this, 'commitTransaction', done));\r\n  }\r\n\r\n  /**\r\n   * Aborts the currently active transaction in this session.\r\n   *\r\n   * @param {Function} [callback] optional callback for completion of this operation\r\n   * @return {Promise} A promise is returned if no callback is provided\r\n   */\r\n  abortTransaction(callback) {\r\n    return maybePromise(this, callback, done => endTransaction(this, 'abortTransaction', done));\r\n  }\r\n\r\n  /**\r\n   * This is here to ensure that ClientSession is never serialized to BSON.\r\n   * @ignore\r\n   */\r\n  toBSON() {\r\n    throw new Error('ClientSession cannot be serialized to BSON.');\r\n  }\r\n\r\n  /**\r\n   * A user provided function to be run within a transaction\r\n   *\r\n   * @callback WithTransactionCallback\r\n   * @param {ClientSession} session The parent session of the transaction running the operation. This should be passed into each operation within the lambda.\r\n   * @returns {Promise} The resulting Promise of operations run within this transaction\r\n   */\r\n\r\n  /**\r\n   * Runs a provided lambda within a transaction, retrying either the commit operation\r\n   * or entire transaction as needed (and when the error permits) to better ensure that\r\n   * the transaction can complete successfully.\r\n   *\r\n   * IMPORTANT: This method requires the user to return a Promise, all lambdas that do not\r\n   * return a Promise will result in undefined behavior.\r\n   *\r\n   * @param {WithTransactionCallback} fn\r\n   * @param {TransactionOptions} [options] Optional settings for the transaction\r\n   */\r\n  withTransaction(fn, options) {\r\n    const startTime = now();\r\n    return attemptTransaction(this, startTime, fn, options);\r\n  }\r\n}\r\n\r\nconst MAX_WITH_TRANSACTION_TIMEOUT = 120000;\r\nconst UNSATISFIABLE_WRITE_CONCERN_CODE = 100;\r\nconst UNKNOWN_REPL_WRITE_CONCERN_CODE = 79;\r\nconst MAX_TIME_MS_EXPIRED_CODE = 50;\r\nconst NON_DETERMINISTIC_WRITE_CONCERN_ERRORS = new Set([\r\n  'CannotSatisfyWriteConcern',\r\n  'UnknownReplWriteConcern',\r\n  'UnsatisfiableWriteConcern'\r\n]);\r\n\r\nfunction hasNotTimedOut(startTime, max) {\r\n  return calculateDurationInMs(startTime) < max;\r\n}\r\n\r\nfunction isUnknownTransactionCommitResult(err) {\r\n  return (\r\n    isMaxTimeMSExpiredError(err) ||\r\n    (!NON_DETERMINISTIC_WRITE_CONCERN_ERRORS.has(err.codeName) &&\r\n      err.code !== UNSATISFIABLE_WRITE_CONCERN_CODE &&\r\n      err.code !== UNKNOWN_REPL_WRITE_CONCERN_CODE)\r\n  );\r\n}\r\n\r\nfunction isMaxTimeMSExpiredError(err) {\r\n  if (err == null) return false;\r\n  return (\r\n    err.code === MAX_TIME_MS_EXPIRED_CODE ||\r\n    (err.writeConcernError && err.writeConcernError.code === MAX_TIME_MS_EXPIRED_CODE)\r\n  );\r\n}\r\n\r\nfunction attemptTransactionCommit(session, startTime, fn, options) {\r\n  return session.commitTransaction().catch(err => {\r\n    if (\r\n      err instanceof MongoError &&\r\n      hasNotTimedOut(startTime, MAX_WITH_TRANSACTION_TIMEOUT) &&\r\n      !isMaxTimeMSExpiredError(err)\r\n    ) {\r\n      if (err.hasErrorLabel('UnknownTransactionCommitResult')) {\r\n        return attemptTransactionCommit(session, startTime, fn, options);\r\n      }\r\n\r\n      if (err.hasErrorLabel('TransientTransactionError')) {\r\n        return attemptTransaction(session, startTime, fn, options);\r\n      }\r\n    }\r\n\r\n    throw err;\r\n  });\r\n}\r\n\r\nconst USER_EXPLICIT_TXN_END_STATES = new Set([\r\n  TxnState.NO_TRANSACTION,\r\n  TxnState.TRANSACTION_COMMITTED,\r\n  TxnState.TRANSACTION_ABORTED\r\n]);\r\n\r\nfunction userExplicitlyEndedTransaction(session) {\r\n  return USER_EXPLICIT_TXN_END_STATES.has(session.transaction.state);\r\n}\r\n\r\nfunction attemptTransaction(session, startTime, fn, options) {\r\n  session.startTransaction(options);\r\n\r\n  let promise;\r\n  try {\r\n    promise = fn(session);\r\n  } catch (err) {\r\n    promise = Promise.reject(err);\r\n  }\r\n\r\n  if (!isPromiseLike(promise)) {\r\n    session.abortTransaction();\r\n    throw new TypeError('Function provided to `withTransaction` must return a Promise');\r\n  }\r\n\r\n  return promise\r\n    .then(() => {\r\n      if (userExplicitlyEndedTransaction(session)) {\r\n        return;\r\n      }\r\n\r\n      return attemptTransactionCommit(session, startTime, fn, options);\r\n    })\r\n    .catch(err => {\r\n      function maybeRetryOrThrow(err) {\r\n        if (\r\n          err instanceof MongoError &&\r\n          err.hasErrorLabel('TransientTransactionError') &&\r\n          hasNotTimedOut(startTime, MAX_WITH_TRANSACTION_TIMEOUT)\r\n        ) {\r\n          return attemptTransaction(session, startTime, fn, options);\r\n        }\r\n\r\n        if (isMaxTimeMSExpiredError(err)) {\r\n          err.addErrorLabel('UnknownTransactionCommitResult');\r\n        }\r\n\r\n        throw err;\r\n      }\r\n\r\n      if (session.transaction.isActive) {\r\n        return session.abortTransaction().then(() => maybeRetryOrThrow(err));\r\n      }\r\n\r\n      return maybeRetryOrThrow(err);\r\n    });\r\n}\r\n\r\nfunction endTransaction(session, commandName, callback) {\r\n  if (!assertAlive(session, callback)) {\r\n    // checking result in case callback was called\r\n    return;\r\n  }\r\n\r\n  // handle any initial problematic cases\r\n  let txnState = session.transaction.state;\r\n\r\n  if (txnState === TxnState.NO_TRANSACTION) {\r\n    callback(new MongoError('No transaction started'));\r\n    return;\r\n  }\r\n\r\n  if (commandName === 'commitTransaction') {\r\n    if (\r\n      txnState === TxnState.STARTING_TRANSACTION ||\r\n      txnState === TxnState.TRANSACTION_COMMITTED_EMPTY\r\n    ) {\r\n      // the transaction was never started, we can safely exit here\r\n      session.transaction.transition(TxnState.TRANSACTION_COMMITTED_EMPTY);\r\n      callback(null, null);\r\n      return;\r\n    }\r\n\r\n    if (txnState === TxnState.TRANSACTION_ABORTED) {\r\n      callback(new MongoError('Cannot call commitTransaction after calling abortTransaction'));\r\n      return;\r\n    }\r\n  } else {\r\n    if (txnState === TxnState.STARTING_TRANSACTION) {\r\n      // the transaction was never started, we can safely exit here\r\n      session.transaction.transition(TxnState.TRANSACTION_ABORTED);\r\n      callback(null, null);\r\n      return;\r\n    }\r\n\r\n    if (txnState === TxnState.TRANSACTION_ABORTED) {\r\n      callback(new MongoError('Cannot call abortTransaction twice'));\r\n      return;\r\n    }\r\n\r\n    if (\r\n      txnState === TxnState.TRANSACTION_COMMITTED ||\r\n      txnState === TxnState.TRANSACTION_COMMITTED_EMPTY\r\n    ) {\r\n      callback(new MongoError('Cannot call abortTransaction after calling commitTransaction'));\r\n      return;\r\n    }\r\n  }\r\n\r\n  // construct and send the command\r\n  const command = { [commandName]: 1 };\r\n\r\n  // apply a writeConcern if specified\r\n  let writeConcern;\r\n  if (session.transaction.options.writeConcern) {\r\n    writeConcern = Object.assign({}, session.transaction.options.writeConcern);\r\n  } else if (session.clientOptions && session.clientOptions.w) {\r\n    writeConcern = { w: session.clientOptions.w };\r\n  }\r\n\r\n  if (txnState === TxnState.TRANSACTION_COMMITTED) {\r\n    writeConcern = Object.assign({ wtimeout: 10000 }, writeConcern, { w: 'majority' });\r\n  }\r\n\r\n  if (writeConcern) {\r\n    Object.assign(command, { writeConcern });\r\n  }\r\n\r\n  if (commandName === 'commitTransaction' && session.transaction.options.maxTimeMS) {\r\n    Object.assign(command, { maxTimeMS: session.transaction.options.maxTimeMS });\r\n  }\r\n\r\n  function commandHandler(e, r) {\r\n    if (commandName === 'commitTransaction') {\r\n      session.transaction.transition(TxnState.TRANSACTION_COMMITTED);\r\n\r\n      if (\r\n        e &&\r\n        (e instanceof MongoNetworkError ||\r\n          e instanceof MongoWriteConcernError ||\r\n          isRetryableError(e) ||\r\n          isMaxTimeMSExpiredError(e))\r\n      ) {\r\n        if (isUnknownTransactionCommitResult(e)) {\r\n          e.addErrorLabel('UnknownTransactionCommitResult');\r\n\r\n          // per txns spec, must unpin session in this case\r\n          session.transaction.unpinServer();\r\n        }\r\n      }\r\n    } else {\r\n      session.transaction.transition(TxnState.TRANSACTION_ABORTED);\r\n    }\r\n\r\n    callback(e, r);\r\n  }\r\n\r\n  // The spec indicates that we should ignore all errors on `abortTransaction`\r\n  function transactionError(err) {\r\n    return commandName === 'commitTransaction' ? err : null;\r\n  }\r\n\r\n  if (\r\n    // Assumption here that commandName is \"commitTransaction\" or \"abortTransaction\"\r\n    session.transaction.recoveryToken &&\r\n    supportsRecoveryToken(session)\r\n  ) {\r\n    command.recoveryToken = session.transaction.recoveryToken;\r\n  }\r\n\r\n  // send the command\r\n  session.topology.command('admin.$cmd', command, { session }, (err, reply) => {\r\n    if (err && isRetryableError(err)) {\r\n      // SPEC-1185: apply majority write concern when retrying commitTransaction\r\n      if (command.commitTransaction) {\r\n        // per txns spec, must unpin session in this case\r\n        session.transaction.unpinServer();\r\n\r\n        command.writeConcern = Object.assign({ wtimeout: 10000 }, command.writeConcern, {\r\n          w: 'majority'\r\n        });\r\n      }\r\n\r\n      return session.topology.command('admin.$cmd', command, { session }, (_err, _reply) =>\r\n        commandHandler(transactionError(_err), _reply)\r\n      );\r\n    }\r\n\r\n    commandHandler(transactionError(err), reply);\r\n  });\r\n}\r\n\r\nfunction supportsRecoveryToken(session) {\r\n  const topology = session.topology;\r\n  return !!topology.s.options.useRecoveryToken;\r\n}\r\n\r\n/**\r\n * Reflects the existence of a session on the server. Can be reused by the session pool.\r\n * WARNING: not meant to be instantiated directly. For internal use only.\r\n * @ignore\r\n */\r\nclass ServerSession {\r\n  constructor() {\r\n    this.id = { id: new Binary(uuidV4(), Binary.SUBTYPE_UUID) };\r\n    this.lastUse = now();\r\n    this.txnNumber = 0;\r\n    this.isDirty = false;\r\n  }\r\n\r\n  /**\r\n   * Determines if the server session has timed out.\r\n   * @ignore\r\n   * @param {Date} sessionTimeoutMinutes The server's \"logicalSessionTimeoutMinutes\"\r\n   * @return {boolean} true if the session has timed out.\r\n   */\r\n  hasTimedOut(sessionTimeoutMinutes) {\r\n    // Take the difference of the lastUse timestamp and now, which will result in a value in\r\n    // milliseconds, and then convert milliseconds to minutes to compare to `sessionTimeoutMinutes`\r\n    const idleTimeMinutes = Math.round(\r\n      ((calculateDurationInMs(this.lastUse) % 86400000) % 3600000) / 60000\r\n    );\r\n\r\n    return idleTimeMinutes > sessionTimeoutMinutes - 1;\r\n  }\r\n}\r\n\r\n/**\r\n * Maintains a pool of Server Sessions.\r\n * For internal use only\r\n * @ignore\r\n */\r\nclass ServerSessionPool {\r\n  constructor(topology) {\r\n    if (topology == null) {\r\n      throw new Error('ServerSessionPool requires a topology');\r\n    }\r\n\r\n    this.topology = topology;\r\n    this.sessions = [];\r\n  }\r\n\r\n  /**\r\n   * Ends all sessions in the session pool.\r\n   * @ignore\r\n   */\r\n  endAllPooledSessions(callback) {\r\n    if (this.sessions.length) {\r\n      this.topology.endSessions(\r\n        this.sessions.map(session => session.id),\r\n        () => {\r\n          this.sessions = [];\r\n          if (typeof callback === 'function') {\r\n            callback();\r\n          }\r\n        }\r\n      );\r\n\r\n      return;\r\n    }\r\n\r\n    if (typeof callback === 'function') {\r\n      callback();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Acquire a Server Session from the pool.\r\n   * Iterates through each session in the pool, removing any stale sessions\r\n   * along the way. The first non-stale session found is removed from the\r\n   * pool and returned. If no non-stale session is found, a new ServerSession\r\n   * is created.\r\n   * @ignore\r\n   * @returns {ServerSession}\r\n   */\r\n  acquire() {\r\n    const sessionTimeoutMinutes = this.topology.logicalSessionTimeoutMinutes;\r\n    while (this.sessions.length) {\r\n      const session = this.sessions.shift();\r\n      if (!session.hasTimedOut(sessionTimeoutMinutes)) {\r\n        return session;\r\n      }\r\n    }\r\n\r\n    return new ServerSession();\r\n  }\r\n\r\n  /**\r\n   * Release a session to the session pool\r\n   * Adds the session back to the session pool if the session has not timed out yet.\r\n   * This method also removes any stale sessions from the pool.\r\n   * @ignore\r\n   * @param {ServerSession} session The session to release to the pool\r\n   */\r\n  release(session) {\r\n    const sessionTimeoutMinutes = this.topology.logicalSessionTimeoutMinutes;\r\n    while (this.sessions.length) {\r\n      const pooledSession = this.sessions[this.sessions.length - 1];\r\n      if (pooledSession.hasTimedOut(sessionTimeoutMinutes)) {\r\n        this.sessions.pop();\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (!session.hasTimedOut(sessionTimeoutMinutes)) {\r\n      if (session.isDirty) {\r\n        return;\r\n      }\r\n\r\n      // otherwise, readd this session to the session pool\r\n      this.sessions.unshift(session);\r\n    }\r\n  }\r\n}\r\n\r\n// TODO: this should be codified in command construction\r\n// @see https://github.com/mongodb/specifications/blob/master/source/read-write-concern/read-write-concern.rst#read-concern\r\nfunction commandSupportsReadConcern(command, options) {\r\n  if (\r\n    command.aggregate ||\r\n    command.count ||\r\n    command.distinct ||\r\n    command.find ||\r\n    command.parallelCollectionScan ||\r\n    command.geoNear ||\r\n    command.geoSearch\r\n  ) {\r\n    return true;\r\n  }\r\n\r\n  if (\r\n    command.mapReduce &&\r\n    options &&\r\n    options.out &&\r\n    (options.out.inline === 1 || options.out === 'inline')\r\n  ) {\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\n/**\r\n * Optionally decorate a command with sessions specific keys\r\n *\r\n * @ignore\r\n * @param {ClientSession} session the session tracking transaction state\r\n * @param {Object} command the command to decorate\r\n * @param {Object} topology the topology for tracking the cluster time\r\n * @param {Object} [options] Optional settings passed to calling operation\r\n * @return {MongoError|null} An error, if some error condition was met\r\n */\r\nfunction applySession(session, command, options) {\r\n  if (session.hasEnded) {\r\n    // TODO: merge this with `assertAlive`, did not want to throw a try/catch here\r\n    return new MongoError('Cannot use a session that has ended');\r\n  }\r\n\r\n  // SPEC-1019: silently ignore explicit session with unacknowledged write for backwards compatibility\r\n  if (options && options.writeConcern && options.writeConcern.w === 0) {\r\n    return;\r\n  }\r\n\r\n  const serverSession = session.serverSession;\r\n  serverSession.lastUse = now();\r\n  command.lsid = serverSession.id;\r\n\r\n  // first apply non-transaction-specific sessions data\r\n  const inTransaction = session.inTransaction() || isTransactionCommand(command);\r\n  const isRetryableWrite = options.willRetryWrite;\r\n  const shouldApplyReadConcern = commandSupportsReadConcern(command, options);\r\n\r\n  if (serverSession.txnNumber && (isRetryableWrite || inTransaction)) {\r\n    command.txnNumber = BSON.Long.fromNumber(serverSession.txnNumber);\r\n  }\r\n\r\n  // now attempt to apply transaction-specific sessions data\r\n  if (!inTransaction) {\r\n    if (session.transaction.state !== TxnState.NO_TRANSACTION) {\r\n      session.transaction.transition(TxnState.NO_TRANSACTION);\r\n    }\r\n\r\n    // TODO: the following should only be applied to read operation per spec.\r\n    // for causal consistency\r\n    if (session.supports.causalConsistency && session.operationTime && shouldApplyReadConcern) {\r\n      command.readConcern = command.readConcern || {};\r\n      Object.assign(command.readConcern, { afterClusterTime: session.operationTime });\r\n    }\r\n\r\n    return;\r\n  }\r\n\r\n  if (options.readPreference && !options.readPreference.equals(ReadPreference.primary)) {\r\n    return new MongoError(\r\n      `Read preference in a transaction must be primary, not: ${options.readPreference.mode}`\r\n    );\r\n  }\r\n\r\n  // `autocommit` must always be false to differentiate from retryable writes\r\n  command.autocommit = false;\r\n\r\n  if (session.transaction.state === TxnState.STARTING_TRANSACTION) {\r\n    session.transaction.transition(TxnState.TRANSACTION_IN_PROGRESS);\r\n    command.startTransaction = true;\r\n\r\n    const readConcern =\r\n      session.transaction.options.readConcern || session.clientOptions.readConcern;\r\n    if (readConcern) {\r\n      command.readConcern = readConcern;\r\n    }\r\n\r\n    if (session.supports.causalConsistency && session.operationTime) {\r\n      command.readConcern = command.readConcern || {};\r\n      Object.assign(command.readConcern, { afterClusterTime: session.operationTime });\r\n    }\r\n  }\r\n}\r\n\r\nfunction updateSessionFromResponse(session, document) {\r\n  if (document.$clusterTime) {\r\n    resolveClusterTime(session, document.$clusterTime);\r\n  }\r\n\r\n  if (document.operationTime && session && session.supports.causalConsistency) {\r\n    session.advanceOperationTime(document.operationTime);\r\n  }\r\n\r\n  if (document.recoveryToken && session && session.inTransaction()) {\r\n    session.transaction._recoveryToken = document.recoveryToken;\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  ClientSession,\r\n  ServerSession,\r\n  ServerSessionPool,\r\n  TxnState,\r\n  applySession,\r\n  updateSessionFromResponse,\r\n  commandSupportsReadConcern\r\n};\r\n"]},"metadata":{},"sourceType":"script"}