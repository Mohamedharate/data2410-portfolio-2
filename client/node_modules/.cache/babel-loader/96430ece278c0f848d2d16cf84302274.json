{"ast":null,"code":"// Custom inspect property name / symbol.\nvar inspect = Buffer ? require('util').inspect.custom || 'inspect' : 'inspect';\n/**\r\n * A class representation of the BSON Symbol type.\r\n *\r\n * @class\r\n * @deprecated\r\n * @param {string} value the string representing the symbol.\r\n * @return {Symbol}\r\n */\n\nfunction Symbol(value) {\n  if (!(this instanceof Symbol)) return new Symbol(value);\n  this._bsontype = 'Symbol';\n  this.value = value;\n}\n/**\r\n * Access the wrapped string value.\r\n *\r\n * @method\r\n * @return {String} returns the wrapped string.\r\n */\n\n\nSymbol.prototype.valueOf = function () {\n  return this.value;\n};\n/**\r\n * @ignore\r\n */\n\n\nSymbol.prototype.toString = function () {\n  return this.value;\n};\n/**\r\n * @ignore\r\n */\n\n\nSymbol.prototype[inspect] = function () {\n  return this.value;\n};\n/**\r\n * @ignore\r\n */\n\n\nSymbol.prototype.toJSON = function () {\n  return this.value;\n};\n\nmodule.exports = Symbol;\nmodule.exports.Symbol = Symbol;","map":{"version":3,"sources":["C:/Users/Tanja Aakerholt/Documents/GitHub/portfolio2/client/node_modules/bson/lib/bson/symbol.js"],"names":["inspect","Buffer","require","custom","Symbol","value","_bsontype","prototype","valueOf","toString","toJSON","module","exports"],"mappings":"AAAA;AACA,IAAIA,OAAO,GAAGC,MAAM,GAAGC,OAAO,CAAC,MAAD,CAAP,CAAgBF,OAAhB,CAAwBG,MAAxB,IAAkC,SAArC,GAAiD,SAArE;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,MAAT,CAAgBC,KAAhB,EAAuB;AACrB,MAAI,EAAE,gBAAgBD,MAAlB,CAAJ,EAA+B,OAAO,IAAIA,MAAJ,CAAWC,KAAX,CAAP;AAC/B,OAAKC,SAAL,GAAiB,QAAjB;AACA,OAAKD,KAAL,GAAaA,KAAb;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACAD,MAAM,CAACG,SAAP,CAAiBC,OAAjB,GAA2B,YAAW;AACpC,SAAO,KAAKH,KAAZ;AACD,CAFD;AAIA;AACA;AACA;;;AACAD,MAAM,CAACG,SAAP,CAAiBE,QAAjB,GAA4B,YAAW;AACrC,SAAO,KAAKJ,KAAZ;AACD,CAFD;AAIA;AACA;AACA;;;AACAD,MAAM,CAACG,SAAP,CAAiBP,OAAjB,IAA4B,YAAW;AACrC,SAAO,KAAKK,KAAZ;AACD,CAFD;AAIA;AACA;AACA;;;AACAD,MAAM,CAACG,SAAP,CAAiBG,MAAjB,GAA0B,YAAW;AACnC,SAAO,KAAKL,KAAZ;AACD,CAFD;;AAIAM,MAAM,CAACC,OAAP,GAAiBR,MAAjB;AACAO,MAAM,CAACC,OAAP,CAAeR,MAAf,GAAwBA,MAAxB","sourcesContent":["// Custom inspect property name / symbol.\r\nvar inspect = Buffer ? require('util').inspect.custom || 'inspect' : 'inspect';\r\n\r\n/**\r\n * A class representation of the BSON Symbol type.\r\n *\r\n * @class\r\n * @deprecated\r\n * @param {string} value the string representing the symbol.\r\n * @return {Symbol}\r\n */\r\nfunction Symbol(value) {\r\n  if (!(this instanceof Symbol)) return new Symbol(value);\r\n  this._bsontype = 'Symbol';\r\n  this.value = value;\r\n}\r\n\r\n/**\r\n * Access the wrapped string value.\r\n *\r\n * @method\r\n * @return {String} returns the wrapped string.\r\n */\r\nSymbol.prototype.valueOf = function() {\r\n  return this.value;\r\n};\r\n\r\n/**\r\n * @ignore\r\n */\r\nSymbol.prototype.toString = function() {\r\n  return this.value;\r\n};\r\n\r\n/**\r\n * @ignore\r\n */\r\nSymbol.prototype[inspect] = function() {\r\n  return this.value;\r\n};\r\n\r\n/**\r\n * @ignore\r\n */\r\nSymbol.prototype.toJSON = function() {\r\n  return this.value;\r\n};\r\n\r\nmodule.exports = Symbol;\r\nmodule.exports.Symbol = Symbol;\r\n"]},"metadata":{},"sourceType":"script"}