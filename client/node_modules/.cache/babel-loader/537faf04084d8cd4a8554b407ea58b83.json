{"ast":null,"code":"'use strict';\n/**\n * @ignore\n * Helper function for logging. Enabled by setting the environment flag MONGODB_CRYPT_DEBUG.\n * @param {*} msg Anything you want to be logged.\n */\n\nfunction debug(msg) {\n  if (process.env.MONGODB_CRYPT_DEBUG) {\n    console.log(msg);\n  }\n}\n/**\n * @ignore\n * Gets the database portion of a namespace string\n * @param {string} ns A string in the format of a namespace (database.collection)\n * @returns {string} The database portion of the namespace\n */\n\n\nfunction databaseNamespace(ns) {\n  return ns.split('.')[0];\n}\n/**\n * @ignore\n * Gets the colleciton portion of a namespace string\n * @param {string} ns A string in the format of a namespace (database.collection)\n * @returns {string} The collection portion of the namespace\n */\n\n\nfunction collectionNamespace(ns) {\n  return ns.split('.').slice(1).join('.');\n}\n/**\n * @class\n * An error indicating that something went wrong specifically with MongoDB Client Encryption\n */\n\n\nclass MongoCryptError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = 'MongoCryptError';\n    Error.captureStackTrace(this, this.constructor);\n  }\n\n}\n/**\n * @ignore\n * A helper function. Invokes a function that takes a callback as the final\n * parameter. If a callback is supplied, then it is passed to the function.\n * If not, a Promise is returned that resolves/rejects with the result of the\n * callback\n * @param {Function} [callback] an optional callback.\n * @param {Function} fn A function that takes a callback\n * @returns {Promise|void} Returns nothing if a callback is supplied, else returns a Promise.\n */\n\n\nfunction promiseOrCallback(callback, fn) {\n  if (typeof callback === 'function') {\n    fn(function (err) {\n      if (err != null) {\n        try {\n          callback(err);\n        } catch (error) {\n          return process.nextTick(() => {\n            throw error;\n          });\n        }\n\n        return;\n      }\n\n      callback.apply(this, arguments);\n    });\n    return;\n  }\n\n  return new Promise((resolve, reject) => {\n    fn(function (err, res) {\n      if (err != null) {\n        return reject(err);\n      }\n\n      if (arguments.length > 2) {\n        return resolve(Array.prototype.slice.call(arguments, 1));\n      }\n\n      resolve(res);\n    });\n  });\n}\n\nmodule.exports = {\n  debug,\n  databaseNamespace,\n  collectionNamespace,\n  MongoCryptError,\n  promiseOrCallback\n};","map":{"version":3,"sources":["C:/Users/Tanja Aakerholt/Documents/GitHub/portfolio2/node_modules/mongodb-client-encryption/lib/common.js"],"names":["debug","msg","process","env","MONGODB_CRYPT_DEBUG","console","log","databaseNamespace","ns","split","collectionNamespace","slice","join","MongoCryptError","Error","constructor","message","name","captureStackTrace","promiseOrCallback","callback","fn","err","error","nextTick","apply","arguments","Promise","resolve","reject","res","length","Array","prototype","call","module","exports"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;;AACA,SAASA,KAAT,CAAeC,GAAf,EAAoB;AAClB,MAAIC,OAAO,CAACC,GAAR,CAAYC,mBAAhB,EAAqC;AACnCC,IAAAA,OAAO,CAACC,GAAR,CAAYL,GAAZ;AACD;AACF;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASM,iBAAT,CAA2BC,EAA3B,EAA+B;AAC7B,SAAOA,EAAE,CAACC,KAAH,CAAS,GAAT,EAAc,CAAd,CAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,mBAAT,CAA6BF,EAA7B,EAAiC;AAC/B,SAAOA,EAAE,CACNC,KADI,CACE,GADF,EAEJE,KAFI,CAEE,CAFF,EAGJC,IAHI,CAGC,GAHD,CAAP;AAID;AAED;AACA;AACA;AACA;;;AACA,MAAMC,eAAN,SAA8BC,KAA9B,CAAoC;AAClCC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB,UAAMA,OAAN;AACA,SAAKC,IAAL,GAAY,iBAAZ;AACAH,IAAAA,KAAK,CAACI,iBAAN,CAAwB,IAAxB,EAA8B,KAAKH,WAAnC;AACD;;AALiC;AAQpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASI,iBAAT,CAA2BC,QAA3B,EAAqCC,EAArC,EAAyC;AACvC,MAAI,OAAOD,QAAP,KAAoB,UAAxB,EAAoC;AAClCC,IAAAA,EAAE,CAAC,UAASC,GAAT,EAAc;AACf,UAAIA,GAAG,IAAI,IAAX,EAAiB;AACf,YAAI;AACFF,UAAAA,QAAQ,CAACE,GAAD,CAAR;AACD,SAFD,CAEE,OAAOC,KAAP,EAAc;AACd,iBAAOrB,OAAO,CAACsB,QAAR,CAAiB,MAAM;AAC5B,kBAAMD,KAAN;AACD,WAFM,CAAP;AAGD;;AACD;AACD;;AAEDH,MAAAA,QAAQ,CAACK,KAAT,CAAe,IAAf,EAAqBC,SAArB;AACD,KAbC,CAAF;AAeA;AACD;;AAED,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCR,IAAAA,EAAE,CAAC,UAASC,GAAT,EAAcQ,GAAd,EAAmB;AACpB,UAAIR,GAAG,IAAI,IAAX,EAAiB;AACf,eAAOO,MAAM,CAACP,GAAD,CAAb;AACD;;AAED,UAAII,SAAS,CAACK,MAAV,GAAmB,CAAvB,EAA0B;AACxB,eAAOH,OAAO,CAACI,KAAK,CAACC,SAAN,CAAgBtB,KAAhB,CAAsBuB,IAAtB,CAA2BR,SAA3B,EAAsC,CAAtC,CAAD,CAAd;AACD;;AAEDE,MAAAA,OAAO,CAACE,GAAD,CAAP;AACD,KAVC,CAAF;AAWD,GAZM,CAAP;AAaD;;AAEDK,MAAM,CAACC,OAAP,GAAiB;AACfpC,EAAAA,KADe;AAEfO,EAAAA,iBAFe;AAGfG,EAAAA,mBAHe;AAIfG,EAAAA,eAJe;AAKfM,EAAAA;AALe,CAAjB","sourcesContent":["'use strict';\n\n/**\n * @ignore\n * Helper function for logging. Enabled by setting the environment flag MONGODB_CRYPT_DEBUG.\n * @param {*} msg Anything you want to be logged.\n */\nfunction debug(msg) {\n  if (process.env.MONGODB_CRYPT_DEBUG) {\n    console.log(msg);\n  }\n}\n\n/**\n * @ignore\n * Gets the database portion of a namespace string\n * @param {string} ns A string in the format of a namespace (database.collection)\n * @returns {string} The database portion of the namespace\n */\nfunction databaseNamespace(ns) {\n  return ns.split('.')[0];\n}\n/**\n * @ignore\n * Gets the colleciton portion of a namespace string\n * @param {string} ns A string in the format of a namespace (database.collection)\n * @returns {string} The collection portion of the namespace\n */\nfunction collectionNamespace(ns) {\n  return ns\n    .split('.')\n    .slice(1)\n    .join('.');\n}\n\n/**\n * @class\n * An error indicating that something went wrong specifically with MongoDB Client Encryption\n */\nclass MongoCryptError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = 'MongoCryptError';\n    Error.captureStackTrace(this, this.constructor);\n  }\n}\n\n/**\n * @ignore\n * A helper function. Invokes a function that takes a callback as the final\n * parameter. If a callback is supplied, then it is passed to the function.\n * If not, a Promise is returned that resolves/rejects with the result of the\n * callback\n * @param {Function} [callback] an optional callback.\n * @param {Function} fn A function that takes a callback\n * @returns {Promise|void} Returns nothing if a callback is supplied, else returns a Promise.\n */\nfunction promiseOrCallback(callback, fn) {\n  if (typeof callback === 'function') {\n    fn(function(err) {\n      if (err != null) {\n        try {\n          callback(err);\n        } catch (error) {\n          return process.nextTick(() => {\n            throw error;\n          });\n        }\n        return;\n      }\n\n      callback.apply(this, arguments);\n    });\n\n    return;\n  }\n\n  return new Promise((resolve, reject) => {\n    fn(function(err, res) {\n      if (err != null) {\n        return reject(err);\n      }\n\n      if (arguments.length > 2) {\n        return resolve(Array.prototype.slice.call(arguments, 1));\n      }\n\n      resolve(res);\n    });\n  });\n}\n\nmodule.exports = {\n  debug,\n  databaseNamespace,\n  collectionNamespace,\n  MongoCryptError,\n  promiseOrCallback\n};\n"]},"metadata":{},"sourceType":"script"}