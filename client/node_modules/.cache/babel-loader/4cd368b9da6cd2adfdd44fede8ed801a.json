{"ast":null,"code":"'use strict';\n\nconst Explain = require('../explain').Explain;\n\nconst MongoError = require('../core/error').MongoError;\n\nconst Aspect = {\n  READ_OPERATION: Symbol('READ_OPERATION'),\n  WRITE_OPERATION: Symbol('WRITE_OPERATION'),\n  RETRYABLE: Symbol('RETRYABLE'),\n  EXECUTE_WITH_SELECTION: Symbol('EXECUTE_WITH_SELECTION'),\n  NO_INHERIT_OPTIONS: Symbol('NO_INHERIT_OPTIONS'),\n  EXPLAINABLE: Symbol('EXPLAINABLE')\n};\n/**\r\n * This class acts as a parent class for any operation and is responsible for setting this.options,\r\n * as well as setting and getting a session.\r\n * Additionally, this class implements `hasAspect`, which determines whether an operation has\r\n * a specific aspect.\r\n */\n\nclass OperationBase {\n  constructor(options) {\n    this.options = Object.assign({}, options);\n\n    if (this.hasAspect(Aspect.EXPLAINABLE)) {\n      this.explain = Explain.fromOptions(options);\n    } else if (this.options.explain !== undefined) {\n      throw new MongoError(`explain is not supported on this command`);\n    }\n  }\n\n  hasAspect(aspect) {\n    if (this.constructor.aspects == null) {\n      return false;\n    }\n\n    return this.constructor.aspects.has(aspect);\n  }\n\n  set session(session) {\n    Object.assign(this.options, {\n      session\n    });\n  }\n\n  get session() {\n    return this.options.session;\n  }\n\n  clearSession() {\n    delete this.options.session;\n  }\n\n  get canRetryRead() {\n    return true;\n  }\n\n  execute() {\n    throw new TypeError('`execute` must be implemented for OperationBase subclasses');\n  }\n\n}\n\nfunction defineAspects(operation, aspects) {\n  if (!Array.isArray(aspects) && !(aspects instanceof Set)) {\n    aspects = [aspects];\n  }\n\n  aspects = new Set(aspects);\n  Object.defineProperty(operation, 'aspects', {\n    value: aspects,\n    writable: false\n  });\n  return aspects;\n}\n\nmodule.exports = {\n  Aspect,\n  defineAspects,\n  OperationBase\n};","map":{"version":3,"sources":["C:/Users/Tanja Aakerholt/Documents/GitHub/portfolio2/client/node_modules/mongodb/lib/operations/operation.js"],"names":["Explain","require","MongoError","Aspect","READ_OPERATION","Symbol","WRITE_OPERATION","RETRYABLE","EXECUTE_WITH_SELECTION","NO_INHERIT_OPTIONS","EXPLAINABLE","OperationBase","constructor","options","Object","assign","hasAspect","explain","fromOptions","undefined","aspect","aspects","has","session","clearSession","canRetryRead","execute","TypeError","defineAspects","operation","Array","isArray","Set","defineProperty","value","writable","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,YAAD,CAAP,CAAsBD,OAAtC;;AACA,MAAME,UAAU,GAAGD,OAAO,CAAC,eAAD,CAAP,CAAyBC,UAA5C;;AAEA,MAAMC,MAAM,GAAG;AACbC,EAAAA,cAAc,EAAEC,MAAM,CAAC,gBAAD,CADT;AAEbC,EAAAA,eAAe,EAAED,MAAM,CAAC,iBAAD,CAFV;AAGbE,EAAAA,SAAS,EAAEF,MAAM,CAAC,WAAD,CAHJ;AAIbG,EAAAA,sBAAsB,EAAEH,MAAM,CAAC,wBAAD,CAJjB;AAKbI,EAAAA,kBAAkB,EAAEJ,MAAM,CAAC,oBAAD,CALb;AAMbK,EAAAA,WAAW,EAAEL,MAAM,CAAC,aAAD;AANN,CAAf;AASA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMM,aAAN,CAAoB;AAClBC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB,SAAKA,OAAL,GAAeC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBF,OAAlB,CAAf;;AAEA,QAAI,KAAKG,SAAL,CAAeb,MAAM,CAACO,WAAtB,CAAJ,EAAwC;AACtC,WAAKO,OAAL,GAAejB,OAAO,CAACkB,WAAR,CAAoBL,OAApB,CAAf;AACD,KAFD,MAEO,IAAI,KAAKA,OAAL,CAAaI,OAAb,KAAyBE,SAA7B,EAAwC;AAC7C,YAAM,IAAIjB,UAAJ,CAAgB,0CAAhB,CAAN;AACD;AACF;;AAEDc,EAAAA,SAAS,CAACI,MAAD,EAAS;AAChB,QAAI,KAAKR,WAAL,CAAiBS,OAAjB,IAA4B,IAAhC,EAAsC;AACpC,aAAO,KAAP;AACD;;AACD,WAAO,KAAKT,WAAL,CAAiBS,OAAjB,CAAyBC,GAAzB,CAA6BF,MAA7B,CAAP;AACD;;AAEU,MAAPG,OAAO,CAACA,OAAD,EAAU;AACnBT,IAAAA,MAAM,CAACC,MAAP,CAAc,KAAKF,OAAnB,EAA4B;AAAEU,MAAAA;AAAF,KAA5B;AACD;;AAEU,MAAPA,OAAO,GAAG;AACZ,WAAO,KAAKV,OAAL,CAAaU,OAApB;AACD;;AAEDC,EAAAA,YAAY,GAAG;AACb,WAAO,KAAKX,OAAL,CAAaU,OAApB;AACD;;AAEe,MAAZE,YAAY,GAAG;AACjB,WAAO,IAAP;AACD;;AAEDC,EAAAA,OAAO,GAAG;AACR,UAAM,IAAIC,SAAJ,CAAc,4DAAd,CAAN;AACD;;AApCiB;;AAuCpB,SAASC,aAAT,CAAuBC,SAAvB,EAAkCR,OAAlC,EAA2C;AACzC,MAAI,CAACS,KAAK,CAACC,OAAN,CAAcV,OAAd,CAAD,IAA2B,EAAEA,OAAO,YAAYW,GAArB,CAA/B,EAA0D;AACxDX,IAAAA,OAAO,GAAG,CAACA,OAAD,CAAV;AACD;;AACDA,EAAAA,OAAO,GAAG,IAAIW,GAAJ,CAAQX,OAAR,CAAV;AACAP,EAAAA,MAAM,CAACmB,cAAP,CAAsBJ,SAAtB,EAAiC,SAAjC,EAA4C;AAC1CK,IAAAA,KAAK,EAAEb,OADmC;AAE1Cc,IAAAA,QAAQ,EAAE;AAFgC,GAA5C;AAIA,SAAOd,OAAP;AACD;;AAEDe,MAAM,CAACC,OAAP,GAAiB;AACflC,EAAAA,MADe;AAEfyB,EAAAA,aAFe;AAGfjB,EAAAA;AAHe,CAAjB","sourcesContent":["'use strict';\r\n\r\nconst Explain = require('../explain').Explain;\r\nconst MongoError = require('../core/error').MongoError;\r\n\r\nconst Aspect = {\r\n  READ_OPERATION: Symbol('READ_OPERATION'),\r\n  WRITE_OPERATION: Symbol('WRITE_OPERATION'),\r\n  RETRYABLE: Symbol('RETRYABLE'),\r\n  EXECUTE_WITH_SELECTION: Symbol('EXECUTE_WITH_SELECTION'),\r\n  NO_INHERIT_OPTIONS: Symbol('NO_INHERIT_OPTIONS'),\r\n  EXPLAINABLE: Symbol('EXPLAINABLE')\r\n};\r\n\r\n/**\r\n * This class acts as a parent class for any operation and is responsible for setting this.options,\r\n * as well as setting and getting a session.\r\n * Additionally, this class implements `hasAspect`, which determines whether an operation has\r\n * a specific aspect.\r\n */\r\nclass OperationBase {\r\n  constructor(options) {\r\n    this.options = Object.assign({}, options);\r\n\r\n    if (this.hasAspect(Aspect.EXPLAINABLE)) {\r\n      this.explain = Explain.fromOptions(options);\r\n    } else if (this.options.explain !== undefined) {\r\n      throw new MongoError(`explain is not supported on this command`);\r\n    }\r\n  }\r\n\r\n  hasAspect(aspect) {\r\n    if (this.constructor.aspects == null) {\r\n      return false;\r\n    }\r\n    return this.constructor.aspects.has(aspect);\r\n  }\r\n\r\n  set session(session) {\r\n    Object.assign(this.options, { session });\r\n  }\r\n\r\n  get session() {\r\n    return this.options.session;\r\n  }\r\n\r\n  clearSession() {\r\n    delete this.options.session;\r\n  }\r\n\r\n  get canRetryRead() {\r\n    return true;\r\n  }\r\n\r\n  execute() {\r\n    throw new TypeError('`execute` must be implemented for OperationBase subclasses');\r\n  }\r\n}\r\n\r\nfunction defineAspects(operation, aspects) {\r\n  if (!Array.isArray(aspects) && !(aspects instanceof Set)) {\r\n    aspects = [aspects];\r\n  }\r\n  aspects = new Set(aspects);\r\n  Object.defineProperty(operation, 'aspects', {\r\n    value: aspects,\r\n    writable: false\r\n  });\r\n  return aspects;\r\n}\r\n\r\nmodule.exports = {\r\n  Aspect,\r\n  defineAspects,\r\n  OperationBase\r\n};\r\n"]},"metadata":{},"sourceType":"script"}