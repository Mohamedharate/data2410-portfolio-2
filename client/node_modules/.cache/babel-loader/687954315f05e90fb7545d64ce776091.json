{"ast":null,"code":"'use strict';\n\nconst ReadPreference = require('./core').ReadPreference;\n\nconst MongoError = require('./core').MongoError;\n\nconst Cursor = require('./cursor');\n\nconst CursorState = require('./core/cursor').CursorState;\n/**\r\n * @fileOverview The **CommandCursor** class is an internal class that embodies a\r\n * generalized cursor based on a MongoDB command allowing for iteration over the\r\n * results returned. It supports one by one document iteration, conversion to an\r\n * array or can be iterated as a Node 0.10.X or higher stream\r\n *\r\n * **CommandCursor Cannot directly be instantiated**\r\n * @example\r\n * const MongoClient = require('mongodb').MongoClient;\r\n * const test = require('assert');\r\n * // Connection url\r\n * const url = 'mongodb://localhost:27017';\r\n * // Database Name\r\n * const dbName = 'test';\r\n * // Connect using MongoClient\r\n * MongoClient.connect(url, function(err, client) {\r\n *   // Create a collection we want to drop later\r\n *   const col = client.db(dbName).collection('listCollectionsExample1');\r\n *   // Insert a bunch of documents\r\n *   col.insert([{a:1, b:1}\r\n *     , {a:2, b:2}, {a:3, b:3}\r\n *     , {a:4, b:4}], {w:1}, function(err, result) {\r\n *     test.equal(null, err);\r\n *     // List the database collections available\r\n *     db.listCollections().toArray(function(err, items) {\r\n *       test.equal(null, err);\r\n *       client.close();\r\n *     });\r\n *   });\r\n * });\r\n */\n\n/**\r\n * Namespace provided by the browser.\r\n * @external Readable\r\n */\n\n/**\r\n * Creates a new Command Cursor instance (INTERNAL TYPE, do not instantiate directly)\r\n * @class CommandCursor\r\n * @extends external:Readable\r\n * @fires CommandCursor#data\r\n * @fires CommandCursor#end\r\n * @fires CommandCursor#close\r\n * @fires CommandCursor#readable\r\n * @return {CommandCursor} an CommandCursor instance.\r\n */\n\n\nclass CommandCursor extends Cursor {\n  constructor(topology, ns, cmd, options) {\n    super(topology, ns, cmd, options);\n  }\n  /**\r\n   * Set the ReadPreference for the cursor.\r\n   * @method\r\n   * @param {(string|ReadPreference)} readPreference The new read preference for the cursor.\r\n   * @throws {MongoError}\r\n   * @return {Cursor}\r\n   */\n\n\n  setReadPreference(readPreference) {\n    if (this.s.state === CursorState.CLOSED || this.isDead()) {\n      throw MongoError.create({\n        message: 'Cursor is closed',\n        driver: true\n      });\n    }\n\n    if (this.s.state !== CursorState.INIT) {\n      throw MongoError.create({\n        message: 'cannot change cursor readPreference after cursor has been accessed',\n        driver: true\n      });\n    }\n\n    if (readPreference instanceof ReadPreference) {\n      this.options.readPreference = readPreference;\n    } else if (typeof readPreference === 'string') {\n      this.options.readPreference = new ReadPreference(readPreference);\n    } else {\n      throw new TypeError('Invalid read preference: ' + readPreference);\n    }\n\n    return this;\n  }\n  /**\r\n   * Set the batch size for the cursor.\r\n   * @method\r\n   * @param {number} value The number of documents to return per batch. See {@link https://docs.mongodb.com/manual/reference/command/find/|find command documentation}.\r\n   * @throws {MongoError}\r\n   * @return {CommandCursor}\r\n   */\n\n\n  batchSize(value) {\n    if (this.s.state === CursorState.CLOSED || this.isDead()) {\n      throw MongoError.create({\n        message: 'Cursor is closed',\n        driver: true\n      });\n    }\n\n    if (typeof value !== 'number') {\n      throw MongoError.create({\n        message: 'batchSize requires an integer',\n        driver: true\n      });\n    }\n\n    if (this.cmd.cursor) {\n      this.cmd.cursor.batchSize = value;\n    }\n\n    this.setCursorBatchSize(value);\n    return this;\n  }\n  /**\r\n   * Add a maxTimeMS stage to the aggregation pipeline\r\n   * @method\r\n   * @param {number} value The state maxTimeMS value.\r\n   * @return {CommandCursor}\r\n   */\n\n\n  maxTimeMS(value) {\n    if (this.topology.lastIsMaster().minWireVersion > 2) {\n      this.cmd.maxTimeMS = value;\n    }\n\n    return this;\n  }\n  /**\r\n   * Return the cursor logger\r\n   * @method\r\n   * @return {Logger} return the cursor logger\r\n   * @ignore\r\n   */\n\n\n  getLogger() {\n    return this.logger;\n  }\n\n} // aliases\n\n\nCommandCursor.prototype.get = CommandCursor.prototype.toArray;\n/**\r\n * CommandCursor stream data event, fired for each document in the cursor.\r\n *\r\n * @event CommandCursor#data\r\n * @type {object}\r\n */\n\n/**\r\n * CommandCursor stream end event\r\n *\r\n * @event CommandCursor#end\r\n * @type {null}\r\n */\n\n/**\r\n * CommandCursor stream close event\r\n *\r\n * @event CommandCursor#close\r\n * @type {null}\r\n */\n\n/**\r\n * CommandCursor stream readable event\r\n *\r\n * @event CommandCursor#readable\r\n * @type {null}\r\n */\n\n/**\r\n * Get the next available document from the cursor, returns null if no more documents are available.\r\n * @function CommandCursor.prototype.next\r\n * @param {CommandCursor~resultCallback} [callback] The result callback.\r\n * @throws {MongoError}\r\n * @return {Promise} returns Promise if no callback passed\r\n */\n\n/**\r\n * Check if there is any document still available in the cursor\r\n * @function CommandCursor.prototype.hasNext\r\n * @param {CommandCursor~resultCallback} [callback] The result callback.\r\n * @throws {MongoError}\r\n * @return {Promise} returns Promise if no callback passed\r\n */\n\n/**\r\n * The callback format for results\r\n * @callback CommandCursor~toArrayResultCallback\r\n * @param {MongoError} error An error instance representing the error during the execution.\r\n * @param {object[]} documents All the documents the satisfy the cursor.\r\n */\n\n/**\r\n * Returns an array of documents. The caller is responsible for making sure that there\r\n * is enough memory to store the results. Note that the array only contain partial\r\n * results when this cursor had been previously accessed.\r\n * @method CommandCursor.prototype.toArray\r\n * @param {CommandCursor~toArrayResultCallback} [callback] The result callback.\r\n * @throws {MongoError}\r\n * @return {Promise} returns Promise if no callback passed\r\n */\n\n/**\r\n * The callback format for results\r\n * @callback CommandCursor~resultCallback\r\n * @param {MongoError} error An error instance representing the error during the execution.\r\n * @param {(object|null)} result The result object if the command was executed successfully.\r\n */\n\n/**\r\n * Iterates over all the documents for this cursor. As with **{cursor.toArray}**,\r\n * not all of the elements will be iterated if this cursor had been previously accessed.\r\n * In that case, **{cursor.rewind}** can be used to reset the cursor. However, unlike\r\n * **{cursor.toArray}**, the cursor will only hold a maximum of batch size elements\r\n * at any given time if batch size is specified. Otherwise, the caller is responsible\r\n * for making sure that the entire result can fit the memory.\r\n * @method CommandCursor.prototype.each\r\n * @param {CommandCursor~resultCallback} callback The result callback.\r\n * @throws {MongoError}\r\n * @return {null}\r\n */\n\n/**\r\n * Close the cursor, sending a KillCursor command and emitting close.\r\n * @method CommandCursor.prototype.close\r\n * @param {CommandCursor~resultCallback} [callback] The result callback.\r\n * @return {Promise} returns Promise if no callback passed\r\n */\n\n/**\r\n * Is the cursor closed\r\n * @method CommandCursor.prototype.isClosed\r\n * @return {boolean}\r\n */\n\n/**\r\n * Clone the cursor\r\n * @function CommandCursor.prototype.clone\r\n * @return {CommandCursor}\r\n */\n\n/**\r\n * Resets the cursor\r\n * @function CommandCursor.prototype.rewind\r\n * @return {CommandCursor}\r\n */\n\n/**\r\n * The callback format for the forEach iterator method\r\n * @callback CommandCursor~iteratorCallback\r\n * @param {Object} doc An emitted document for the iterator\r\n */\n\n/**\r\n * The callback error format for the forEach iterator method\r\n * @callback CommandCursor~endCallback\r\n * @param {MongoError} error An error instance representing the error during the execution.\r\n */\n\n/*\r\n * Iterates over all the documents for this cursor using the iterator, callback pattern.\r\n * @method CommandCursor.prototype.forEach\r\n * @param {CommandCursor~iteratorCallback} iterator The iteration callback.\r\n * @param {CommandCursor~endCallback} callback The end callback.\r\n * @throws {MongoError}\r\n * @return {null}\r\n */\n\nmodule.exports = CommandCursor;","map":{"version":3,"sources":["C:/Users/Tanja Aakerholt/Documents/GitHub/portfolio2/client/node_modules/mongodb/lib/command_cursor.js"],"names":["ReadPreference","require","MongoError","Cursor","CursorState","CommandCursor","constructor","topology","ns","cmd","options","setReadPreference","readPreference","s","state","CLOSED","isDead","create","message","driver","INIT","TypeError","batchSize","value","cursor","setCursorBatchSize","maxTimeMS","lastIsMaster","minWireVersion","getLogger","logger","prototype","get","toArray","module","exports"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nconst ReadPreference = require('./core').ReadPreference;\r\nconst MongoError = require('./core').MongoError;\r\nconst Cursor = require('./cursor');\r\nconst CursorState = require('./core/cursor').CursorState;\r\n\r\n/**\r\n * @fileOverview The **CommandCursor** class is an internal class that embodies a\r\n * generalized cursor based on a MongoDB command allowing for iteration over the\r\n * results returned. It supports one by one document iteration, conversion to an\r\n * array or can be iterated as a Node 0.10.X or higher stream\r\n *\r\n * **CommandCursor Cannot directly be instantiated**\r\n * @example\r\n * const MongoClient = require('mongodb').MongoClient;\r\n * const test = require('assert');\r\n * // Connection url\r\n * const url = 'mongodb://localhost:27017';\r\n * // Database Name\r\n * const dbName = 'test';\r\n * // Connect using MongoClient\r\n * MongoClient.connect(url, function(err, client) {\r\n *   // Create a collection we want to drop later\r\n *   const col = client.db(dbName).collection('listCollectionsExample1');\r\n *   // Insert a bunch of documents\r\n *   col.insert([{a:1, b:1}\r\n *     , {a:2, b:2}, {a:3, b:3}\r\n *     , {a:4, b:4}], {w:1}, function(err, result) {\r\n *     test.equal(null, err);\r\n *     // List the database collections available\r\n *     db.listCollections().toArray(function(err, items) {\r\n *       test.equal(null, err);\r\n *       client.close();\r\n *     });\r\n *   });\r\n * });\r\n */\r\n\r\n/**\r\n * Namespace provided by the browser.\r\n * @external Readable\r\n */\r\n\r\n/**\r\n * Creates a new Command Cursor instance (INTERNAL TYPE, do not instantiate directly)\r\n * @class CommandCursor\r\n * @extends external:Readable\r\n * @fires CommandCursor#data\r\n * @fires CommandCursor#end\r\n * @fires CommandCursor#close\r\n * @fires CommandCursor#readable\r\n * @return {CommandCursor} an CommandCursor instance.\r\n */\r\nclass CommandCursor extends Cursor {\r\n  constructor(topology, ns, cmd, options) {\r\n    super(topology, ns, cmd, options);\r\n  }\r\n\r\n  /**\r\n   * Set the ReadPreference for the cursor.\r\n   * @method\r\n   * @param {(string|ReadPreference)} readPreference The new read preference for the cursor.\r\n   * @throws {MongoError}\r\n   * @return {Cursor}\r\n   */\r\n  setReadPreference(readPreference) {\r\n    if (this.s.state === CursorState.CLOSED || this.isDead()) {\r\n      throw MongoError.create({ message: 'Cursor is closed', driver: true });\r\n    }\r\n\r\n    if (this.s.state !== CursorState.INIT) {\r\n      throw MongoError.create({\r\n        message: 'cannot change cursor readPreference after cursor has been accessed',\r\n        driver: true\r\n      });\r\n    }\r\n\r\n    if (readPreference instanceof ReadPreference) {\r\n      this.options.readPreference = readPreference;\r\n    } else if (typeof readPreference === 'string') {\r\n      this.options.readPreference = new ReadPreference(readPreference);\r\n    } else {\r\n      throw new TypeError('Invalid read preference: ' + readPreference);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set the batch size for the cursor.\r\n   * @method\r\n   * @param {number} value The number of documents to return per batch. See {@link https://docs.mongodb.com/manual/reference/command/find/|find command documentation}.\r\n   * @throws {MongoError}\r\n   * @return {CommandCursor}\r\n   */\r\n  batchSize(value) {\r\n    if (this.s.state === CursorState.CLOSED || this.isDead()) {\r\n      throw MongoError.create({ message: 'Cursor is closed', driver: true });\r\n    }\r\n\r\n    if (typeof value !== 'number') {\r\n      throw MongoError.create({ message: 'batchSize requires an integer', driver: true });\r\n    }\r\n\r\n    if (this.cmd.cursor) {\r\n      this.cmd.cursor.batchSize = value;\r\n    }\r\n\r\n    this.setCursorBatchSize(value);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Add a maxTimeMS stage to the aggregation pipeline\r\n   * @method\r\n   * @param {number} value The state maxTimeMS value.\r\n   * @return {CommandCursor}\r\n   */\r\n  maxTimeMS(value) {\r\n    if (this.topology.lastIsMaster().minWireVersion > 2) {\r\n      this.cmd.maxTimeMS = value;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Return the cursor logger\r\n   * @method\r\n   * @return {Logger} return the cursor logger\r\n   * @ignore\r\n   */\r\n  getLogger() {\r\n    return this.logger;\r\n  }\r\n}\r\n\r\n// aliases\r\nCommandCursor.prototype.get = CommandCursor.prototype.toArray;\r\n\r\n/**\r\n * CommandCursor stream data event, fired for each document in the cursor.\r\n *\r\n * @event CommandCursor#data\r\n * @type {object}\r\n */\r\n\r\n/**\r\n * CommandCursor stream end event\r\n *\r\n * @event CommandCursor#end\r\n * @type {null}\r\n */\r\n\r\n/**\r\n * CommandCursor stream close event\r\n *\r\n * @event CommandCursor#close\r\n * @type {null}\r\n */\r\n\r\n/**\r\n * CommandCursor stream readable event\r\n *\r\n * @event CommandCursor#readable\r\n * @type {null}\r\n */\r\n\r\n/**\r\n * Get the next available document from the cursor, returns null if no more documents are available.\r\n * @function CommandCursor.prototype.next\r\n * @param {CommandCursor~resultCallback} [callback] The result callback.\r\n * @throws {MongoError}\r\n * @return {Promise} returns Promise if no callback passed\r\n */\r\n\r\n/**\r\n * Check if there is any document still available in the cursor\r\n * @function CommandCursor.prototype.hasNext\r\n * @param {CommandCursor~resultCallback} [callback] The result callback.\r\n * @throws {MongoError}\r\n * @return {Promise} returns Promise if no callback passed\r\n */\r\n\r\n/**\r\n * The callback format for results\r\n * @callback CommandCursor~toArrayResultCallback\r\n * @param {MongoError} error An error instance representing the error during the execution.\r\n * @param {object[]} documents All the documents the satisfy the cursor.\r\n */\r\n\r\n/**\r\n * Returns an array of documents. The caller is responsible for making sure that there\r\n * is enough memory to store the results. Note that the array only contain partial\r\n * results when this cursor had been previously accessed.\r\n * @method CommandCursor.prototype.toArray\r\n * @param {CommandCursor~toArrayResultCallback} [callback] The result callback.\r\n * @throws {MongoError}\r\n * @return {Promise} returns Promise if no callback passed\r\n */\r\n\r\n/**\r\n * The callback format for results\r\n * @callback CommandCursor~resultCallback\r\n * @param {MongoError} error An error instance representing the error during the execution.\r\n * @param {(object|null)} result The result object if the command was executed successfully.\r\n */\r\n\r\n/**\r\n * Iterates over all the documents for this cursor. As with **{cursor.toArray}**,\r\n * not all of the elements will be iterated if this cursor had been previously accessed.\r\n * In that case, **{cursor.rewind}** can be used to reset the cursor. However, unlike\r\n * **{cursor.toArray}**, the cursor will only hold a maximum of batch size elements\r\n * at any given time if batch size is specified. Otherwise, the caller is responsible\r\n * for making sure that the entire result can fit the memory.\r\n * @method CommandCursor.prototype.each\r\n * @param {CommandCursor~resultCallback} callback The result callback.\r\n * @throws {MongoError}\r\n * @return {null}\r\n */\r\n\r\n/**\r\n * Close the cursor, sending a KillCursor command and emitting close.\r\n * @method CommandCursor.prototype.close\r\n * @param {CommandCursor~resultCallback} [callback] The result callback.\r\n * @return {Promise} returns Promise if no callback passed\r\n */\r\n\r\n/**\r\n * Is the cursor closed\r\n * @method CommandCursor.prototype.isClosed\r\n * @return {boolean}\r\n */\r\n\r\n/**\r\n * Clone the cursor\r\n * @function CommandCursor.prototype.clone\r\n * @return {CommandCursor}\r\n */\r\n\r\n/**\r\n * Resets the cursor\r\n * @function CommandCursor.prototype.rewind\r\n * @return {CommandCursor}\r\n */\r\n\r\n/**\r\n * The callback format for the forEach iterator method\r\n * @callback CommandCursor~iteratorCallback\r\n * @param {Object} doc An emitted document for the iterator\r\n */\r\n\r\n/**\r\n * The callback error format for the forEach iterator method\r\n * @callback CommandCursor~endCallback\r\n * @param {MongoError} error An error instance representing the error during the execution.\r\n */\r\n\r\n/*\r\n * Iterates over all the documents for this cursor using the iterator, callback pattern.\r\n * @method CommandCursor.prototype.forEach\r\n * @param {CommandCursor~iteratorCallback} iterator The iteration callback.\r\n * @param {CommandCursor~endCallback} callback The end callback.\r\n * @throws {MongoError}\r\n * @return {null}\r\n */\r\n\r\nmodule.exports = CommandCursor;\r\n"]},"metadata":{},"sourceType":"script"}