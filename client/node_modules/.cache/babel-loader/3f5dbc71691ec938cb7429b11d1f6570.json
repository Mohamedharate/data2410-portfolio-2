{"ast":null,"code":"'use strict';\n/**\r\n * Normalizes our expected stringified form of a function across versions of node\r\n * @param {Function} fn The function to stringify\r\n */\n\nfunction normalizedFunctionString(fn) {\n  return fn.toString().replace(/function *\\(/, 'function (');\n}\n\nfunction newBuffer(item, encoding) {\n  return new Buffer(item, encoding);\n}\n\nfunction allocBuffer() {\n  return Buffer.alloc.apply(Buffer, arguments);\n}\n\nfunction toBuffer() {\n  return Buffer.from.apply(Buffer, arguments);\n}\n\nmodule.exports = {\n  normalizedFunctionString: normalizedFunctionString,\n  allocBuffer: typeof Buffer.alloc === 'function' ? allocBuffer : newBuffer,\n  toBuffer: typeof Buffer.from === 'function' ? toBuffer : newBuffer\n};","map":{"version":3,"sources":["C:/Users/Tanja Aakerholt/Documents/GitHub/portfolio2/client/node_modules/bson/lib/bson/parser/utils.js"],"names":["normalizedFunctionString","fn","toString","replace","newBuffer","item","encoding","Buffer","allocBuffer","alloc","apply","arguments","toBuffer","from","module","exports"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;;AACA,SAASA,wBAAT,CAAkCC,EAAlC,EAAsC;AACpC,SAAOA,EAAE,CAACC,QAAH,GAAcC,OAAd,CAAsB,cAAtB,EAAsC,YAAtC,CAAP;AACD;;AAED,SAASC,SAAT,CAAmBC,IAAnB,EAAyBC,QAAzB,EAAmC;AACjC,SAAO,IAAIC,MAAJ,CAAWF,IAAX,EAAiBC,QAAjB,CAAP;AACD;;AAED,SAASE,WAAT,GAAuB;AACrB,SAAOD,MAAM,CAACE,KAAP,CAAaC,KAAb,CAAmBH,MAAnB,EAA2BI,SAA3B,CAAP;AACD;;AAED,SAASC,QAAT,GAAoB;AAClB,SAAOL,MAAM,CAACM,IAAP,CAAYH,KAAZ,CAAkBH,MAAlB,EAA0BI,SAA1B,CAAP;AACD;;AAEDG,MAAM,CAACC,OAAP,GAAiB;AACff,EAAAA,wBAAwB,EAAEA,wBADX;AAEfQ,EAAAA,WAAW,EAAE,OAAOD,MAAM,CAACE,KAAd,KAAwB,UAAxB,GAAqCD,WAArC,GAAmDJ,SAFjD;AAGfQ,EAAAA,QAAQ,EAAE,OAAOL,MAAM,CAACM,IAAd,KAAuB,UAAvB,GAAoCD,QAApC,GAA+CR;AAH1C,CAAjB","sourcesContent":["'use strict';\r\n\r\n/**\r\n * Normalizes our expected stringified form of a function across versions of node\r\n * @param {Function} fn The function to stringify\r\n */\r\nfunction normalizedFunctionString(fn) {\r\n  return fn.toString().replace(/function *\\(/, 'function (');\r\n}\r\n\r\nfunction newBuffer(item, encoding) {\r\n  return new Buffer(item, encoding);\r\n}\r\n\r\nfunction allocBuffer() {\r\n  return Buffer.alloc.apply(Buffer, arguments);\r\n}\r\n\r\nfunction toBuffer() {\r\n  return Buffer.from.apply(Buffer, arguments);\r\n}\r\n\r\nmodule.exports = {\r\n  normalizedFunctionString: normalizedFunctionString,\r\n  allocBuffer: typeof Buffer.alloc === 'function' ? allocBuffer : newBuffer,\r\n  toBuffer: typeof Buffer.from === 'function' ? toBuffer : newBuffer\r\n};\r\n\r\n"]},"metadata":{},"sourceType":"script"}