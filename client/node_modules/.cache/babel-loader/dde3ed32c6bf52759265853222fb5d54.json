{"ast":null,"code":"'use strict';\n/*!\r\n * Module dependencies.\r\n */\n\nconst EventEmitter = require('events').EventEmitter;\n\nconst STATES = require('./connectionstate');\n\nconst immediate = require('./helpers/immediate');\n/**\r\n * Abstract Collection constructor\r\n *\r\n * This is the base class that drivers inherit from and implement.\r\n *\r\n * @param {String} name name of the collection\r\n * @param {Connection} conn A MongooseConnection instance\r\n * @param {Object} opts optional collection options\r\n * @api public\r\n */\n\n\nfunction Collection(name, conn, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n\n  if (opts.capped === void 0) {\n    opts.capped = {};\n  }\n\n  if (typeof opts.capped === 'number') {\n    opts.capped = {\n      size: opts.capped\n    };\n  }\n\n  this.opts = opts;\n  this.name = name;\n  this.collectionName = name;\n  this.conn = conn;\n  this.queue = [];\n  this.buffer = true;\n  this.emitter = new EventEmitter();\n\n  if (STATES.connected === this.conn.readyState) {\n    this.onOpen();\n  }\n}\n/**\r\n * The collection name\r\n *\r\n * @api public\r\n * @property name\r\n */\n\n\nCollection.prototype.name;\n/**\r\n * The collection name\r\n *\r\n * @api public\r\n * @property collectionName\r\n */\n\nCollection.prototype.collectionName;\n/**\r\n * The Connection instance\r\n *\r\n * @api public\r\n * @property conn\r\n */\n\nCollection.prototype.conn;\n/**\r\n * Called when the database connects\r\n *\r\n * @api private\r\n */\n\nCollection.prototype.onOpen = function () {\n  this.buffer = false;\n  immediate(() => this.doQueue());\n};\n/**\r\n * Called when the database disconnects\r\n *\r\n * @api private\r\n */\n\n\nCollection.prototype.onClose = function (force) {\n  if (this._shouldBufferCommands() && !force) {\n    this.buffer = true;\n  }\n};\n/**\r\n * Queues a method for later execution when its\r\n * database connection opens.\r\n *\r\n * @param {String} name name of the method to queue\r\n * @param {Array} args arguments to pass to the method when executed\r\n * @api private\r\n */\n\n\nCollection.prototype.addQueue = function (name, args) {\n  this.queue.push([name, args]);\n  return this;\n};\n/**\r\n * Removes a queued method\r\n *\r\n * @param {String} name name of the method to queue\r\n * @param {Array} args arguments to pass to the method when executed\r\n * @api private\r\n */\n\n\nCollection.prototype.removeQueue = function (name, args) {\n  const index = this.queue.findIndex(v => v[0] === name && v[1] === args);\n\n  if (index === -1) {\n    return false;\n  }\n\n  this.queue.splice(index, 1);\n  return true;\n};\n/**\r\n * Executes all queued methods and clears the queue.\r\n *\r\n * @api private\r\n */\n\n\nCollection.prototype.doQueue = function () {\n  for (const method of this.queue) {\n    if (typeof method[0] === 'function') {\n      method[0].apply(this, method[1]);\n    } else {\n      this[method[0]].apply(this, method[1]);\n    }\n  }\n\n  this.queue = [];\n\n  const _this = this;\n\n  process.nextTick(function () {\n    _this.emitter.emit('queue');\n  });\n  return this;\n};\n/**\r\n * Abstract method that drivers must implement.\r\n */\n\n\nCollection.prototype.ensureIndex = function () {\n  throw new Error('Collection#ensureIndex unimplemented by driver');\n};\n/**\r\n * Abstract method that drivers must implement.\r\n */\n\n\nCollection.prototype.createIndex = function () {\n  throw new Error('Collection#createIndex unimplemented by driver');\n};\n/**\r\n * Abstract method that drivers must implement.\r\n */\n\n\nCollection.prototype.findAndModify = function () {\n  throw new Error('Collection#findAndModify unimplemented by driver');\n};\n/**\r\n * Abstract method that drivers must implement.\r\n */\n\n\nCollection.prototype.findOneAndUpdate = function () {\n  throw new Error('Collection#findOneAndUpdate unimplemented by driver');\n};\n/**\r\n * Abstract method that drivers must implement.\r\n */\n\n\nCollection.prototype.findOneAndDelete = function () {\n  throw new Error('Collection#findOneAndDelete unimplemented by driver');\n};\n/**\r\n * Abstract method that drivers must implement.\r\n */\n\n\nCollection.prototype.findOneAndReplace = function () {\n  throw new Error('Collection#findOneAndReplace unimplemented by driver');\n};\n/**\r\n * Abstract method that drivers must implement.\r\n */\n\n\nCollection.prototype.findOne = function () {\n  throw new Error('Collection#findOne unimplemented by driver');\n};\n/**\r\n * Abstract method that drivers must implement.\r\n */\n\n\nCollection.prototype.find = function () {\n  throw new Error('Collection#find unimplemented by driver');\n};\n/**\r\n * Abstract method that drivers must implement.\r\n */\n\n\nCollection.prototype.insert = function () {\n  throw new Error('Collection#insert unimplemented by driver');\n};\n/**\r\n * Abstract method that drivers must implement.\r\n */\n\n\nCollection.prototype.insertOne = function () {\n  throw new Error('Collection#insertOne unimplemented by driver');\n};\n/**\r\n * Abstract method that drivers must implement.\r\n */\n\n\nCollection.prototype.insertMany = function () {\n  throw new Error('Collection#insertMany unimplemented by driver');\n};\n/**\r\n * Abstract method that drivers must implement.\r\n */\n\n\nCollection.prototype.save = function () {\n  throw new Error('Collection#save unimplemented by driver');\n};\n/**\r\n * Abstract method that drivers must implement.\r\n */\n\n\nCollection.prototype.update = function () {\n  throw new Error('Collection#update unimplemented by driver');\n};\n/**\r\n * Abstract method that drivers must implement.\r\n */\n\n\nCollection.prototype.getIndexes = function () {\n  throw new Error('Collection#getIndexes unimplemented by driver');\n};\n/**\r\n * Abstract method that drivers must implement.\r\n */\n\n\nCollection.prototype.mapReduce = function () {\n  throw new Error('Collection#mapReduce unimplemented by driver');\n};\n/**\r\n * Abstract method that drivers must implement.\r\n */\n\n\nCollection.prototype.watch = function () {\n  throw new Error('Collection#watch unimplemented by driver');\n};\n/*!\r\n * ignore\r\n */\n\n\nCollection.prototype._shouldBufferCommands = function _shouldBufferCommands() {\n  const opts = this.opts;\n\n  if (opts.bufferCommands != null) {\n    return opts.bufferCommands;\n  }\n\n  if (opts && opts.schemaUserProvidedOptions != null && opts.schemaUserProvidedOptions.bufferCommands != null) {\n    return opts.schemaUserProvidedOptions.bufferCommands;\n  }\n\n  return this.conn._shouldBufferCommands();\n};\n/*!\r\n * ignore\r\n */\n\n\nCollection.prototype._getBufferTimeoutMS = function _getBufferTimeoutMS() {\n  const conn = this.conn;\n  const opts = this.opts;\n\n  if (opts.bufferTimeoutMS != null) {\n    return opts.bufferTimeoutMS;\n  }\n\n  if (opts && opts.schemaUserProvidedOptions != null && opts.schemaUserProvidedOptions.bufferTimeoutMS != null) {\n    return opts.schemaUserProvidedOptions.bufferTimeoutMS;\n  }\n\n  if (conn.config.bufferTimeoutMS != null) {\n    return conn.config.bufferTimeoutMS;\n  }\n\n  if (conn.base != null && conn.base.get('bufferTimeoutMS') != null) {\n    return conn.base.get('bufferTimeoutMS');\n  }\n\n  return 10000;\n};\n/*!\r\n * Module exports.\r\n */\n\n\nmodule.exports = Collection;","map":{"version":3,"sources":["C:/Users/Tanja Aakerholt/Documents/GitHub/portfolio2/client/node_modules/mongoose/lib/collection.js"],"names":["EventEmitter","require","STATES","immediate","Collection","name","conn","opts","capped","size","collectionName","queue","buffer","emitter","connected","readyState","onOpen","prototype","doQueue","onClose","force","_shouldBufferCommands","addQueue","args","push","removeQueue","index","findIndex","v","splice","method","apply","_this","process","nextTick","emit","ensureIndex","Error","createIndex","findAndModify","findOneAndUpdate","findOneAndDelete","findOneAndReplace","findOne","find","insert","insertOne","insertMany","save","update","getIndexes","mapReduce","watch","bufferCommands","schemaUserProvidedOptions","_getBufferTimeoutMS","bufferTimeoutMS","config","base","get","module","exports"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\n/*!\r\n * Module dependencies.\r\n */\r\n\r\nconst EventEmitter = require('events').EventEmitter;\r\nconst STATES = require('./connectionstate');\r\nconst immediate = require('./helpers/immediate');\r\n\r\n/**\r\n * Abstract Collection constructor\r\n *\r\n * This is the base class that drivers inherit from and implement.\r\n *\r\n * @param {String} name name of the collection\r\n * @param {Connection} conn A MongooseConnection instance\r\n * @param {Object} opts optional collection options\r\n * @api public\r\n */\r\n\r\nfunction Collection(name, conn, opts) {\r\n  if (opts === void 0) {\r\n    opts = {};\r\n  }\r\n  if (opts.capped === void 0) {\r\n    opts.capped = {};\r\n  }\r\n\r\n  if (typeof opts.capped === 'number') {\r\n    opts.capped = { size: opts.capped };\r\n  }\r\n\r\n  this.opts = opts;\r\n  this.name = name;\r\n  this.collectionName = name;\r\n  this.conn = conn;\r\n  this.queue = [];\r\n  this.buffer = true;\r\n  this.emitter = new EventEmitter();\r\n\r\n  if (STATES.connected === this.conn.readyState) {\r\n    this.onOpen();\r\n  }\r\n}\r\n\r\n/**\r\n * The collection name\r\n *\r\n * @api public\r\n * @property name\r\n */\r\n\r\nCollection.prototype.name;\r\n\r\n/**\r\n * The collection name\r\n *\r\n * @api public\r\n * @property collectionName\r\n */\r\n\r\nCollection.prototype.collectionName;\r\n\r\n/**\r\n * The Connection instance\r\n *\r\n * @api public\r\n * @property conn\r\n */\r\n\r\nCollection.prototype.conn;\r\n\r\n/**\r\n * Called when the database connects\r\n *\r\n * @api private\r\n */\r\n\r\nCollection.prototype.onOpen = function() {\r\n  this.buffer = false;\r\n  immediate(() => this.doQueue());\r\n};\r\n\r\n/**\r\n * Called when the database disconnects\r\n *\r\n * @api private\r\n */\r\n\r\nCollection.prototype.onClose = function(force) {\r\n  if (this._shouldBufferCommands() && !force) {\r\n    this.buffer = true;\r\n  }\r\n};\r\n\r\n/**\r\n * Queues a method for later execution when its\r\n * database connection opens.\r\n *\r\n * @param {String} name name of the method to queue\r\n * @param {Array} args arguments to pass to the method when executed\r\n * @api private\r\n */\r\n\r\nCollection.prototype.addQueue = function(name, args) {\r\n  this.queue.push([name, args]);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Removes a queued method\r\n *\r\n * @param {String} name name of the method to queue\r\n * @param {Array} args arguments to pass to the method when executed\r\n * @api private\r\n */\r\n\r\nCollection.prototype.removeQueue = function(name, args) {\r\n  const index = this.queue.findIndex(v => v[0] === name && v[1] === args);\r\n  if (index === -1) {\r\n    return false;\r\n  }\r\n  this.queue.splice(index, 1);\r\n  return true;\r\n};\r\n\r\n/**\r\n * Executes all queued methods and clears the queue.\r\n *\r\n * @api private\r\n */\r\n\r\nCollection.prototype.doQueue = function() {\r\n  for (const method of this.queue) {\r\n    if (typeof method[0] === 'function') {\r\n      method[0].apply(this, method[1]);\r\n    } else {\r\n      this[method[0]].apply(this, method[1]);\r\n    }\r\n  }\r\n  this.queue = [];\r\n  const _this = this;\r\n  process.nextTick(function() {\r\n    _this.emitter.emit('queue');\r\n  });\r\n  return this;\r\n};\r\n\r\n/**\r\n * Abstract method that drivers must implement.\r\n */\r\n\r\nCollection.prototype.ensureIndex = function() {\r\n  throw new Error('Collection#ensureIndex unimplemented by driver');\r\n};\r\n\r\n/**\r\n * Abstract method that drivers must implement.\r\n */\r\n\r\nCollection.prototype.createIndex = function() {\r\n  throw new Error('Collection#createIndex unimplemented by driver');\r\n};\r\n\r\n/**\r\n * Abstract method that drivers must implement.\r\n */\r\n\r\nCollection.prototype.findAndModify = function() {\r\n  throw new Error('Collection#findAndModify unimplemented by driver');\r\n};\r\n\r\n/**\r\n * Abstract method that drivers must implement.\r\n */\r\n\r\nCollection.prototype.findOneAndUpdate = function() {\r\n  throw new Error('Collection#findOneAndUpdate unimplemented by driver');\r\n};\r\n\r\n/**\r\n * Abstract method that drivers must implement.\r\n */\r\n\r\nCollection.prototype.findOneAndDelete = function() {\r\n  throw new Error('Collection#findOneAndDelete unimplemented by driver');\r\n};\r\n\r\n/**\r\n * Abstract method that drivers must implement.\r\n */\r\n\r\nCollection.prototype.findOneAndReplace = function() {\r\n  throw new Error('Collection#findOneAndReplace unimplemented by driver');\r\n};\r\n\r\n/**\r\n * Abstract method that drivers must implement.\r\n */\r\n\r\nCollection.prototype.findOne = function() {\r\n  throw new Error('Collection#findOne unimplemented by driver');\r\n};\r\n\r\n/**\r\n * Abstract method that drivers must implement.\r\n */\r\n\r\nCollection.prototype.find = function() {\r\n  throw new Error('Collection#find unimplemented by driver');\r\n};\r\n\r\n/**\r\n * Abstract method that drivers must implement.\r\n */\r\n\r\nCollection.prototype.insert = function() {\r\n  throw new Error('Collection#insert unimplemented by driver');\r\n};\r\n\r\n/**\r\n * Abstract method that drivers must implement.\r\n */\r\n\r\nCollection.prototype.insertOne = function() {\r\n  throw new Error('Collection#insertOne unimplemented by driver');\r\n};\r\n\r\n/**\r\n * Abstract method that drivers must implement.\r\n */\r\n\r\nCollection.prototype.insertMany = function() {\r\n  throw new Error('Collection#insertMany unimplemented by driver');\r\n};\r\n\r\n/**\r\n * Abstract method that drivers must implement.\r\n */\r\n\r\nCollection.prototype.save = function() {\r\n  throw new Error('Collection#save unimplemented by driver');\r\n};\r\n\r\n/**\r\n * Abstract method that drivers must implement.\r\n */\r\n\r\nCollection.prototype.update = function() {\r\n  throw new Error('Collection#update unimplemented by driver');\r\n};\r\n\r\n/**\r\n * Abstract method that drivers must implement.\r\n */\r\n\r\nCollection.prototype.getIndexes = function() {\r\n  throw new Error('Collection#getIndexes unimplemented by driver');\r\n};\r\n\r\n/**\r\n * Abstract method that drivers must implement.\r\n */\r\n\r\nCollection.prototype.mapReduce = function() {\r\n  throw new Error('Collection#mapReduce unimplemented by driver');\r\n};\r\n\r\n/**\r\n * Abstract method that drivers must implement.\r\n */\r\n\r\nCollection.prototype.watch = function() {\r\n  throw new Error('Collection#watch unimplemented by driver');\r\n};\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nCollection.prototype._shouldBufferCommands = function _shouldBufferCommands() {\r\n  const opts = this.opts;\r\n\r\n  if (opts.bufferCommands != null) {\r\n    return opts.bufferCommands;\r\n  }\r\n  if (opts && opts.schemaUserProvidedOptions != null && opts.schemaUserProvidedOptions.bufferCommands != null) {\r\n    return opts.schemaUserProvidedOptions.bufferCommands;\r\n  }\r\n\r\n  return this.conn._shouldBufferCommands();\r\n};\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nCollection.prototype._getBufferTimeoutMS = function _getBufferTimeoutMS() {\r\n  const conn = this.conn;\r\n  const opts = this.opts;\r\n\r\n  if (opts.bufferTimeoutMS != null) {\r\n    return opts.bufferTimeoutMS;\r\n  }\r\n  if (opts && opts.schemaUserProvidedOptions != null && opts.schemaUserProvidedOptions.bufferTimeoutMS != null) {\r\n    return opts.schemaUserProvidedOptions.bufferTimeoutMS;\r\n  }\r\n  if (conn.config.bufferTimeoutMS != null) {\r\n    return conn.config.bufferTimeoutMS;\r\n  }\r\n  if (conn.base != null && conn.base.get('bufferTimeoutMS') != null) {\r\n    return conn.base.get('bufferTimeoutMS');\r\n  }\r\n  return 10000;\r\n};\r\n\r\n/*!\r\n * Module exports.\r\n */\r\n\r\nmodule.exports = Collection;\r\n"]},"metadata":{},"sourceType":"script"}