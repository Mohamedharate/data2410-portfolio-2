{"ast":null,"code":"'use strict';\n\nconst Topology = require('../core').Topology;\n\nconst ServerCapabilities = require('./topology_base').ServerCapabilities;\n\nconst Cursor = require('../cursor');\n\nconst translateOptions = require('../utils').translateOptions;\n\nclass NativeTopology extends Topology {\n  constructor(servers, options) {\n    options = options || {};\n    let clonedOptions = Object.assign({}, {\n      cursorFactory: Cursor,\n      reconnect: false,\n      emitError: typeof options.emitError === 'boolean' ? options.emitError : true,\n      maxPoolSize: typeof options.maxPoolSize === 'number' ? options.maxPoolSize : typeof options.poolSize === 'number' ? options.poolSize : 10,\n      minPoolSize: typeof options.minPoolSize === 'number' ? options.minPoolSize : typeof options.minSize === 'number' ? options.minSize : 0,\n      monitorCommands: typeof options.monitorCommands === 'boolean' ? options.monitorCommands : false\n    }); // Translate any SSL options and other connectivity options\n\n    clonedOptions = translateOptions(clonedOptions, options); // Socket options\n\n    var socketOptions = options.socketOptions && Object.keys(options.socketOptions).length > 0 ? options.socketOptions : options; // Translate all the options to the core types\n\n    clonedOptions = translateOptions(clonedOptions, socketOptions);\n    super(servers, clonedOptions);\n  }\n\n  capabilities() {\n    if (this.s.sCapabilities) return this.s.sCapabilities;\n    if (this.lastIsMaster() == null) return null;\n    this.s.sCapabilities = new ServerCapabilities(this.lastIsMaster());\n    return this.s.sCapabilities;\n  } // Command\n\n\n  command(ns, cmd, options, callback) {\n    super.command(ns.toString(), cmd, options, callback);\n  } // Insert\n\n\n  insert(ns, ops, options, callback) {\n    super.insert(ns.toString(), ops, options, callback);\n  } // Update\n\n\n  update(ns, ops, options, callback) {\n    super.update(ns.toString(), ops, options, callback);\n  } // Remove\n\n\n  remove(ns, ops, options, callback) {\n    super.remove(ns.toString(), ops, options, callback);\n  }\n\n}\n\nmodule.exports = NativeTopology;","map":{"version":3,"sources":["C:/Users/Tanja Aakerholt/Documents/GitHub/portfolio2/client/node_modules/mongodb/lib/topologies/native_topology.js"],"names":["Topology","require","ServerCapabilities","Cursor","translateOptions","NativeTopology","constructor","servers","options","clonedOptions","Object","assign","cursorFactory","reconnect","emitError","maxPoolSize","poolSize","minPoolSize","minSize","monitorCommands","socketOptions","keys","length","capabilities","s","sCapabilities","lastIsMaster","command","ns","cmd","callback","toString","insert","ops","update","remove","module","exports"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nconst Topology = require('../core').Topology;\r\nconst ServerCapabilities = require('./topology_base').ServerCapabilities;\r\nconst Cursor = require('../cursor');\r\nconst translateOptions = require('../utils').translateOptions;\r\n\r\nclass NativeTopology extends Topology {\r\n  constructor(servers, options) {\r\n    options = options || {};\r\n\r\n    let clonedOptions = Object.assign(\r\n      {},\r\n      {\r\n        cursorFactory: Cursor,\r\n        reconnect: false,\r\n        emitError: typeof options.emitError === 'boolean' ? options.emitError : true,\r\n        maxPoolSize:\r\n          typeof options.maxPoolSize === 'number'\r\n            ? options.maxPoolSize\r\n            : typeof options.poolSize === 'number'\r\n            ? options.poolSize\r\n            : 10,\r\n        minPoolSize:\r\n          typeof options.minPoolSize === 'number'\r\n            ? options.minPoolSize\r\n            : typeof options.minSize === 'number'\r\n            ? options.minSize\r\n            : 0,\r\n        monitorCommands:\r\n          typeof options.monitorCommands === 'boolean' ? options.monitorCommands : false\r\n      }\r\n    );\r\n\r\n    // Translate any SSL options and other connectivity options\r\n    clonedOptions = translateOptions(clonedOptions, options);\r\n\r\n    // Socket options\r\n    var socketOptions =\r\n      options.socketOptions && Object.keys(options.socketOptions).length > 0\r\n        ? options.socketOptions\r\n        : options;\r\n\r\n    // Translate all the options to the core types\r\n    clonedOptions = translateOptions(clonedOptions, socketOptions);\r\n\r\n    super(servers, clonedOptions);\r\n  }\r\n\r\n  capabilities() {\r\n    if (this.s.sCapabilities) return this.s.sCapabilities;\r\n    if (this.lastIsMaster() == null) return null;\r\n    this.s.sCapabilities = new ServerCapabilities(this.lastIsMaster());\r\n    return this.s.sCapabilities;\r\n  }\r\n\r\n  // Command\r\n  command(ns, cmd, options, callback) {\r\n    super.command(ns.toString(), cmd, options, callback);\r\n  }\r\n\r\n  // Insert\r\n  insert(ns, ops, options, callback) {\r\n    super.insert(ns.toString(), ops, options, callback);\r\n  }\r\n\r\n  // Update\r\n  update(ns, ops, options, callback) {\r\n    super.update(ns.toString(), ops, options, callback);\r\n  }\r\n\r\n  // Remove\r\n  remove(ns, ops, options, callback) {\r\n    super.remove(ns.toString(), ops, options, callback);\r\n  }\r\n}\r\n\r\nmodule.exports = NativeTopology;\r\n"]},"metadata":{},"sourceType":"script"}