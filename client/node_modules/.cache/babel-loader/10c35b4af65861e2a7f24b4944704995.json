{"ast":null,"code":"'use strict';\n\nconst emitWarningOnce = require('../../utils').emitWarningOnce;\n/**\r\n * The **ReadPreference** class is a class that represents a MongoDB ReadPreference and is\r\n * used to construct connections.\r\n * @class\r\n * @param {string} mode A string describing the read preference mode (primary|primaryPreferred|secondary|secondaryPreferred|nearest)\r\n * @param {array} tags The tags object\r\n * @param {object} [options] Additional read preference options\r\n * @param {number} [options.maxStalenessSeconds] Max secondary read staleness in seconds, Minimum value is 90 seconds.\r\n * @param {object} [options.hedge] Server mode in which the same query is dispatched in parallel to multiple replica set members.\r\n * @param {boolean} [options.hedge.enabled] Explicitly enable or disable hedged reads.\r\n * @see https://docs.mongodb.com/manual/core/read-preference/\r\n * @return {ReadPreference}\r\n */\n\n\nconst ReadPreference = function (mode, tags, options) {\n  if (!ReadPreference.isValid(mode)) {\n    throw new TypeError(`Invalid read preference mode ${mode}`);\n  } // TODO(major): tags MUST be an array of tagsets\n\n\n  if (tags && !Array.isArray(tags)) {\n    emitWarningOnce('ReadPreference tags must be an array, this will change in the next major version');\n    const tagsHasMaxStalenessSeconds = typeof tags.maxStalenessSeconds !== 'undefined';\n    const tagsHasHedge = typeof tags.hedge !== 'undefined';\n    const tagsHasOptions = tagsHasMaxStalenessSeconds || tagsHasHedge;\n\n    if (tagsHasOptions) {\n      // this is likely an options object\n      options = tags;\n      tags = undefined;\n    } else {\n      tags = [tags];\n    }\n  }\n\n  this.mode = mode;\n  this.tags = tags;\n  this.hedge = options && options.hedge;\n  options = options || {};\n\n  if (options.maxStalenessSeconds != null) {\n    if (options.maxStalenessSeconds <= 0) {\n      throw new TypeError('maxStalenessSeconds must be a positive integer');\n    }\n\n    this.maxStalenessSeconds = options.maxStalenessSeconds; // NOTE: The minimum required wire version is 5 for this read preference. If the existing\n    //       topology has a lower value then a MongoError will be thrown during server selection.\n\n    this.minWireVersion = 5;\n  }\n\n  if (this.mode === ReadPreference.PRIMARY) {\n    if (this.tags && Array.isArray(this.tags) && this.tags.length > 0) {\n      throw new TypeError('Primary read preference cannot be combined with tags');\n    }\n\n    if (this.maxStalenessSeconds) {\n      throw new TypeError('Primary read preference cannot be combined with maxStalenessSeconds');\n    }\n\n    if (this.hedge) {\n      throw new TypeError('Primary read preference cannot be combined with hedge');\n    }\n  }\n}; // Support the deprecated `preference` property introduced in the porcelain layer\n\n\nObject.defineProperty(ReadPreference.prototype, 'preference', {\n  enumerable: true,\n  get: function () {\n    return this.mode;\n  }\n});\n/*\r\n * Read preference mode constants\r\n */\n\nReadPreference.PRIMARY = 'primary';\nReadPreference.PRIMARY_PREFERRED = 'primaryPreferred';\nReadPreference.SECONDARY = 'secondary';\nReadPreference.SECONDARY_PREFERRED = 'secondaryPreferred';\nReadPreference.NEAREST = 'nearest';\nconst VALID_MODES = [ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST, null];\n/**\r\n * Construct a ReadPreference given an options object.\r\n *\r\n * @param {object} options The options object from which to extract the read preference.\r\n * @return {ReadPreference}\r\n */\n\nReadPreference.fromOptions = function (options) {\n  if (!options) return null;\n  const readPreference = options.readPreference;\n  if (!readPreference) return null;\n  const readPreferenceTags = options.readPreferenceTags;\n  const maxStalenessSeconds = options.maxStalenessSeconds;\n\n  if (typeof readPreference === 'string') {\n    return new ReadPreference(readPreference, readPreferenceTags);\n  } else if (!(readPreference instanceof ReadPreference) && typeof readPreference === 'object') {\n    const mode = readPreference.mode || readPreference.preference;\n\n    if (mode && typeof mode === 'string') {\n      return new ReadPreference(mode, readPreference.tags, {\n        maxStalenessSeconds: readPreference.maxStalenessSeconds || maxStalenessSeconds,\n        hedge: readPreference.hedge\n      });\n    }\n  }\n\n  return readPreference;\n};\n/**\r\n * Resolves a read preference based on well-defined inheritance rules. This method will not only\r\n * determine the read preference (if there is one), but will also ensure the returned value is a\r\n * properly constructed instance of `ReadPreference`.\r\n *\r\n * @param {Collection|Db|MongoClient} parent The parent of the operation on which to determine the read\r\n * preference, used for determining the inherited read preference.\r\n * @param {object} options The options passed into the method, potentially containing a read preference\r\n * @returns {(ReadPreference|null)} The resolved read preference\r\n */\n\n\nReadPreference.resolve = function (parent, options) {\n  options = options || {};\n  const session = options.session;\n  const inheritedReadPreference = parent && parent.readPreference;\n  let readPreference;\n\n  if (options.readPreference) {\n    readPreference = ReadPreference.fromOptions(options);\n  } else if (session && session.inTransaction() && session.transaction.options.readPreference) {\n    // The transactionâ€™s read preference MUST override all other user configurable read preferences.\n    readPreference = session.transaction.options.readPreference;\n  } else if (inheritedReadPreference != null) {\n    readPreference = inheritedReadPreference;\n  } else {\n    readPreference = ReadPreference.primary;\n  }\n\n  return typeof readPreference === 'string' ? new ReadPreference(readPreference) : readPreference;\n};\n/**\r\n * Replaces options.readPreference with a ReadPreference instance\r\n */\n\n\nReadPreference.translate = function (options) {\n  if (options.readPreference == null) return options;\n  const r = options.readPreference;\n\n  if (typeof r === 'string') {\n    options.readPreference = new ReadPreference(r);\n  } else if (r && !(r instanceof ReadPreference) && typeof r === 'object') {\n    const mode = r.mode || r.preference;\n\n    if (mode && typeof mode === 'string') {\n      options.readPreference = new ReadPreference(mode, r.tags, {\n        maxStalenessSeconds: r.maxStalenessSeconds\n      });\n    }\n  } else if (!(r instanceof ReadPreference)) {\n    throw new TypeError('Invalid read preference: ' + r);\n  }\n\n  return options;\n};\n/**\r\n * Validate if a mode is legal\r\n *\r\n * @method\r\n * @param {string} mode The string representing the read preference mode.\r\n * @return {boolean} True if a mode is valid\r\n */\n\n\nReadPreference.isValid = function (mode) {\n  return VALID_MODES.indexOf(mode) !== -1;\n};\n/**\r\n * Validate if a mode is legal\r\n *\r\n * @method\r\n * @param {string} mode The string representing the read preference mode.\r\n * @return {boolean} True if a mode is valid\r\n */\n\n\nReadPreference.prototype.isValid = function (mode) {\n  return ReadPreference.isValid(typeof mode === 'string' ? mode : this.mode);\n};\n\nconst needSlaveOk = ['primaryPreferred', 'secondary', 'secondaryPreferred', 'nearest'];\n/**\r\n * Indicates that this readPreference needs the \"slaveOk\" bit when sent over the wire\r\n * @method\r\n * @return {boolean}\r\n * @see https://docs.mongodb.com/manual/reference/mongodb-wire-protocol/#op-query\r\n */\n\nReadPreference.prototype.slaveOk = function () {\n  return needSlaveOk.indexOf(this.mode) !== -1;\n};\n/**\r\n * Are the two read preference equal\r\n * @method\r\n * @param {ReadPreference} readPreference The read preference with which to check equality\r\n * @return {boolean} True if the two ReadPreferences are equivalent\r\n */\n\n\nReadPreference.prototype.equals = function (readPreference) {\n  return readPreference.mode === this.mode;\n};\n/**\r\n * Return JSON representation\r\n * @method\r\n * @return {Object} A JSON representation of the ReadPreference\r\n */\n\n\nReadPreference.prototype.toJSON = function () {\n  const readPreference = {\n    mode: this.mode\n  };\n  if (Array.isArray(this.tags)) readPreference.tags = this.tags;\n  if (this.maxStalenessSeconds) readPreference.maxStalenessSeconds = this.maxStalenessSeconds;\n  if (this.hedge) readPreference.hedge = this.hedge;\n  return readPreference;\n};\n/**\r\n * Primary read preference\r\n * @member\r\n * @type {ReadPreference}\r\n */\n\n\nReadPreference.primary = new ReadPreference('primary');\n/**\r\n * Primary Preferred read preference\r\n * @member\r\n * @type {ReadPreference}\r\n */\n\nReadPreference.primaryPreferred = new ReadPreference('primaryPreferred');\n/**\r\n * Secondary read preference\r\n * @member\r\n * @type {ReadPreference}\r\n */\n\nReadPreference.secondary = new ReadPreference('secondary');\n/**\r\n * Secondary Preferred read preference\r\n * @member\r\n * @type {ReadPreference}\r\n */\n\nReadPreference.secondaryPreferred = new ReadPreference('secondaryPreferred');\n/**\r\n * Nearest read preference\r\n * @member\r\n * @type {ReadPreference}\r\n */\n\nReadPreference.nearest = new ReadPreference('nearest');\nmodule.exports = ReadPreference;","map":{"version":3,"sources":["C:/Users/Tanja Aakerholt/Documents/GitHub/portfolio2/client/node_modules/mongodb/lib/core/topologies/read_preference.js"],"names":["emitWarningOnce","require","ReadPreference","mode","tags","options","isValid","TypeError","Array","isArray","tagsHasMaxStalenessSeconds","maxStalenessSeconds","tagsHasHedge","hedge","tagsHasOptions","undefined","minWireVersion","PRIMARY","length","Object","defineProperty","prototype","enumerable","get","PRIMARY_PREFERRED","SECONDARY","SECONDARY_PREFERRED","NEAREST","VALID_MODES","fromOptions","readPreference","readPreferenceTags","preference","resolve","parent","session","inheritedReadPreference","inTransaction","transaction","primary","translate","r","indexOf","needSlaveOk","slaveOk","equals","toJSON","primaryPreferred","secondary","secondaryPreferred","nearest","module","exports"],"mappings":"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","sourcesContent":["'use strict';\r\nconst emitWarningOnce = require('../../utils').emitWarningOnce;\r\n\r\n/**\r\n * The **ReadPreference** class is a class that represents a MongoDB ReadPreference and is\r\n * used to construct connections.\r\n * @class\r\n * @param {string} mode A string describing the read preference mode (primary|primaryPreferred|secondary|secondaryPreferred|nearest)\r\n * @param {array} tags The tags object\r\n * @param {object} [options] Additional read preference options\r\n * @param {number} [options.maxStalenessSeconds] Max secondary read staleness in seconds, Minimum value is 90 seconds.\r\n * @param {object} [options.hedge] Server mode in which the same query is dispatched in parallel to multiple replica set members.\r\n * @param {boolean} [options.hedge.enabled] Explicitly enable or disable hedged reads.\r\n * @see https://docs.mongodb.com/manual/core/read-preference/\r\n * @return {ReadPreference}\r\n */\r\nconst ReadPreference = function(mode, tags, options) {\r\n  if (!ReadPreference.isValid(mode)) {\r\n    throw new TypeError(`Invalid read preference mode ${mode}`);\r\n  }\r\n\r\n  // TODO(major): tags MUST be an array of tagsets\r\n  if (tags && !Array.isArray(tags)) {\r\n    emitWarningOnce(\r\n      'ReadPreference tags must be an array, this will change in the next major version'\r\n    );\r\n\r\n    const tagsHasMaxStalenessSeconds = typeof tags.maxStalenessSeconds !== 'undefined';\r\n    const tagsHasHedge = typeof tags.hedge !== 'undefined';\r\n    const tagsHasOptions = tagsHasMaxStalenessSeconds || tagsHasHedge;\r\n    if (tagsHasOptions) {\r\n      // this is likely an options object\r\n      options = tags;\r\n      tags = undefined;\r\n    } else {\r\n      tags = [tags];\r\n    }\r\n  }\r\n\r\n  this.mode = mode;\r\n  this.tags = tags;\r\n  this.hedge = options && options.hedge;\r\n\r\n  options = options || {};\r\n  if (options.maxStalenessSeconds != null) {\r\n    if (options.maxStalenessSeconds <= 0) {\r\n      throw new TypeError('maxStalenessSeconds must be a positive integer');\r\n    }\r\n\r\n    this.maxStalenessSeconds = options.maxStalenessSeconds;\r\n\r\n    // NOTE: The minimum required wire version is 5 for this read preference. If the existing\r\n    //       topology has a lower value then a MongoError will be thrown during server selection.\r\n    this.minWireVersion = 5;\r\n  }\r\n\r\n  if (this.mode === ReadPreference.PRIMARY) {\r\n    if (this.tags && Array.isArray(this.tags) && this.tags.length > 0) {\r\n      throw new TypeError('Primary read preference cannot be combined with tags');\r\n    }\r\n\r\n    if (this.maxStalenessSeconds) {\r\n      throw new TypeError('Primary read preference cannot be combined with maxStalenessSeconds');\r\n    }\r\n\r\n    if (this.hedge) {\r\n      throw new TypeError('Primary read preference cannot be combined with hedge');\r\n    }\r\n  }\r\n};\r\n\r\n// Support the deprecated `preference` property introduced in the porcelain layer\r\nObject.defineProperty(ReadPreference.prototype, 'preference', {\r\n  enumerable: true,\r\n  get: function() {\r\n    return this.mode;\r\n  }\r\n});\r\n\r\n/*\r\n * Read preference mode constants\r\n */\r\nReadPreference.PRIMARY = 'primary';\r\nReadPreference.PRIMARY_PREFERRED = 'primaryPreferred';\r\nReadPreference.SECONDARY = 'secondary';\r\nReadPreference.SECONDARY_PREFERRED = 'secondaryPreferred';\r\nReadPreference.NEAREST = 'nearest';\r\n\r\nconst VALID_MODES = [\r\n  ReadPreference.PRIMARY,\r\n  ReadPreference.PRIMARY_PREFERRED,\r\n  ReadPreference.SECONDARY,\r\n  ReadPreference.SECONDARY_PREFERRED,\r\n  ReadPreference.NEAREST,\r\n  null\r\n];\r\n\r\n/**\r\n * Construct a ReadPreference given an options object.\r\n *\r\n * @param {object} options The options object from which to extract the read preference.\r\n * @return {ReadPreference}\r\n */\r\nReadPreference.fromOptions = function(options) {\r\n  if (!options) return null;\r\n  const readPreference = options.readPreference;\r\n  if (!readPreference) return null;\r\n  const readPreferenceTags = options.readPreferenceTags;\r\n  const maxStalenessSeconds = options.maxStalenessSeconds;\r\n  if (typeof readPreference === 'string') {\r\n    return new ReadPreference(readPreference, readPreferenceTags);\r\n  } else if (!(readPreference instanceof ReadPreference) && typeof readPreference === 'object') {\r\n    const mode = readPreference.mode || readPreference.preference;\r\n    if (mode && typeof mode === 'string') {\r\n      return new ReadPreference(mode, readPreference.tags, {\r\n        maxStalenessSeconds: readPreference.maxStalenessSeconds || maxStalenessSeconds,\r\n        hedge: readPreference.hedge\r\n      });\r\n    }\r\n  }\r\n\r\n  return readPreference;\r\n};\r\n\r\n/**\r\n * Resolves a read preference based on well-defined inheritance rules. This method will not only\r\n * determine the read preference (if there is one), but will also ensure the returned value is a\r\n * properly constructed instance of `ReadPreference`.\r\n *\r\n * @param {Collection|Db|MongoClient} parent The parent of the operation on which to determine the read\r\n * preference, used for determining the inherited read preference.\r\n * @param {object} options The options passed into the method, potentially containing a read preference\r\n * @returns {(ReadPreference|null)} The resolved read preference\r\n */\r\nReadPreference.resolve = function(parent, options) {\r\n  options = options || {};\r\n  const session = options.session;\r\n\r\n  const inheritedReadPreference = parent && parent.readPreference;\r\n\r\n  let readPreference;\r\n  if (options.readPreference) {\r\n    readPreference = ReadPreference.fromOptions(options);\r\n  } else if (session && session.inTransaction() && session.transaction.options.readPreference) {\r\n    // The transactionâ€™s read preference MUST override all other user configurable read preferences.\r\n    readPreference = session.transaction.options.readPreference;\r\n  } else if (inheritedReadPreference != null) {\r\n    readPreference = inheritedReadPreference;\r\n  } else {\r\n    readPreference = ReadPreference.primary;\r\n  }\r\n\r\n  return typeof readPreference === 'string' ? new ReadPreference(readPreference) : readPreference;\r\n};\r\n\r\n/**\r\n * Replaces options.readPreference with a ReadPreference instance\r\n */\r\nReadPreference.translate = function(options) {\r\n  if (options.readPreference == null) return options;\r\n  const r = options.readPreference;\r\n\r\n  if (typeof r === 'string') {\r\n    options.readPreference = new ReadPreference(r);\r\n  } else if (r && !(r instanceof ReadPreference) && typeof r === 'object') {\r\n    const mode = r.mode || r.preference;\r\n    if (mode && typeof mode === 'string') {\r\n      options.readPreference = new ReadPreference(mode, r.tags, {\r\n        maxStalenessSeconds: r.maxStalenessSeconds\r\n      });\r\n    }\r\n  } else if (!(r instanceof ReadPreference)) {\r\n    throw new TypeError('Invalid read preference: ' + r);\r\n  }\r\n\r\n  return options;\r\n};\r\n\r\n/**\r\n * Validate if a mode is legal\r\n *\r\n * @method\r\n * @param {string} mode The string representing the read preference mode.\r\n * @return {boolean} True if a mode is valid\r\n */\r\nReadPreference.isValid = function(mode) {\r\n  return VALID_MODES.indexOf(mode) !== -1;\r\n};\r\n\r\n/**\r\n * Validate if a mode is legal\r\n *\r\n * @method\r\n * @param {string} mode The string representing the read preference mode.\r\n * @return {boolean} True if a mode is valid\r\n */\r\nReadPreference.prototype.isValid = function(mode) {\r\n  return ReadPreference.isValid(typeof mode === 'string' ? mode : this.mode);\r\n};\r\n\r\nconst needSlaveOk = ['primaryPreferred', 'secondary', 'secondaryPreferred', 'nearest'];\r\n\r\n/**\r\n * Indicates that this readPreference needs the \"slaveOk\" bit when sent over the wire\r\n * @method\r\n * @return {boolean}\r\n * @see https://docs.mongodb.com/manual/reference/mongodb-wire-protocol/#op-query\r\n */\r\nReadPreference.prototype.slaveOk = function() {\r\n  return needSlaveOk.indexOf(this.mode) !== -1;\r\n};\r\n\r\n/**\r\n * Are the two read preference equal\r\n * @method\r\n * @param {ReadPreference} readPreference The read preference with which to check equality\r\n * @return {boolean} True if the two ReadPreferences are equivalent\r\n */\r\nReadPreference.prototype.equals = function(readPreference) {\r\n  return readPreference.mode === this.mode;\r\n};\r\n\r\n/**\r\n * Return JSON representation\r\n * @method\r\n * @return {Object} A JSON representation of the ReadPreference\r\n */\r\nReadPreference.prototype.toJSON = function() {\r\n  const readPreference = { mode: this.mode };\r\n  if (Array.isArray(this.tags)) readPreference.tags = this.tags;\r\n  if (this.maxStalenessSeconds) readPreference.maxStalenessSeconds = this.maxStalenessSeconds;\r\n  if (this.hedge) readPreference.hedge = this.hedge;\r\n  return readPreference;\r\n};\r\n\r\n/**\r\n * Primary read preference\r\n * @member\r\n * @type {ReadPreference}\r\n */\r\nReadPreference.primary = new ReadPreference('primary');\r\n/**\r\n * Primary Preferred read preference\r\n * @member\r\n * @type {ReadPreference}\r\n */\r\nReadPreference.primaryPreferred = new ReadPreference('primaryPreferred');\r\n/**\r\n * Secondary read preference\r\n * @member\r\n * @type {ReadPreference}\r\n */\r\nReadPreference.secondary = new ReadPreference('secondary');\r\n/**\r\n * Secondary Preferred read preference\r\n * @member\r\n * @type {ReadPreference}\r\n */\r\nReadPreference.secondaryPreferred = new ReadPreference('secondaryPreferred');\r\n/**\r\n * Nearest read preference\r\n * @member\r\n * @type {ReadPreference}\r\n */\r\nReadPreference.nearest = new ReadPreference('nearest');\r\n\r\nmodule.exports = ReadPreference;\r\n"]},"metadata":{},"sourceType":"script"}