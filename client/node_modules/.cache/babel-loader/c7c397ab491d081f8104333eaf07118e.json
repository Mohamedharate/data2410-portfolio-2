{"ast":null,"code":"'use strict';\n\nconst URL = require('url');\n\nconst qs = require('querystring');\n\nconst dns = require('dns');\n\nconst MongoParseError = require('./error').MongoParseError;\n\nconst ReadPreference = require('./topologies/read_preference');\n\nconst emitWarningOnce = require('../utils').emitWarningOnce;\n/**\r\n * The following regular expression validates a connection string and breaks the\r\n * provide string into the following capture groups: [protocol, username, password, hosts]\r\n */\n\n\nconst HOSTS_RX = /(mongodb(?:\\+srv|)):\\/\\/(?: (?:[^:]*) (?: : ([^@]*) )? @ )?([^/?]*)(?:\\/|)(.*)/; // Options that reference file paths should not be parsed\n\nconst FILE_PATH_OPTIONS = new Set(['sslCA', 'sslCert', 'sslKey', 'tlsCAFile', 'tlsCertificateKeyFile'].map(key => key.toLowerCase()));\n/**\r\n * Determines whether a provided address matches the provided parent domain in order\r\n * to avoid certain attack vectors.\r\n *\r\n * @param {String} srvAddress The address to check against a domain\r\n * @param {String} parentDomain The domain to check the provided address against\r\n * @return {Boolean} Whether the provided address matches the parent domain\r\n */\n\nfunction matchesParentDomain(srvAddress, parentDomain) {\n  const regex = /^.*?\\./;\n  const srv = `.${srvAddress.replace(regex, '')}`;\n  const parent = `.${parentDomain.replace(regex, '')}`;\n  return srv.endsWith(parent);\n}\n/**\r\n * Lookup a `mongodb+srv` connection string, combine the parts and reparse it as a normal\r\n * connection string.\r\n *\r\n * @param {string} uri The connection string to parse\r\n * @param {object} options Optional user provided connection string options\r\n * @param {function} callback\r\n */\n\n\nfunction parseSrvConnectionString(uri, options, callback) {\n  const result = URL.parse(uri, true);\n\n  if (options.directConnection || options.directconnection) {\n    return callback(new MongoParseError('directConnection not supported with SRV URI'));\n  }\n\n  if (result.hostname.split('.').length < 3) {\n    return callback(new MongoParseError('URI does not have hostname, domain name and tld'));\n  }\n\n  result.domainLength = result.hostname.split('.').length;\n\n  if (result.pathname && result.pathname.match(',')) {\n    return callback(new MongoParseError('Invalid URI, cannot contain multiple hostnames'));\n  }\n\n  if (result.port) {\n    return callback(new MongoParseError(`Ports not accepted with '${PROTOCOL_MONGODB_SRV}' URIs`));\n  } // Resolve the SRV record and use the result as the list of hosts to connect to.\n\n\n  const lookupAddress = result.host;\n  dns.resolveSrv(`_mongodb._tcp.${lookupAddress}`, (err, addresses) => {\n    if (err) return callback(err);\n\n    if (addresses.length === 0) {\n      return callback(new MongoParseError('No addresses found at host'));\n    }\n\n    for (let i = 0; i < addresses.length; i++) {\n      if (!matchesParentDomain(addresses[i].name, result.hostname, result.domainLength)) {\n        return callback(new MongoParseError('Server record does not share hostname with parent URI'));\n      }\n    } // Convert the original URL to a non-SRV URL.\n\n\n    result.protocol = 'mongodb';\n    result.host = addresses.map(address => `${address.name}:${address.port}`).join(','); // Default to SSL true if it's not specified.\n\n    if (!('ssl' in options) && (!result.search || !('ssl' in result.query) || result.query.ssl === null)) {\n      result.query.ssl = true;\n    } // Resolve TXT record and add options from there if they exist.\n\n\n    dns.resolveTxt(lookupAddress, (err, record) => {\n      if (err) {\n        if (err.code !== 'ENODATA' && err.code !== 'ENOTFOUND') {\n          return callback(err);\n        }\n\n        record = null;\n      }\n\n      if (record) {\n        if (record.length > 1) {\n          return callback(new MongoParseError('Multiple text records not allowed'));\n        }\n\n        record = qs.parse(record[0].join(''));\n\n        if (Object.keys(record).some(key => key !== 'authSource' && key !== 'replicaSet')) {\n          return callback(new MongoParseError('Text record must only set `authSource` or `replicaSet`'));\n        }\n\n        result.query = Object.assign({}, record, result.query);\n      } // Set completed options back into the URL object.\n\n\n      result.search = qs.stringify(result.query);\n      const finalString = URL.format(result);\n      parseConnectionString(finalString, options, (err, ret) => {\n        if (err) {\n          callback(err);\n          return;\n        }\n\n        callback(null, Object.assign({}, ret, {\n          srvHost: lookupAddress\n        }));\n      });\n    });\n  });\n}\n/**\r\n * Parses a query string item according to the connection string spec\r\n *\r\n * @param {string} key The key for the parsed value\r\n * @param {Array|String} value The value to parse\r\n * @return {Array|Object|String} The parsed value\r\n */\n\n\nfunction parseQueryStringItemValue(key, value) {\n  if (Array.isArray(value)) {\n    // deduplicate and simplify arrays\n    value = value.filter((v, idx) => value.indexOf(v) === idx);\n    if (value.length === 1) value = value[0];\n  } else if (value.indexOf(':') > 0) {\n    value = value.split(',').reduce((result, pair) => {\n      const parts = pair.split(':');\n      result[parts[0]] = parseQueryStringItemValue(key, parts[1]);\n      return result;\n    }, {});\n  } else if (value.indexOf(',') > 0) {\n    value = value.split(',').map(v => {\n      return parseQueryStringItemValue(key, v);\n    });\n  } else if (value.toLowerCase() === 'true' || value.toLowerCase() === 'false') {\n    value = value.toLowerCase() === 'true';\n  } else if (!Number.isNaN(value) && !STRING_OPTIONS.has(key)) {\n    const numericValue = parseFloat(value);\n\n    if (!Number.isNaN(numericValue)) {\n      value = parseFloat(value);\n    }\n  }\n\n  return value;\n} // Options that are known boolean types\n\n\nconst BOOLEAN_OPTIONS = new Set(['slaveok', 'slave_ok', 'sslvalidate', 'fsync', 'safe', 'retrywrites', 'j']); // Known string options, only used to bypass Number coercion in `parseQueryStringItemValue`\n\nconst STRING_OPTIONS = new Set(['authsource', 'replicaset']); // Supported text representations of auth mechanisms\n// NOTE: this list exists in native already, if it is merged here we should deduplicate\n\nconst AUTH_MECHANISMS = new Set(['GSSAPI', 'MONGODB-AWS', 'MONGODB-X509', 'MONGODB-CR', 'DEFAULT', 'SCRAM-SHA-1', 'SCRAM-SHA-256', 'PLAIN']); // Lookup table used to translate normalized (lower-cased) forms of connection string\n// options to their expected camelCase version\n\nconst CASE_TRANSLATION = {\n  replicaset: 'replicaSet',\n  connecttimeoutms: 'connectTimeoutMS',\n  sockettimeoutms: 'socketTimeoutMS',\n  maxpoolsize: 'maxPoolSize',\n  minpoolsize: 'minPoolSize',\n  maxidletimems: 'maxIdleTimeMS',\n  waitqueuemultiple: 'waitQueueMultiple',\n  waitqueuetimeoutms: 'waitQueueTimeoutMS',\n  wtimeoutms: 'wtimeoutMS',\n  readconcern: 'readConcern',\n  readconcernlevel: 'readConcernLevel',\n  readpreference: 'readPreference',\n  maxstalenessseconds: 'maxStalenessSeconds',\n  readpreferencetags: 'readPreferenceTags',\n  authsource: 'authSource',\n  authmechanism: 'authMechanism',\n  authmechanismproperties: 'authMechanismProperties',\n  gssapiservicename: 'gssapiServiceName',\n  localthresholdms: 'localThresholdMS',\n  serverselectiontimeoutms: 'serverSelectionTimeoutMS',\n  serverselectiontryonce: 'serverSelectionTryOnce',\n  heartbeatfrequencyms: 'heartbeatFrequencyMS',\n  retrywrites: 'retryWrites',\n  uuidrepresentation: 'uuidRepresentation',\n  zlibcompressionlevel: 'zlibCompressionLevel',\n  tlsallowinvalidcertificates: 'tlsAllowInvalidCertificates',\n  tlsallowinvalidhostnames: 'tlsAllowInvalidHostnames',\n  tlsinsecure: 'tlsInsecure',\n  tlscafile: 'tlsCAFile',\n  tlscertificatekeyfile: 'tlsCertificateKeyFile',\n  tlscertificatekeyfilepassword: 'tlsCertificateKeyFilePassword',\n  wtimeout: 'wTimeoutMS',\n  j: 'journal',\n  directconnection: 'directConnection'\n};\n/**\r\n * Sets the value for `key`, allowing for any required translation\r\n *\r\n * @param {object} obj The object to set the key on\r\n * @param {string} key The key to set the value for\r\n * @param {*} value The value to set\r\n * @param {object} options The options used for option parsing\r\n */\n\nfunction applyConnectionStringOption(obj, key, value, options) {\n  // simple key translation\n  if (key === 'journal') {\n    key = 'j';\n  } else if (key === 'wtimeoutms') {\n    key = 'wtimeout';\n  } // more complicated translation\n\n\n  if (BOOLEAN_OPTIONS.has(key)) {\n    value = value === 'true' || value === true;\n  } else if (key === 'appname') {\n    value = decodeURIComponent(value);\n  } else if (key === 'readconcernlevel') {\n    obj['readConcernLevel'] = value;\n    key = 'readconcern';\n    value = {\n      level: value\n    };\n  } // simple validation\n\n\n  if (key === 'compressors') {\n    value = Array.isArray(value) ? value : [value];\n\n    if (!value.every(c => c === 'snappy' || c === 'zlib')) {\n      throw new MongoParseError('Value for `compressors` must be at least one of: `snappy`, `zlib`');\n    }\n  }\n\n  if (key === 'authmechanism' && !AUTH_MECHANISMS.has(value)) {\n    throw new MongoParseError(`Value for authMechanism must be one of: ${Array.from(AUTH_MECHANISMS).join(', ')}, found: ${value}`);\n  }\n\n  if (key === 'readpreference' && !ReadPreference.isValid(value)) {\n    throw new MongoParseError('Value for `readPreference` must be one of: `primary`, `primaryPreferred`, `secondary`, `secondaryPreferred`, `nearest`');\n  }\n\n  if (key === 'zlibcompressionlevel' && (value < -1 || value > 9)) {\n    throw new MongoParseError('zlibCompressionLevel must be an integer between -1 and 9');\n  } // special cases\n\n\n  if (key === 'compressors' || key === 'zlibcompressionlevel') {\n    obj.compression = obj.compression || {};\n    obj = obj.compression;\n  }\n\n  if (key === 'authmechanismproperties') {\n    if (typeof value.SERVICE_NAME === 'string') obj.gssapiServiceName = value.SERVICE_NAME;\n    if (typeof value.SERVICE_REALM === 'string') obj.gssapiServiceRealm = value.SERVICE_REALM;\n\n    if (typeof value.CANONICALIZE_HOST_NAME !== 'undefined') {\n      obj.gssapiCanonicalizeHostName = value.CANONICALIZE_HOST_NAME;\n    }\n  }\n\n  if (key === 'readpreferencetags') {\n    value = Array.isArray(value) ? splitArrayOfMultipleReadPreferenceTags(value) : [value];\n  } // set the actual value\n\n\n  if (options.caseTranslate && CASE_TRANSLATION[key]) {\n    obj[CASE_TRANSLATION[key]] = value;\n    return;\n  }\n\n  obj[key] = value;\n}\n\nconst USERNAME_REQUIRED_MECHANISMS = new Set(['GSSAPI', 'MONGODB-CR', 'PLAIN', 'SCRAM-SHA-1', 'SCRAM-SHA-256']);\n\nfunction splitArrayOfMultipleReadPreferenceTags(value) {\n  const parsedTags = [];\n\n  for (let i = 0; i < value.length; i++) {\n    parsedTags[i] = {};\n    value[i].split(',').forEach(individualTag => {\n      const splitTag = individualTag.split(':');\n      parsedTags[i][splitTag[0]] = splitTag[1];\n    });\n  }\n\n  return parsedTags;\n}\n/**\r\n * Modifies the parsed connection string object taking into account expectations we\r\n * have for authentication-related options.\r\n *\r\n * @param {object} parsed The parsed connection string result\r\n * @return The parsed connection string result possibly modified for auth expectations\r\n */\n\n\nfunction applyAuthExpectations(parsed) {\n  if (parsed.options == null) {\n    return;\n  }\n\n  const options = parsed.options;\n  const authSource = options.authsource || options.authSource;\n\n  if (authSource != null) {\n    parsed.auth = Object.assign({}, parsed.auth, {\n      db: authSource\n    });\n  }\n\n  const authMechanism = options.authmechanism || options.authMechanism;\n\n  if (authMechanism != null) {\n    if (USERNAME_REQUIRED_MECHANISMS.has(authMechanism) && (!parsed.auth || parsed.auth.username == null)) {\n      throw new MongoParseError(`Username required for mechanism \\`${authMechanism}\\``);\n    }\n\n    if (authMechanism === 'GSSAPI') {\n      if (authSource != null && authSource !== '$external') {\n        throw new MongoParseError(`Invalid source \\`${authSource}\\` for mechanism \\`${authMechanism}\\` specified.`);\n      }\n\n      parsed.auth = Object.assign({}, parsed.auth, {\n        db: '$external'\n      });\n    }\n\n    if (authMechanism === 'MONGODB-AWS') {\n      if (authSource != null && authSource !== '$external') {\n        throw new MongoParseError(`Invalid source \\`${authSource}\\` for mechanism \\`${authMechanism}\\` specified.`);\n      }\n\n      parsed.auth = Object.assign({}, parsed.auth, {\n        db: '$external'\n      });\n    }\n\n    if (authMechanism === 'MONGODB-X509') {\n      if (parsed.auth && parsed.auth.password != null) {\n        throw new MongoParseError(`Password not allowed for mechanism \\`${authMechanism}\\``);\n      }\n\n      if (authSource != null && authSource !== '$external') {\n        throw new MongoParseError(`Invalid source \\`${authSource}\\` for mechanism \\`${authMechanism}\\` specified.`);\n      }\n\n      parsed.auth = Object.assign({}, parsed.auth, {\n        db: '$external'\n      });\n    }\n\n    if (authMechanism === 'PLAIN') {\n      if (parsed.auth && parsed.auth.db == null) {\n        parsed.auth = Object.assign({}, parsed.auth, {\n          db: '$external'\n        });\n      }\n    }\n  } // default to `admin` if nothing else was resolved\n\n\n  if (parsed.auth && parsed.auth.db == null) {\n    parsed.auth = Object.assign({}, parsed.auth, {\n      db: 'admin'\n    });\n  }\n\n  return parsed;\n}\n/**\r\n * Parses a query string according the connection string spec.\r\n *\r\n * @param {String} query The query string to parse\r\n * @param {object} [options] The options used for options parsing\r\n * @return {Object|Error} The parsed query string as an object, or an error if one was encountered\r\n */\n\n\nfunction parseQueryString(query, options) {\n  const result = {};\n  let parsedQueryString = qs.parse(query);\n  checkTLSOptions(parsedQueryString);\n\n  for (const key in parsedQueryString) {\n    const value = parsedQueryString[key];\n\n    if (value === '' || value == null) {\n      throw new MongoParseError('Incomplete key value pair for option');\n    }\n\n    const normalizedKey = key.toLowerCase();\n    const parsedValue = FILE_PATH_OPTIONS.has(normalizedKey) ? value : parseQueryStringItemValue(normalizedKey, value);\n    applyConnectionStringOption(result, normalizedKey, parsedValue, options);\n  } // special cases for known deprecated options\n\n\n  if (result.wtimeout && result.wtimeoutms) {\n    delete result.wtimeout;\n    emitWarningOnce('Unsupported option `wtimeout` specified');\n  }\n\n  return Object.keys(result).length ? result : null;\n} /// Adds support for modern `tls` variants of out `ssl` options\n\n\nfunction translateTLSOptions(queryString) {\n  if (queryString.tls) {\n    queryString.ssl = queryString.tls;\n  }\n\n  if (queryString.tlsInsecure) {\n    queryString.checkServerIdentity = false;\n    queryString.sslValidate = false;\n  } else {\n    Object.assign(queryString, {\n      checkServerIdentity: queryString.tlsAllowInvalidHostnames ? false : true,\n      sslValidate: queryString.tlsAllowInvalidCertificates ? false : true\n    });\n  }\n\n  if (queryString.tlsCAFile) {\n    queryString.ssl = true;\n    queryString.sslCA = queryString.tlsCAFile;\n  }\n\n  if (queryString.tlsCertificateKeyFile) {\n    queryString.ssl = true;\n\n    if (queryString.tlsCertificateFile) {\n      queryString.sslCert = queryString.tlsCertificateFile;\n      queryString.sslKey = queryString.tlsCertificateKeyFile;\n    } else {\n      queryString.sslKey = queryString.tlsCertificateKeyFile;\n      queryString.sslCert = queryString.tlsCertificateKeyFile;\n    }\n  }\n\n  if (queryString.tlsCertificateKeyFilePassword) {\n    queryString.ssl = true;\n    queryString.sslPass = queryString.tlsCertificateKeyFilePassword;\n  }\n\n  return queryString;\n}\n/**\r\n * Checks a query string for invalid tls options according to the URI options spec.\r\n *\r\n * @param {string} queryString The query string to check\r\n * @throws {MongoParseError}\r\n */\n\n\nfunction checkTLSOptions(queryString) {\n  const queryStringKeys = Object.keys(queryString);\n\n  if (queryStringKeys.indexOf('tlsInsecure') !== -1 && (queryStringKeys.indexOf('tlsAllowInvalidCertificates') !== -1 || queryStringKeys.indexOf('tlsAllowInvalidHostnames') !== -1)) {\n    throw new MongoParseError('The `tlsInsecure` option cannot be used with `tlsAllowInvalidCertificates` or `tlsAllowInvalidHostnames`.');\n  }\n\n  const tlsValue = assertTlsOptionsAreEqual('tls', queryString, queryStringKeys);\n  const sslValue = assertTlsOptionsAreEqual('ssl', queryString, queryStringKeys);\n\n  if (tlsValue != null && sslValue != null) {\n    if (tlsValue !== sslValue) {\n      throw new MongoParseError('All values of `tls` and `ssl` must be the same.');\n    }\n  }\n}\n/**\r\n * Checks a query string to ensure all tls/ssl options are the same.\r\n *\r\n * @param {string} key The key (tls or ssl) to check\r\n * @param {string} queryString The query string to check\r\n * @throws {MongoParseError}\r\n * @return The value of the tls/ssl option\r\n */\n\n\nfunction assertTlsOptionsAreEqual(optionName, queryString, queryStringKeys) {\n  const queryStringHasTLSOption = queryStringKeys.indexOf(optionName) !== -1;\n  let optionValue;\n\n  if (Array.isArray(queryString[optionName])) {\n    optionValue = queryString[optionName][0];\n  } else {\n    optionValue = queryString[optionName];\n  }\n\n  if (queryStringHasTLSOption) {\n    if (Array.isArray(queryString[optionName])) {\n      const firstValue = queryString[optionName][0];\n      queryString[optionName].forEach(tlsValue => {\n        if (tlsValue !== firstValue) {\n          throw new MongoParseError(`All values of ${optionName} must be the same.`);\n        }\n      });\n    }\n  }\n\n  return optionValue;\n}\n\nconst PROTOCOL_MONGODB = 'mongodb';\nconst PROTOCOL_MONGODB_SRV = 'mongodb+srv';\nconst SUPPORTED_PROTOCOLS = [PROTOCOL_MONGODB, PROTOCOL_MONGODB_SRV];\n/**\r\n * Parses a MongoDB connection string\r\n *\r\n * @param {*} uri the MongoDB connection string to parse\r\n * @param {object} [options] Optional settings.\r\n * @param {boolean} [options.caseTranslate] Whether the parser should translate options back into camelCase after normalization\r\n * @param {parseCallback} callback\r\n */\n\nfunction parseConnectionString(uri, options, callback) {\n  if (typeof options === 'function') callback = options, options = {};\n  options = Object.assign({}, {\n    caseTranslate: true\n  }, options); // Check for bad uris before we parse\n\n  try {\n    URL.parse(uri);\n  } catch (e) {\n    return callback(new MongoParseError('URI malformed, cannot be parsed'));\n  }\n\n  const cap = uri.match(HOSTS_RX);\n\n  if (!cap) {\n    return callback(new MongoParseError('Invalid connection string'));\n  }\n\n  const protocol = cap[1];\n\n  if (SUPPORTED_PROTOCOLS.indexOf(protocol) === -1) {\n    return callback(new MongoParseError('Invalid protocol provided'));\n  }\n\n  const dbAndQuery = cap[4].split('?');\n  const db = dbAndQuery.length > 0 ? dbAndQuery[0] : null;\n  const query = dbAndQuery.length > 1 ? dbAndQuery[1] : null;\n  let parsedOptions;\n\n  try {\n    parsedOptions = parseQueryString(query, options);\n  } catch (parseError) {\n    return callback(parseError);\n  }\n\n  parsedOptions = Object.assign({}, parsedOptions, options);\n\n  if (protocol === PROTOCOL_MONGODB_SRV) {\n    return parseSrvConnectionString(uri, parsedOptions, callback);\n  }\n\n  const auth = {\n    username: null,\n    password: null,\n    db: db && db !== '' ? qs.unescape(db) : null\n  };\n\n  if (parsedOptions.auth) {\n    // maintain support for legacy options passed into `MongoClient`\n    if (parsedOptions.auth.username) auth.username = parsedOptions.auth.username;\n    if (parsedOptions.auth.user) auth.username = parsedOptions.auth.user;\n    if (parsedOptions.auth.password) auth.password = parsedOptions.auth.password;\n  } else {\n    if (parsedOptions.username) auth.username = parsedOptions.username;\n    if (parsedOptions.user) auth.username = parsedOptions.user;\n    if (parsedOptions.password) auth.password = parsedOptions.password;\n  }\n\n  if (cap[4].split('?')[0].indexOf('@') !== -1) {\n    return callback(new MongoParseError('Unescaped slash in userinfo section'));\n  }\n\n  const authorityParts = cap[3].split('@');\n\n  if (authorityParts.length > 2) {\n    return callback(new MongoParseError('Unescaped at-sign in authority section'));\n  }\n\n  if (authorityParts[0] == null || authorityParts[0] === '') {\n    return callback(new MongoParseError('No username provided in authority section'));\n  }\n\n  if (authorityParts.length > 1) {\n    const authParts = authorityParts.shift().split(':');\n\n    if (authParts.length > 2) {\n      return callback(new MongoParseError('Unescaped colon in authority section'));\n    }\n\n    if (authParts[0] === '') {\n      return callback(new MongoParseError('Invalid empty username provided'));\n    }\n\n    if (!auth.username) auth.username = qs.unescape(authParts[0]);\n    if (!auth.password) auth.password = authParts[1] ? qs.unescape(authParts[1]) : null;\n  }\n\n  let hostParsingError = null;\n  const hosts = authorityParts.shift().split(',').map(host => {\n    let parsedHost = URL.parse(`mongodb://${host}`);\n\n    if (parsedHost.path === '/:') {\n      hostParsingError = new MongoParseError('Double colon in host identifier');\n      return null;\n    } // heuristically determine if we're working with a domain socket\n\n\n    if (host.match(/\\.sock/)) {\n      parsedHost.hostname = qs.unescape(host);\n      parsedHost.port = null;\n    }\n\n    if (Number.isNaN(parsedHost.port)) {\n      hostParsingError = new MongoParseError('Invalid port (non-numeric string)');\n      return;\n    }\n\n    const result = {\n      host: parsedHost.hostname,\n      port: parsedHost.port ? parseInt(parsedHost.port) : 27017\n    };\n\n    if (result.port === 0) {\n      hostParsingError = new MongoParseError('Invalid port (zero) with hostname');\n      return;\n    }\n\n    if (result.port > 65535) {\n      hostParsingError = new MongoParseError('Invalid port (larger than 65535) with hostname');\n      return;\n    }\n\n    if (result.port < 0) {\n      hostParsingError = new MongoParseError('Invalid port (negative number)');\n      return;\n    }\n\n    return result;\n  }).filter(host => !!host);\n\n  if (hostParsingError) {\n    return callback(hostParsingError);\n  }\n\n  if (hosts.length === 0 || hosts[0].host === '' || hosts[0].host === null) {\n    return callback(new MongoParseError('No hostname or hostnames provided in connection string'));\n  }\n\n  const directConnection = !!parsedOptions.directConnection;\n\n  if (directConnection && hosts.length !== 1) {\n    // If the option is set to true, the driver MUST validate that there is exactly one host given\n    // in the host list in the URI, and fail client creation otherwise.\n    return callback(new MongoParseError('directConnection option requires exactly one host'));\n  } // NOTE: this behavior will go away in v4.0, we will always auto discover there\n\n\n  if (parsedOptions.directConnection == null && hosts.length === 1 && parsedOptions.replicaSet == null) {\n    parsedOptions.directConnection = true;\n  }\n\n  const result = {\n    hosts: hosts,\n    auth: auth.db || auth.username ? auth : null,\n    options: Object.keys(parsedOptions).length ? parsedOptions : null\n  };\n\n  if (result.auth && result.auth.db) {\n    result.defaultDatabase = result.auth.db;\n  } else {\n    result.defaultDatabase = 'test';\n  } // support modern `tls` variants to SSL options\n\n\n  result.options = translateTLSOptions(result.options);\n\n  try {\n    applyAuthExpectations(result);\n  } catch (authError) {\n    return callback(authError);\n  }\n\n  callback(null, result);\n}\n\nmodule.exports = parseConnectionString;","map":{"version":3,"sources":["C:/Users/Tanja Aakerholt/Documents/GitHub/portfolio2/client/node_modules/mongodb/lib/core/uri_parser.js"],"names":["URL","require","qs","dns","MongoParseError","ReadPreference","emitWarningOnce","HOSTS_RX","FILE_PATH_OPTIONS","Set","map","key","toLowerCase","matchesParentDomain","srvAddress","parentDomain","regex","srv","replace","parent","endsWith","parseSrvConnectionString","uri","options","callback","result","parse","directConnection","directconnection","hostname","split","length","domainLength","pathname","match","port","PROTOCOL_MONGODB_SRV","lookupAddress","host","resolveSrv","err","addresses","i","name","protocol","address","join","search","query","ssl","resolveTxt","record","code","Object","keys","some","assign","stringify","finalString","format","parseConnectionString","ret","srvHost","parseQueryStringItemValue","value","Array","isArray","filter","v","idx","indexOf","reduce","pair","parts","Number","isNaN","STRING_OPTIONS","has","numericValue","parseFloat","BOOLEAN_OPTIONS","AUTH_MECHANISMS","CASE_TRANSLATION","replicaset","connecttimeoutms","sockettimeoutms","maxpoolsize","minpoolsize","maxidletimems","waitqueuemultiple","waitqueuetimeoutms","wtimeoutms","readconcern","readconcernlevel","readpreference","maxstalenessseconds","readpreferencetags","authsource","authmechanism","authmechanismproperties","gssapiservicename","localthresholdms","serverselectiontimeoutms","serverselectiontryonce","heartbeatfrequencyms","retrywrites","uuidrepresentation","zlibcompressionlevel","tlsallowinvalidcertificates","tlsallowinvalidhostnames","tlsinsecure","tlscafile","tlscertificatekeyfile","tlscertificatekeyfilepassword","wtimeout","j","applyConnectionStringOption","obj","decodeURIComponent","level","every","c","from","isValid","compression","SERVICE_NAME","gssapiServiceName","SERVICE_REALM","gssapiServiceRealm","CANONICALIZE_HOST_NAME","gssapiCanonicalizeHostName","splitArrayOfMultipleReadPreferenceTags","caseTranslate","USERNAME_REQUIRED_MECHANISMS","parsedTags","forEach","individualTag","splitTag","applyAuthExpectations","parsed","authSource","auth","db","authMechanism","username","password","parseQueryString","parsedQueryString","checkTLSOptions","normalizedKey","parsedValue","translateTLSOptions","queryString","tls","tlsInsecure","checkServerIdentity","sslValidate","tlsAllowInvalidHostnames","tlsAllowInvalidCertificates","tlsCAFile","sslCA","tlsCertificateKeyFile","tlsCertificateFile","sslCert","sslKey","tlsCertificateKeyFilePassword","sslPass","queryStringKeys","tlsValue","assertTlsOptionsAreEqual","sslValue","optionName","queryStringHasTLSOption","optionValue","firstValue","PROTOCOL_MONGODB","SUPPORTED_PROTOCOLS","e","cap","dbAndQuery","parsedOptions","parseError","unescape","user","authorityParts","authParts","shift","hostParsingError","hosts","parsedHost","path","parseInt","replicaSet","defaultDatabase","authError","module","exports"],"mappings":"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","sourcesContent":["'use strict';\r\nconst URL = require('url');\r\nconst qs = require('querystring');\r\nconst dns = require('dns');\r\nconst MongoParseError = require('./error').MongoParseError;\r\nconst ReadPreference = require('./topologies/read_preference');\r\nconst emitWarningOnce = require('../utils').emitWarningOnce;\r\n\r\n/**\r\n * The following regular expression validates a connection string and breaks the\r\n * provide string into the following capture groups: [protocol, username, password, hosts]\r\n */\r\nconst HOSTS_RX = /(mongodb(?:\\+srv|)):\\/\\/(?: (?:[^:]*) (?: : ([^@]*) )? @ )?([^/?]*)(?:\\/|)(.*)/;\r\n\r\n// Options that reference file paths should not be parsed\r\nconst FILE_PATH_OPTIONS = new Set(\r\n  ['sslCA', 'sslCert', 'sslKey', 'tlsCAFile', 'tlsCertificateKeyFile'].map(key => key.toLowerCase())\r\n);\r\n\r\n/**\r\n * Determines whether a provided address matches the provided parent domain in order\r\n * to avoid certain attack vectors.\r\n *\r\n * @param {String} srvAddress The address to check against a domain\r\n * @param {String} parentDomain The domain to check the provided address against\r\n * @return {Boolean} Whether the provided address matches the parent domain\r\n */\r\nfunction matchesParentDomain(srvAddress, parentDomain) {\r\n  const regex = /^.*?\\./;\r\n  const srv = `.${srvAddress.replace(regex, '')}`;\r\n  const parent = `.${parentDomain.replace(regex, '')}`;\r\n  return srv.endsWith(parent);\r\n}\r\n\r\n/**\r\n * Lookup a `mongodb+srv` connection string, combine the parts and reparse it as a normal\r\n * connection string.\r\n *\r\n * @param {string} uri The connection string to parse\r\n * @param {object} options Optional user provided connection string options\r\n * @param {function} callback\r\n */\r\nfunction parseSrvConnectionString(uri, options, callback) {\r\n  const result = URL.parse(uri, true);\r\n\r\n  if (options.directConnection || options.directconnection) {\r\n    return callback(new MongoParseError('directConnection not supported with SRV URI'));\r\n  }\r\n\r\n  if (result.hostname.split('.').length < 3) {\r\n    return callback(new MongoParseError('URI does not have hostname, domain name and tld'));\r\n  }\r\n\r\n  result.domainLength = result.hostname.split('.').length;\r\n  if (result.pathname && result.pathname.match(',')) {\r\n    return callback(new MongoParseError('Invalid URI, cannot contain multiple hostnames'));\r\n  }\r\n\r\n  if (result.port) {\r\n    return callback(new MongoParseError(`Ports not accepted with '${PROTOCOL_MONGODB_SRV}' URIs`));\r\n  }\r\n\r\n  // Resolve the SRV record and use the result as the list of hosts to connect to.\r\n  const lookupAddress = result.host;\r\n  dns.resolveSrv(`_mongodb._tcp.${lookupAddress}`, (err, addresses) => {\r\n    if (err) return callback(err);\r\n\r\n    if (addresses.length === 0) {\r\n      return callback(new MongoParseError('No addresses found at host'));\r\n    }\r\n\r\n    for (let i = 0; i < addresses.length; i++) {\r\n      if (!matchesParentDomain(addresses[i].name, result.hostname, result.domainLength)) {\r\n        return callback(\r\n          new MongoParseError('Server record does not share hostname with parent URI')\r\n        );\r\n      }\r\n    }\r\n\r\n    // Convert the original URL to a non-SRV URL.\r\n    result.protocol = 'mongodb';\r\n    result.host = addresses.map(address => `${address.name}:${address.port}`).join(',');\r\n\r\n    // Default to SSL true if it's not specified.\r\n    if (\r\n      !('ssl' in options) &&\r\n      (!result.search || !('ssl' in result.query) || result.query.ssl === null)\r\n    ) {\r\n      result.query.ssl = true;\r\n    }\r\n\r\n    // Resolve TXT record and add options from there if they exist.\r\n    dns.resolveTxt(lookupAddress, (err, record) => {\r\n      if (err) {\r\n        if (err.code !== 'ENODATA' && err.code !== 'ENOTFOUND') {\r\n          return callback(err);\r\n        }\r\n        record = null;\r\n      }\r\n\r\n      if (record) {\r\n        if (record.length > 1) {\r\n          return callback(new MongoParseError('Multiple text records not allowed'));\r\n        }\r\n\r\n        record = qs.parse(record[0].join(''));\r\n        if (Object.keys(record).some(key => key !== 'authSource' && key !== 'replicaSet')) {\r\n          return callback(\r\n            new MongoParseError('Text record must only set `authSource` or `replicaSet`')\r\n          );\r\n        }\r\n\r\n        result.query = Object.assign({}, record, result.query);\r\n      }\r\n\r\n      // Set completed options back into the URL object.\r\n      result.search = qs.stringify(result.query);\r\n\r\n      const finalString = URL.format(result);\r\n      parseConnectionString(finalString, options, (err, ret) => {\r\n        if (err) {\r\n          callback(err);\r\n          return;\r\n        }\r\n\r\n        callback(null, Object.assign({}, ret, { srvHost: lookupAddress }));\r\n      });\r\n    });\r\n  });\r\n}\r\n\r\n/**\r\n * Parses a query string item according to the connection string spec\r\n *\r\n * @param {string} key The key for the parsed value\r\n * @param {Array|String} value The value to parse\r\n * @return {Array|Object|String} The parsed value\r\n */\r\nfunction parseQueryStringItemValue(key, value) {\r\n  if (Array.isArray(value)) {\r\n    // deduplicate and simplify arrays\r\n    value = value.filter((v, idx) => value.indexOf(v) === idx);\r\n    if (value.length === 1) value = value[0];\r\n  } else if (value.indexOf(':') > 0) {\r\n    value = value.split(',').reduce((result, pair) => {\r\n      const parts = pair.split(':');\r\n      result[parts[0]] = parseQueryStringItemValue(key, parts[1]);\r\n      return result;\r\n    }, {});\r\n  } else if (value.indexOf(',') > 0) {\r\n    value = value.split(',').map(v => {\r\n      return parseQueryStringItemValue(key, v);\r\n    });\r\n  } else if (value.toLowerCase() === 'true' || value.toLowerCase() === 'false') {\r\n    value = value.toLowerCase() === 'true';\r\n  } else if (!Number.isNaN(value) && !STRING_OPTIONS.has(key)) {\r\n    const numericValue = parseFloat(value);\r\n    if (!Number.isNaN(numericValue)) {\r\n      value = parseFloat(value);\r\n    }\r\n  }\r\n\r\n  return value;\r\n}\r\n\r\n// Options that are known boolean types\r\nconst BOOLEAN_OPTIONS = new Set([\r\n  'slaveok',\r\n  'slave_ok',\r\n  'sslvalidate',\r\n  'fsync',\r\n  'safe',\r\n  'retrywrites',\r\n  'j'\r\n]);\r\n\r\n// Known string options, only used to bypass Number coercion in `parseQueryStringItemValue`\r\nconst STRING_OPTIONS = new Set(['authsource', 'replicaset']);\r\n\r\n// Supported text representations of auth mechanisms\r\n// NOTE: this list exists in native already, if it is merged here we should deduplicate\r\nconst AUTH_MECHANISMS = new Set([\r\n  'GSSAPI',\r\n  'MONGODB-AWS',\r\n  'MONGODB-X509',\r\n  'MONGODB-CR',\r\n  'DEFAULT',\r\n  'SCRAM-SHA-1',\r\n  'SCRAM-SHA-256',\r\n  'PLAIN'\r\n]);\r\n\r\n// Lookup table used to translate normalized (lower-cased) forms of connection string\r\n// options to their expected camelCase version\r\nconst CASE_TRANSLATION = {\r\n  replicaset: 'replicaSet',\r\n  connecttimeoutms: 'connectTimeoutMS',\r\n  sockettimeoutms: 'socketTimeoutMS',\r\n  maxpoolsize: 'maxPoolSize',\r\n  minpoolsize: 'minPoolSize',\r\n  maxidletimems: 'maxIdleTimeMS',\r\n  waitqueuemultiple: 'waitQueueMultiple',\r\n  waitqueuetimeoutms: 'waitQueueTimeoutMS',\r\n  wtimeoutms: 'wtimeoutMS',\r\n  readconcern: 'readConcern',\r\n  readconcernlevel: 'readConcernLevel',\r\n  readpreference: 'readPreference',\r\n  maxstalenessseconds: 'maxStalenessSeconds',\r\n  readpreferencetags: 'readPreferenceTags',\r\n  authsource: 'authSource',\r\n  authmechanism: 'authMechanism',\r\n  authmechanismproperties: 'authMechanismProperties',\r\n  gssapiservicename: 'gssapiServiceName',\r\n  localthresholdms: 'localThresholdMS',\r\n  serverselectiontimeoutms: 'serverSelectionTimeoutMS',\r\n  serverselectiontryonce: 'serverSelectionTryOnce',\r\n  heartbeatfrequencyms: 'heartbeatFrequencyMS',\r\n  retrywrites: 'retryWrites',\r\n  uuidrepresentation: 'uuidRepresentation',\r\n  zlibcompressionlevel: 'zlibCompressionLevel',\r\n  tlsallowinvalidcertificates: 'tlsAllowInvalidCertificates',\r\n  tlsallowinvalidhostnames: 'tlsAllowInvalidHostnames',\r\n  tlsinsecure: 'tlsInsecure',\r\n  tlscafile: 'tlsCAFile',\r\n  tlscertificatekeyfile: 'tlsCertificateKeyFile',\r\n  tlscertificatekeyfilepassword: 'tlsCertificateKeyFilePassword',\r\n  wtimeout: 'wTimeoutMS',\r\n  j: 'journal',\r\n  directconnection: 'directConnection'\r\n};\r\n\r\n/**\r\n * Sets the value for `key`, allowing for any required translation\r\n *\r\n * @param {object} obj The object to set the key on\r\n * @param {string} key The key to set the value for\r\n * @param {*} value The value to set\r\n * @param {object} options The options used for option parsing\r\n */\r\nfunction applyConnectionStringOption(obj, key, value, options) {\r\n  // simple key translation\r\n  if (key === 'journal') {\r\n    key = 'j';\r\n  } else if (key === 'wtimeoutms') {\r\n    key = 'wtimeout';\r\n  }\r\n\r\n  // more complicated translation\r\n  if (BOOLEAN_OPTIONS.has(key)) {\r\n    value = value === 'true' || value === true;\r\n  } else if (key === 'appname') {\r\n    value = decodeURIComponent(value);\r\n  } else if (key === 'readconcernlevel') {\r\n    obj['readConcernLevel'] = value;\r\n    key = 'readconcern';\r\n    value = { level: value };\r\n  }\r\n\r\n  // simple validation\r\n  if (key === 'compressors') {\r\n    value = Array.isArray(value) ? value : [value];\r\n\r\n    if (!value.every(c => c === 'snappy' || c === 'zlib')) {\r\n      throw new MongoParseError(\r\n        'Value for `compressors` must be at least one of: `snappy`, `zlib`'\r\n      );\r\n    }\r\n  }\r\n\r\n  if (key === 'authmechanism' && !AUTH_MECHANISMS.has(value)) {\r\n    throw new MongoParseError(\r\n      `Value for authMechanism must be one of: ${Array.from(AUTH_MECHANISMS).join(\r\n        ', '\r\n      )}, found: ${value}`\r\n    );\r\n  }\r\n\r\n  if (key === 'readpreference' && !ReadPreference.isValid(value)) {\r\n    throw new MongoParseError(\r\n      'Value for `readPreference` must be one of: `primary`, `primaryPreferred`, `secondary`, `secondaryPreferred`, `nearest`'\r\n    );\r\n  }\r\n\r\n  if (key === 'zlibcompressionlevel' && (value < -1 || value > 9)) {\r\n    throw new MongoParseError('zlibCompressionLevel must be an integer between -1 and 9');\r\n  }\r\n\r\n  // special cases\r\n  if (key === 'compressors' || key === 'zlibcompressionlevel') {\r\n    obj.compression = obj.compression || {};\r\n    obj = obj.compression;\r\n  }\r\n\r\n  if (key === 'authmechanismproperties') {\r\n    if (typeof value.SERVICE_NAME === 'string') obj.gssapiServiceName = value.SERVICE_NAME;\r\n    if (typeof value.SERVICE_REALM === 'string') obj.gssapiServiceRealm = value.SERVICE_REALM;\r\n    if (typeof value.CANONICALIZE_HOST_NAME !== 'undefined') {\r\n      obj.gssapiCanonicalizeHostName = value.CANONICALIZE_HOST_NAME;\r\n    }\r\n  }\r\n\r\n  if (key === 'readpreferencetags') {\r\n    value = Array.isArray(value) ? splitArrayOfMultipleReadPreferenceTags(value) : [value];\r\n  }\r\n\r\n  // set the actual value\r\n  if (options.caseTranslate && CASE_TRANSLATION[key]) {\r\n    obj[CASE_TRANSLATION[key]] = value;\r\n    return;\r\n  }\r\n\r\n  obj[key] = value;\r\n}\r\n\r\nconst USERNAME_REQUIRED_MECHANISMS = new Set([\r\n  'GSSAPI',\r\n  'MONGODB-CR',\r\n  'PLAIN',\r\n  'SCRAM-SHA-1',\r\n  'SCRAM-SHA-256'\r\n]);\r\n\r\nfunction splitArrayOfMultipleReadPreferenceTags(value) {\r\n  const parsedTags = [];\r\n\r\n  for (let i = 0; i < value.length; i++) {\r\n    parsedTags[i] = {};\r\n    value[i].split(',').forEach(individualTag => {\r\n      const splitTag = individualTag.split(':');\r\n      parsedTags[i][splitTag[0]] = splitTag[1];\r\n    });\r\n  }\r\n\r\n  return parsedTags;\r\n}\r\n\r\n/**\r\n * Modifies the parsed connection string object taking into account expectations we\r\n * have for authentication-related options.\r\n *\r\n * @param {object} parsed The parsed connection string result\r\n * @return The parsed connection string result possibly modified for auth expectations\r\n */\r\nfunction applyAuthExpectations(parsed) {\r\n  if (parsed.options == null) {\r\n    return;\r\n  }\r\n\r\n  const options = parsed.options;\r\n  const authSource = options.authsource || options.authSource;\r\n  if (authSource != null) {\r\n    parsed.auth = Object.assign({}, parsed.auth, { db: authSource });\r\n  }\r\n\r\n  const authMechanism = options.authmechanism || options.authMechanism;\r\n  if (authMechanism != null) {\r\n    if (\r\n      USERNAME_REQUIRED_MECHANISMS.has(authMechanism) &&\r\n      (!parsed.auth || parsed.auth.username == null)\r\n    ) {\r\n      throw new MongoParseError(`Username required for mechanism \\`${authMechanism}\\``);\r\n    }\r\n\r\n    if (authMechanism === 'GSSAPI') {\r\n      if (authSource != null && authSource !== '$external') {\r\n        throw new MongoParseError(\r\n          `Invalid source \\`${authSource}\\` for mechanism \\`${authMechanism}\\` specified.`\r\n        );\r\n      }\r\n\r\n      parsed.auth = Object.assign({}, parsed.auth, { db: '$external' });\r\n    }\r\n\r\n    if (authMechanism === 'MONGODB-AWS') {\r\n      if (authSource != null && authSource !== '$external') {\r\n        throw new MongoParseError(\r\n          `Invalid source \\`${authSource}\\` for mechanism \\`${authMechanism}\\` specified.`\r\n        );\r\n      }\r\n\r\n      parsed.auth = Object.assign({}, parsed.auth, { db: '$external' });\r\n    }\r\n\r\n    if (authMechanism === 'MONGODB-X509') {\r\n      if (parsed.auth && parsed.auth.password != null) {\r\n        throw new MongoParseError(`Password not allowed for mechanism \\`${authMechanism}\\``);\r\n      }\r\n\r\n      if (authSource != null && authSource !== '$external') {\r\n        throw new MongoParseError(\r\n          `Invalid source \\`${authSource}\\` for mechanism \\`${authMechanism}\\` specified.`\r\n        );\r\n      }\r\n\r\n      parsed.auth = Object.assign({}, parsed.auth, { db: '$external' });\r\n    }\r\n\r\n    if (authMechanism === 'PLAIN') {\r\n      if (parsed.auth && parsed.auth.db == null) {\r\n        parsed.auth = Object.assign({}, parsed.auth, { db: '$external' });\r\n      }\r\n    }\r\n  }\r\n\r\n  // default to `admin` if nothing else was resolved\r\n  if (parsed.auth && parsed.auth.db == null) {\r\n    parsed.auth = Object.assign({}, parsed.auth, { db: 'admin' });\r\n  }\r\n\r\n  return parsed;\r\n}\r\n\r\n/**\r\n * Parses a query string according the connection string spec.\r\n *\r\n * @param {String} query The query string to parse\r\n * @param {object} [options] The options used for options parsing\r\n * @return {Object|Error} The parsed query string as an object, or an error if one was encountered\r\n */\r\nfunction parseQueryString(query, options) {\r\n  const result = {};\r\n  let parsedQueryString = qs.parse(query);\r\n\r\n  checkTLSOptions(parsedQueryString);\r\n\r\n  for (const key in parsedQueryString) {\r\n    const value = parsedQueryString[key];\r\n    if (value === '' || value == null) {\r\n      throw new MongoParseError('Incomplete key value pair for option');\r\n    }\r\n\r\n    const normalizedKey = key.toLowerCase();\r\n    const parsedValue = FILE_PATH_OPTIONS.has(normalizedKey)\r\n      ? value\r\n      : parseQueryStringItemValue(normalizedKey, value);\r\n    applyConnectionStringOption(result, normalizedKey, parsedValue, options);\r\n  }\r\n\r\n  // special cases for known deprecated options\r\n  if (result.wtimeout && result.wtimeoutms) {\r\n    delete result.wtimeout;\r\n    emitWarningOnce('Unsupported option `wtimeout` specified');\r\n  }\r\n\r\n  return Object.keys(result).length ? result : null;\r\n}\r\n\r\n/// Adds support for modern `tls` variants of out `ssl` options\r\nfunction translateTLSOptions(queryString) {\r\n  if (queryString.tls) {\r\n    queryString.ssl = queryString.tls;\r\n  }\r\n\r\n  if (queryString.tlsInsecure) {\r\n    queryString.checkServerIdentity = false;\r\n    queryString.sslValidate = false;\r\n  } else {\r\n    Object.assign(queryString, {\r\n      checkServerIdentity: queryString.tlsAllowInvalidHostnames ? false : true,\r\n      sslValidate: queryString.tlsAllowInvalidCertificates ? false : true\r\n    });\r\n  }\r\n\r\n  if (queryString.tlsCAFile) {\r\n    queryString.ssl = true;\r\n    queryString.sslCA = queryString.tlsCAFile;\r\n  }\r\n\r\n  if (queryString.tlsCertificateKeyFile) {\r\n    queryString.ssl = true;\r\n    if (queryString.tlsCertificateFile) {\r\n      queryString.sslCert = queryString.tlsCertificateFile;\r\n      queryString.sslKey = queryString.tlsCertificateKeyFile;\r\n    } else {\r\n      queryString.sslKey = queryString.tlsCertificateKeyFile;\r\n      queryString.sslCert = queryString.tlsCertificateKeyFile;\r\n    }\r\n  }\r\n\r\n  if (queryString.tlsCertificateKeyFilePassword) {\r\n    queryString.ssl = true;\r\n    queryString.sslPass = queryString.tlsCertificateKeyFilePassword;\r\n  }\r\n\r\n  return queryString;\r\n}\r\n\r\n/**\r\n * Checks a query string for invalid tls options according to the URI options spec.\r\n *\r\n * @param {string} queryString The query string to check\r\n * @throws {MongoParseError}\r\n */\r\nfunction checkTLSOptions(queryString) {\r\n  const queryStringKeys = Object.keys(queryString);\r\n  if (\r\n    queryStringKeys.indexOf('tlsInsecure') !== -1 &&\r\n    (queryStringKeys.indexOf('tlsAllowInvalidCertificates') !== -1 ||\r\n      queryStringKeys.indexOf('tlsAllowInvalidHostnames') !== -1)\r\n  ) {\r\n    throw new MongoParseError(\r\n      'The `tlsInsecure` option cannot be used with `tlsAllowInvalidCertificates` or `tlsAllowInvalidHostnames`.'\r\n    );\r\n  }\r\n\r\n  const tlsValue = assertTlsOptionsAreEqual('tls', queryString, queryStringKeys);\r\n  const sslValue = assertTlsOptionsAreEqual('ssl', queryString, queryStringKeys);\r\n\r\n  if (tlsValue != null && sslValue != null) {\r\n    if (tlsValue !== sslValue) {\r\n      throw new MongoParseError('All values of `tls` and `ssl` must be the same.');\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Checks a query string to ensure all tls/ssl options are the same.\r\n *\r\n * @param {string} key The key (tls or ssl) to check\r\n * @param {string} queryString The query string to check\r\n * @throws {MongoParseError}\r\n * @return The value of the tls/ssl option\r\n */\r\nfunction assertTlsOptionsAreEqual(optionName, queryString, queryStringKeys) {\r\n  const queryStringHasTLSOption = queryStringKeys.indexOf(optionName) !== -1;\r\n\r\n  let optionValue;\r\n  if (Array.isArray(queryString[optionName])) {\r\n    optionValue = queryString[optionName][0];\r\n  } else {\r\n    optionValue = queryString[optionName];\r\n  }\r\n\r\n  if (queryStringHasTLSOption) {\r\n    if (Array.isArray(queryString[optionName])) {\r\n      const firstValue = queryString[optionName][0];\r\n      queryString[optionName].forEach(tlsValue => {\r\n        if (tlsValue !== firstValue) {\r\n          throw new MongoParseError(`All values of ${optionName} must be the same.`);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  return optionValue;\r\n}\r\n\r\nconst PROTOCOL_MONGODB = 'mongodb';\r\nconst PROTOCOL_MONGODB_SRV = 'mongodb+srv';\r\nconst SUPPORTED_PROTOCOLS = [PROTOCOL_MONGODB, PROTOCOL_MONGODB_SRV];\r\n\r\n/**\r\n * Parses a MongoDB connection string\r\n *\r\n * @param {*} uri the MongoDB connection string to parse\r\n * @param {object} [options] Optional settings.\r\n * @param {boolean} [options.caseTranslate] Whether the parser should translate options back into camelCase after normalization\r\n * @param {parseCallback} callback\r\n */\r\nfunction parseConnectionString(uri, options, callback) {\r\n  if (typeof options === 'function') (callback = options), (options = {});\r\n  options = Object.assign({}, { caseTranslate: true }, options);\r\n\r\n  // Check for bad uris before we parse\r\n  try {\r\n    URL.parse(uri);\r\n  } catch (e) {\r\n    return callback(new MongoParseError('URI malformed, cannot be parsed'));\r\n  }\r\n\r\n  const cap = uri.match(HOSTS_RX);\r\n  if (!cap) {\r\n    return callback(new MongoParseError('Invalid connection string'));\r\n  }\r\n\r\n  const protocol = cap[1];\r\n  if (SUPPORTED_PROTOCOLS.indexOf(protocol) === -1) {\r\n    return callback(new MongoParseError('Invalid protocol provided'));\r\n  }\r\n\r\n  const dbAndQuery = cap[4].split('?');\r\n  const db = dbAndQuery.length > 0 ? dbAndQuery[0] : null;\r\n  const query = dbAndQuery.length > 1 ? dbAndQuery[1] : null;\r\n\r\n  let parsedOptions;\r\n  try {\r\n    parsedOptions = parseQueryString(query, options);\r\n  } catch (parseError) {\r\n    return callback(parseError);\r\n  }\r\n\r\n  parsedOptions = Object.assign({}, parsedOptions, options);\r\n\r\n  if (protocol === PROTOCOL_MONGODB_SRV) {\r\n    return parseSrvConnectionString(uri, parsedOptions, callback);\r\n  }\r\n\r\n  const auth = { username: null, password: null, db: db && db !== '' ? qs.unescape(db) : null };\r\n  if (parsedOptions.auth) {\r\n    // maintain support for legacy options passed into `MongoClient`\r\n    if (parsedOptions.auth.username) auth.username = parsedOptions.auth.username;\r\n    if (parsedOptions.auth.user) auth.username = parsedOptions.auth.user;\r\n    if (parsedOptions.auth.password) auth.password = parsedOptions.auth.password;\r\n  } else {\r\n    if (parsedOptions.username) auth.username = parsedOptions.username;\r\n    if (parsedOptions.user) auth.username = parsedOptions.user;\r\n    if (parsedOptions.password) auth.password = parsedOptions.password;\r\n  }\r\n\r\n  if (cap[4].split('?')[0].indexOf('@') !== -1) {\r\n    return callback(new MongoParseError('Unescaped slash in userinfo section'));\r\n  }\r\n\r\n  const authorityParts = cap[3].split('@');\r\n  if (authorityParts.length > 2) {\r\n    return callback(new MongoParseError('Unescaped at-sign in authority section'));\r\n  }\r\n\r\n  if (authorityParts[0] == null || authorityParts[0] === '') {\r\n    return callback(new MongoParseError('No username provided in authority section'));\r\n  }\r\n\r\n  if (authorityParts.length > 1) {\r\n    const authParts = authorityParts.shift().split(':');\r\n    if (authParts.length > 2) {\r\n      return callback(new MongoParseError('Unescaped colon in authority section'));\r\n    }\r\n\r\n    if (authParts[0] === '') {\r\n      return callback(new MongoParseError('Invalid empty username provided'));\r\n    }\r\n\r\n    if (!auth.username) auth.username = qs.unescape(authParts[0]);\r\n    if (!auth.password) auth.password = authParts[1] ? qs.unescape(authParts[1]) : null;\r\n  }\r\n\r\n  let hostParsingError = null;\r\n  const hosts = authorityParts\r\n    .shift()\r\n    .split(',')\r\n    .map(host => {\r\n      let parsedHost = URL.parse(`mongodb://${host}`);\r\n      if (parsedHost.path === '/:') {\r\n        hostParsingError = new MongoParseError('Double colon in host identifier');\r\n        return null;\r\n      }\r\n\r\n      // heuristically determine if we're working with a domain socket\r\n      if (host.match(/\\.sock/)) {\r\n        parsedHost.hostname = qs.unescape(host);\r\n        parsedHost.port = null;\r\n      }\r\n\r\n      if (Number.isNaN(parsedHost.port)) {\r\n        hostParsingError = new MongoParseError('Invalid port (non-numeric string)');\r\n        return;\r\n      }\r\n\r\n      const result = {\r\n        host: parsedHost.hostname,\r\n        port: parsedHost.port ? parseInt(parsedHost.port) : 27017\r\n      };\r\n\r\n      if (result.port === 0) {\r\n        hostParsingError = new MongoParseError('Invalid port (zero) with hostname');\r\n        return;\r\n      }\r\n\r\n      if (result.port > 65535) {\r\n        hostParsingError = new MongoParseError('Invalid port (larger than 65535) with hostname');\r\n        return;\r\n      }\r\n\r\n      if (result.port < 0) {\r\n        hostParsingError = new MongoParseError('Invalid port (negative number)');\r\n        return;\r\n      }\r\n\r\n      return result;\r\n    })\r\n    .filter(host => !!host);\r\n\r\n  if (hostParsingError) {\r\n    return callback(hostParsingError);\r\n  }\r\n\r\n  if (hosts.length === 0 || hosts[0].host === '' || hosts[0].host === null) {\r\n    return callback(new MongoParseError('No hostname or hostnames provided in connection string'));\r\n  }\r\n\r\n  const directConnection = !!parsedOptions.directConnection;\r\n  if (directConnection && hosts.length !== 1) {\r\n    // If the option is set to true, the driver MUST validate that there is exactly one host given\r\n    // in the host list in the URI, and fail client creation otherwise.\r\n    return callback(new MongoParseError('directConnection option requires exactly one host'));\r\n  }\r\n\r\n  // NOTE: this behavior will go away in v4.0, we will always auto discover there\r\n  if (\r\n    parsedOptions.directConnection == null &&\r\n    hosts.length === 1 &&\r\n    parsedOptions.replicaSet == null\r\n  ) {\r\n    parsedOptions.directConnection = true;\r\n  }\r\n\r\n  const result = {\r\n    hosts: hosts,\r\n    auth: auth.db || auth.username ? auth : null,\r\n    options: Object.keys(parsedOptions).length ? parsedOptions : null\r\n  };\r\n\r\n  if (result.auth && result.auth.db) {\r\n    result.defaultDatabase = result.auth.db;\r\n  } else {\r\n    result.defaultDatabase = 'test';\r\n  }\r\n\r\n  // support modern `tls` variants to SSL options\r\n  result.options = translateTLSOptions(result.options);\r\n\r\n  try {\r\n    applyAuthExpectations(result);\r\n  } catch (authError) {\r\n    return callback(authError);\r\n  }\r\n\r\n  callback(null, result);\r\n}\r\n\r\nmodule.exports = parseConnectionString;\r\n"]},"metadata":{},"sourceType":"script"}