{"ast":null,"code":"import axios from \"axios\";\nimport { FETCH_PRODUCT, GET_ERROR, PRODUCT_LIST_FAIL, PRODUCT_LIST_REQUEST, PRODUCT_LIST_SUCCESS } from \"./constants\";\nexport const fetchProduct = () => dispatch => {\n  axios.get(\"http://localhost:3001/api/products/allProducts\").then(res => res.json()).then(post => dispatch({\n    type: FETCH_PRODUCT,\n    payload: post\n  }));\n};\nexport const createProduct = (newProduct, history) => dispatch => {\n  axios.post(\"http://localhost:3001/api/products/addProduct\", newProduct).then(res => history.push(\"/allProducts\")).catch(err => dispatch({\n    type: GET_ERROR,\n    payload: err.response.data\n  }));\n};\nexport const deleteProduct = itemid => dispatch => {\n  axios.delete(\"http://localhost:3001/api/products/${itemId}\").then(res => dispatch({\n    payload: itemid\n  }));\n};\nexport const updateProduct = itemId => dispatch => {\n  axios.put(\"http://localhost:3001/api/products/${itemId}\").then(res => dispatch({\n    payload: Promise.all([itemId, res.data])\n  }));\n};\n\nconst listProducts = (category = '', searchKeyword = '', sortOrder = '') => async dispatch => {\n  try {\n    dispatch({\n      type: PRODUCT_LIST_REQUEST\n    });\n    const {\n      data\n    } = await axios.get('/api/products?category=' + category + '&searchKeyword=' + searchKeyword + '&sortOrder=' + sortOrder);\n    dispatch({\n      type: PRODUCT_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error.message);\n    dispatch({\n      type: PRODUCT_LIST_FAIL,\n      payload: error.message\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/Tanja Aakerholt/Documents/GitHub/portfolio2/client/src/actions/productActions.js"],"names":["axios","FETCH_PRODUCT","GET_ERROR","PRODUCT_LIST_FAIL","PRODUCT_LIST_REQUEST","PRODUCT_LIST_SUCCESS","fetchProduct","dispatch","get","then","res","json","post","type","payload","createProduct","newProduct","history","push","catch","err","response","data","deleteProduct","itemid","delete","updateProduct","itemId","put","Promise","all","listProducts","category","searchKeyword","sortOrder","error","console","log","message"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,aAAR,EAAuBC,SAAvB,EAAkCC,iBAAlC,EAAqDC,oBAArD,EAA2EC,oBAA3E,QAAsG,aAAtG;AAEA,OAAO,MAAMC,YAAY,GAAG,MAAOC,QAAD,IAAc;AAC5CP,EAAAA,KAAK,CAACQ,GAAN,CAAU,gDAAV,EACKC,IADL,CACWC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADnB,EAEKF,IAFL,CAEWG,IAAD,IAAUL,QAAQ,CAAC;AACrBM,IAAAA,IAAI,EAAEZ,aADe;AAErBa,IAAAA,OAAO,EAAEF;AAFY,GAAD,CAF5B;AAOH,CARM;AASP,OAAO,MAAMG,aAAa,GAAG,CAACC,UAAD,EAAaC,OAAb,KAA0BV,QAAD,IAAc;AAChEP,EAAAA,KAAK,CACJY,IADD,CACM,+CADN,EACuDI,UADvD,EAEKP,IAFL,CAEWC,GAAD,IAASO,OAAO,CAACC,IAAR,CAAa,cAAb,CAFnB,EAGKC,KAHL,CAGYC,GAAD,IAASb,QAAQ,CAAC;AACrBM,IAAAA,IAAI,EAAEX,SADe;AAErBY,IAAAA,OAAO,EAAEM,GAAG,CAACC,QAAJ,CAAaC;AAFD,GAAD,CAH5B;AAQH,CATM;AAUP,OAAO,MAAMC,aAAa,GAAIC,MAAD,IAAajB,QAAD,IAAc;AACnDP,EAAAA,KAAK,CAACyB,MAAN,CAAa,8CAAb,EACKhB,IADL,CACUC,GAAG,IAAIH,QAAQ,CAAC;AAClBO,IAAAA,OAAO,EAAEU;AADS,GAAD,CADzB;AAIH,CALM;AAMP,OAAO,MAAME,aAAa,GAAIC,MAAD,IAAapB,QAAD,IAAc;AACnDP,EAAAA,KAAK,CAAC4B,GAAN,CAAU,8CAAV,EACKnB,IADL,CACUC,GAAG,IAAIH,QAAQ,CAAC;AAClBO,IAAAA,OAAO,EAAEe,OAAO,CAACC,GAAR,CAAY,CAACH,MAAD,EAASjB,GAAG,CAACY,IAAb,CAAZ;AADS,GAAD,CADzB;AAIH,CALM;;AAMP,MAAMS,YAAY,GAAG,CAACC,QAAQ,GAAG,EAAZ,EAAgBC,aAAa,GAAG,EAAhC,EAAoCC,SAAS,GAAG,EAAhD,KAAuD,MAAO3B,QAAP,IAAoB;AAC5F,MAAI;AACAA,IAAAA,QAAQ,CAAC;AAAEM,MAAAA,IAAI,EAAET;AAAR,KAAD,CAAR;AACA,UAAM;AAAEkB,MAAAA;AAAF,QAAW,MAAMtB,KAAK,CAACQ,GAAN,CACnB,4BAA4BwB,QAA5B,GAAuC,iBAAvC,GAA2DC,aAA3D,GAA2E,aAA3E,GAA2FC,SADxE,CAAvB;AAGA3B,IAAAA,QAAQ,CAAC;AAAEM,MAAAA,IAAI,EAAER,oBAAR;AAA8BS,MAAAA,OAAO,EAAEQ;AAAvC,KAAD,CAAR;AACH,GAND,CAME,OAAOa,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;AACA/B,IAAAA,QAAQ,CAAC;AAAEM,MAAAA,IAAI,EAAEV,iBAAR;AAA2BW,MAAAA,OAAO,EAAEqB,KAAK,CAACG;AAA1C,KAAD,CAAR;AACH;AACJ,CAXD","sourcesContent":["import axios from \"axios\";\r\nimport {FETCH_PRODUCT, GET_ERROR, PRODUCT_LIST_FAIL, PRODUCT_LIST_REQUEST, PRODUCT_LIST_SUCCESS} from \"./constants\";\r\n\r\nexport const fetchProduct = () => (dispatch) => {\r\n    axios.get(\"http://localhost:3001/api/products/allProducts\")\r\n        .then((res) => res.json())\r\n        .then((post) => dispatch({\r\n            type: FETCH_PRODUCT,\r\n            payload: post,\r\n        })\r\n        );\r\n}\r\nexport const createProduct = (newProduct, history) => (dispatch) => {\r\n    axios\r\n    .post(\"http://localhost:3001/api/products/addProduct\", newProduct)\r\n        .then((res) => history.push(\"/allProducts\"))\r\n        .catch((err) => dispatch({\r\n            type: GET_ERROR,\r\n            payload: err.response.data,\r\n            })\r\n        )\r\n}\r\nexport const deleteProduct = (itemid) => (dispatch) => {\r\n    axios.delete(\"http://localhost:3001/api/products/${itemId}\")\r\n        .then(res => dispatch({\r\n            payload: itemid\r\n        }))\r\n}\r\nexport const updateProduct = (itemId) => (dispatch) => {\r\n    axios.put(\"http://localhost:3001/api/products/${itemId}\")\r\n        .then(res => dispatch({\r\n            payload: Promise.all([itemId, res.data])\r\n        }))\r\n}\r\nconst listProducts = (category = '', searchKeyword = '', sortOrder = '') => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: PRODUCT_LIST_REQUEST });\r\n        const { data } = await axios.get(\r\n            '/api/products?category=' + category + '&searchKeyword=' + searchKeyword + '&sortOrder=' + sortOrder\r\n        );\r\n        dispatch({ type: PRODUCT_LIST_SUCCESS, payload: data });\r\n    } catch (error) {\r\n        console.log(error.message);\r\n        dispatch({ type: PRODUCT_LIST_FAIL, payload: error.message });\r\n    }\r\n};\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}