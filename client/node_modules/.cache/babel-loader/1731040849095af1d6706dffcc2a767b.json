{"ast":null,"code":"'use strict';\n\nconst Denque = require('denque');\n\nconst EventEmitter = require('events');\n\nconst ServerDescription = require('./server_description').ServerDescription;\n\nconst ServerType = require('./common').ServerType;\n\nconst TopologyDescription = require('./topology_description').TopologyDescription;\n\nconst TopologyType = require('./common').TopologyType;\n\nconst events = require('./events');\n\nconst Server = require('./server').Server;\n\nconst relayEvents = require('../utils').relayEvents;\n\nconst ReadPreference = require('../topologies/read_preference');\n\nconst isRetryableWritesSupported = require('../topologies/shared').isRetryableWritesSupported;\n\nconst CoreCursor = require('../cursor').CoreCursor;\n\nconst deprecate = require('util').deprecate;\n\nconst BSON = require('../connection/utils').retrieveBSON();\n\nconst createCompressionInfo = require('../topologies/shared').createCompressionInfo;\n\nconst ClientSession = require('../sessions').ClientSession;\n\nconst MongoError = require('../error').MongoError;\n\nconst MongoServerSelectionError = require('../error').MongoServerSelectionError;\n\nconst resolveClusterTime = require('../topologies/shared').resolveClusterTime;\n\nconst SrvPoller = require('./srv_polling').SrvPoller;\n\nconst getMMAPError = require('../topologies/shared').getMMAPError;\n\nconst makeStateMachine = require('../utils').makeStateMachine;\n\nconst eachAsync = require('../utils').eachAsync;\n\nconst emitDeprecationWarning = require('../../utils').emitDeprecationWarning;\n\nconst ServerSessionPool = require('../sessions').ServerSessionPool;\n\nconst makeClientMetadata = require('../utils').makeClientMetadata;\n\nconst CMAP_EVENT_NAMES = require('../../cmap/events').CMAP_EVENT_NAMES;\n\nconst compareTopologyVersion = require('./server_description').compareTopologyVersion;\n\nconst emitWarning = require('../../utils').emitWarning;\n\nconst common = require('./common');\n\nconst drainTimerQueue = common.drainTimerQueue;\nconst clearAndRemoveTimerFrom = common.clearAndRemoveTimerFrom;\n\nconst serverSelection = require('./server_selection');\n\nconst readPreferenceServerSelector = serverSelection.readPreferenceServerSelector;\nconst writableServerSelector = serverSelection.writableServerSelector; // Global state\n\nlet globalTopologyCounter = 0; // events that we relay to the `Topology`\n\nconst SERVER_RELAY_EVENTS = ['serverHeartbeatStarted', 'serverHeartbeatSucceeded', 'serverHeartbeatFailed', 'commandStarted', 'commandSucceeded', 'commandFailed', // NOTE: Legacy events\n'monitoring'].concat(CMAP_EVENT_NAMES); // all events we listen to from `Server` instances\n\nconst LOCAL_SERVER_EVENTS = ['connect', 'descriptionReceived', 'close', 'ended'];\nconst STATE_CLOSING = common.STATE_CLOSING;\nconst STATE_CLOSED = common.STATE_CLOSED;\nconst STATE_CONNECTING = common.STATE_CONNECTING;\nconst STATE_CONNECTED = common.STATE_CONNECTED;\nconst stateTransition = makeStateMachine({\n  [STATE_CLOSED]: [STATE_CLOSED, STATE_CONNECTING],\n  [STATE_CONNECTING]: [STATE_CONNECTING, STATE_CLOSING, STATE_CONNECTED, STATE_CLOSED],\n  [STATE_CONNECTED]: [STATE_CONNECTED, STATE_CLOSING, STATE_CLOSED],\n  [STATE_CLOSING]: [STATE_CLOSING, STATE_CLOSED]\n});\nconst DEPRECATED_OPTIONS = new Set(['autoReconnect', 'reconnectTries', 'reconnectInterval', 'bufferMaxEntries']);\nconst kCancelled = Symbol('cancelled');\nconst kWaitQueue = Symbol('waitQueue');\n/**\r\n * A container of server instances representing a connection to a MongoDB topology.\r\n *\r\n * @fires Topology#serverOpening\r\n * @fires Topology#serverClosed\r\n * @fires Topology#serverDescriptionChanged\r\n * @fires Topology#topologyOpening\r\n * @fires Topology#topologyClosed\r\n * @fires Topology#topologyDescriptionChanged\r\n * @fires Topology#serverHeartbeatStarted\r\n * @fires Topology#serverHeartbeatSucceeded\r\n * @fires Topology#serverHeartbeatFailed\r\n */\n\nclass Topology extends EventEmitter {\n  /**\r\n   * Create a topology\r\n   *\r\n   * @param {Array|String} [seedlist] a string list, or array of Server instances to connect to\r\n   * @param {Object} [options] Optional settings\r\n   * @param {Number} [options.localThresholdMS=15] The size of the latency window for selecting among multiple suitable servers\r\n   * @param {Number} [options.serverSelectionTimeoutMS=30000] How long to block for server selection before throwing an error\r\n   * @param {Number} [options.heartbeatFrequencyMS=10000] The frequency with which topology updates are scheduled\r\n   */\n  constructor(seedlist, options) {\n    super();\n\n    if (typeof options === 'undefined' && typeof seedlist !== 'string') {\n      options = seedlist;\n      seedlist = []; // this is for legacy single server constructor support\n\n      if (options.host) {\n        seedlist.push({\n          host: options.host,\n          port: options.port\n        });\n      }\n    }\n\n    seedlist = seedlist || [];\n\n    if (typeof seedlist === 'string') {\n      seedlist = parseStringSeedlist(seedlist);\n    }\n\n    options = Object.assign({}, common.TOPOLOGY_DEFAULTS, options);\n    options = Object.freeze(Object.assign(options, {\n      metadata: makeClientMetadata(options),\n      compression: {\n        compressors: createCompressionInfo(options)\n      }\n    }));\n    DEPRECATED_OPTIONS.forEach(optionName => {\n      if (options[optionName]) {\n        emitDeprecationWarning(`The option \\`${optionName}\\` is incompatible with the unified topology, please read more by visiting http://bit.ly/2D8WfT6`, 'DeprecationWarning');\n      }\n    });\n    const topologyType = topologyTypeFromSeedlist(seedlist, options);\n    const topologyId = globalTopologyCounter++;\n    const serverDescriptions = seedlist.reduce((result, seed) => {\n      if (seed.domain_socket) seed.host = seed.domain_socket;\n      const address = seed.port ? `${seed.host}:${seed.port}` : `${seed.host}:27017`;\n      result.set(address, new ServerDescription(address));\n      return result;\n    }, new Map());\n    this[kWaitQueue] = new Denque();\n    this.s = {\n      // the id of this topology\n      id: topologyId,\n      // passed in options\n      options,\n      // initial seedlist of servers to connect to\n      seedlist: seedlist,\n      // initial state\n      state: STATE_CLOSED,\n      // the topology description\n      description: new TopologyDescription(topologyType, serverDescriptions, options.replicaSet, null, null, null, options),\n      serverSelectionTimeoutMS: options.serverSelectionTimeoutMS,\n      heartbeatFrequencyMS: options.heartbeatFrequencyMS,\n      minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS,\n      // allow users to override the cursor factory\n      Cursor: options.cursorFactory || CoreCursor,\n      // the bson parser\n      bson: options.bson || new BSON([BSON.Binary, BSON.Code, BSON.DBRef, BSON.Decimal128, BSON.Double, BSON.Int32, BSON.Long, BSON.Map, BSON.MaxKey, BSON.MinKey, BSON.ObjectId, BSON.BSONRegExp, BSON.Symbol, BSON.Timestamp]),\n      // a map of server instances to normalized addresses\n      servers: new Map(),\n      // Server Session Pool\n      sessionPool: new ServerSessionPool(this),\n      // Active client sessions\n      sessions: new Set(),\n      // Promise library\n      promiseLibrary: options.promiseLibrary || Promise,\n      credentials: options.credentials,\n      clusterTime: null,\n      // timer management\n      connectionTimers: new Set()\n    };\n\n    if (options.srvHost) {\n      this.s.srvPoller = options.srvPoller || new SrvPoller({\n        heartbeatFrequencyMS: this.s.heartbeatFrequencyMS,\n        srvHost: options.srvHost,\n        // TODO: GET THIS\n        logger: options.logger,\n        loggerLevel: options.loggerLevel\n      });\n\n      this.s.detectTopologyDescriptionChange = ev => {\n        const previousType = ev.previousDescription.type;\n        const newType = ev.newDescription.type;\n\n        if (previousType !== TopologyType.Sharded && newType === TopologyType.Sharded) {\n          this.s.handleSrvPolling = srvPollingHandler(this);\n          this.s.srvPoller.on('srvRecordDiscovery', this.s.handleSrvPolling);\n          this.s.srvPoller.start();\n        }\n      };\n\n      this.on('topologyDescriptionChanged', this.s.detectTopologyDescriptionChange);\n    } // NOTE: remove this when NODE-1709 is resolved\n\n\n    this.setMaxListeners(Infinity);\n  }\n  /**\r\n   * @return A `TopologyDescription` for this topology\r\n   */\n\n\n  get description() {\n    return this.s.description;\n  }\n\n  get parserType() {\n    return BSON.native ? 'c++' : 'js';\n  }\n  /**\r\n   * Initiate server connect\r\n   *\r\n   * @param {Object} [options] Optional settings\r\n   * @param {Array} [options.auth=null] Array of auth options to apply on connect\r\n   * @param {function} [callback] An optional callback called once on the first connected server\r\n   */\n\n\n  connect(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options || {};\n\n    if (this.s.state === STATE_CONNECTED) {\n      if (typeof callback === 'function') {\n        callback();\n      }\n\n      return;\n    }\n\n    stateTransition(this, STATE_CONNECTING); // emit SDAM monitoring events\n\n    this.emit('topologyOpening', new events.TopologyOpeningEvent(this.s.id)); // emit an event for the topology change\n\n    this.emit('topologyDescriptionChanged', new events.TopologyDescriptionChangedEvent(this.s.id, new TopologyDescription(TopologyType.Unknown), // initial is always Unknown\n    this.s.description)); // connect all known servers, then attempt server selection to connect\n\n    connectServers(this, Array.from(this.s.description.servers.values()));\n    ReadPreference.translate(options);\n    const readPreference = options.readPreference || ReadPreference.primary;\n\n    const connectHandler = err => {\n      if (err) {\n        this.close();\n\n        if (typeof callback === 'function') {\n          callback(err);\n        } else {\n          this.emit('error', err);\n        }\n\n        return;\n      }\n\n      stateTransition(this, STATE_CONNECTED);\n      this.emit('open', err, this);\n      this.emit('connect', this);\n      if (typeof callback === 'function') callback(err, this);\n    }; // TODO: NODE-2471\n\n\n    if (this.s.credentials) {\n      this.command('admin.$cmd', {\n        ping: 1\n      }, {\n        readPreference\n      }, connectHandler);\n      return;\n    }\n\n    this.selectServer(readPreferenceServerSelector(readPreference), options, connectHandler);\n  }\n  /**\r\n   * Close this topology\r\n   */\n\n\n  close(options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    if (typeof options === 'boolean') {\n      options = {\n        force: options\n      };\n    }\n\n    options = options || {};\n\n    if (this.s.state === STATE_CLOSED || this.s.state === STATE_CLOSING) {\n      if (typeof callback === 'function') {\n        callback();\n      }\n\n      return;\n    }\n\n    stateTransition(this, STATE_CLOSING);\n    drainWaitQueue(this[kWaitQueue], new MongoError('Topology closed'));\n    drainTimerQueue(this.s.connectionTimers);\n\n    if (this.s.srvPoller) {\n      this.s.srvPoller.stop();\n\n      if (this.s.handleSrvPolling) {\n        this.s.srvPoller.removeListener('srvRecordDiscovery', this.s.handleSrvPolling);\n        delete this.s.handleSrvPolling;\n      }\n    }\n\n    if (this.s.detectTopologyDescriptionChange) {\n      this.removeListener('topologyDescriptionChanged', this.s.detectTopologyDescriptionChange);\n      delete this.s.detectTopologyDescriptionChange;\n    }\n\n    this.s.sessions.forEach(session => session.endSession());\n    this.s.sessionPool.endAllPooledSessions(() => {\n      eachAsync(Array.from(this.s.servers.values()), (server, cb) => destroyServer(server, this, options, cb), err => {\n        this.s.servers.clear(); // emit an event for close\n\n        this.emit('topologyClosed', new events.TopologyClosedEvent(this.s.id));\n        stateTransition(this, STATE_CLOSED);\n        this.emit('close');\n\n        if (typeof callback === 'function') {\n          callback(err);\n        }\n      });\n    });\n  }\n  /**\r\n   * Selects a server according to the selection predicate provided\r\n   *\r\n   * @param {function} [selector] An optional selector to select servers by, defaults to a random selection within a latency window\r\n   * @param {object} [options] Optional settings related to server selection\r\n   * @param {number} [options.serverSelectionTimeoutMS] How long to block for server selection before throwing an error\r\n   * @param {function} callback The callback used to indicate success or failure\r\n   * @return {Server} An instance of a `Server` meeting the criteria of the predicate provided\r\n   */\n\n\n  selectServer(selector, options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n\n      if (typeof selector !== 'function') {\n        options = selector;\n        let readPreference;\n\n        if (selector instanceof ReadPreference) {\n          readPreference = selector;\n        } else if (typeof selector === 'string') {\n          readPreference = new ReadPreference(selector);\n        } else {\n          ReadPreference.translate(options);\n          readPreference = options.readPreference || ReadPreference.primary;\n        }\n\n        selector = readPreferenceServerSelector(readPreference);\n      } else {\n        options = {};\n      }\n    }\n\n    options = Object.assign({}, {\n      serverSelectionTimeoutMS: this.s.serverSelectionTimeoutMS\n    }, options);\n    const isSharded = this.description.type === TopologyType.Sharded;\n    const session = options.session;\n    const transaction = session && session.transaction;\n\n    if (isSharded && transaction && transaction.server) {\n      callback(undefined, transaction.server);\n      return;\n    } // support server selection by options with readPreference\n\n\n    let serverSelector = selector;\n\n    if (typeof selector === 'object') {\n      const readPreference = selector.readPreference ? selector.readPreference : ReadPreference.primary;\n      serverSelector = readPreferenceServerSelector(readPreference);\n    }\n\n    const waitQueueMember = {\n      serverSelector,\n      transaction,\n      callback\n    };\n    const serverSelectionTimeoutMS = options.serverSelectionTimeoutMS;\n\n    if (serverSelectionTimeoutMS) {\n      waitQueueMember.timer = setTimeout(() => {\n        waitQueueMember[kCancelled] = true;\n        waitQueueMember.timer = undefined;\n        const timeoutError = new MongoServerSelectionError(`Server selection timed out after ${serverSelectionTimeoutMS} ms`, this.description);\n        waitQueueMember.callback(timeoutError);\n      }, serverSelectionTimeoutMS);\n    }\n\n    this[kWaitQueue].push(waitQueueMember);\n    processWaitQueue(this);\n  } // Sessions related methods\n\n  /**\r\n   * @return Whether the topology should initiate selection to determine session support\r\n   */\n\n\n  shouldCheckForSessionSupport() {\n    if (this.description.type === TopologyType.Single) {\n      return !this.description.hasKnownServers;\n    }\n\n    return !this.description.hasDataBearingServers;\n  }\n  /**\r\n   * @return Whether sessions are supported on the current topology\r\n   */\n\n\n  hasSessionSupport() {\n    return this.description.logicalSessionTimeoutMinutes != null;\n  }\n  /**\r\n   * Start a logical session\r\n   */\n\n\n  startSession(options, clientOptions) {\n    const session = new ClientSession(this, this.s.sessionPool, options, clientOptions);\n    session.once('ended', () => {\n      this.s.sessions.delete(session);\n    });\n    this.s.sessions.add(session);\n    return session;\n  }\n  /**\r\n   * Send endSessions command(s) with the given session ids\r\n   *\r\n   * @param {Array} sessions The sessions to end\r\n   * @param {function} [callback]\r\n   */\n\n\n  endSessions(sessions, callback) {\n    if (!Array.isArray(sessions)) {\n      sessions = [sessions];\n    }\n\n    this.command('admin.$cmd', {\n      endSessions: sessions\n    }, {\n      readPreference: ReadPreference.primaryPreferred,\n      noResponse: true\n    }, () => {\n      // intentionally ignored, per spec\n      if (typeof callback === 'function') callback();\n    });\n  }\n  /**\r\n   * Update the internal TopologyDescription with a ServerDescription\r\n   *\r\n   * @param {object} serverDescription The server to update in the internal list of server descriptions\r\n   */\n\n\n  serverUpdateHandler(serverDescription) {\n    if (!this.s.description.hasServer(serverDescription.address)) {\n      return;\n    } // ignore this server update if its from an outdated topologyVersion\n\n\n    if (isStaleServerDescription(this.s.description, serverDescription)) {\n      return;\n    } // these will be used for monitoring events later\n\n\n    const previousTopologyDescription = this.s.description;\n    const previousServerDescription = this.s.description.servers.get(serverDescription.address); // Driver Sessions Spec: \"Whenever a driver receives a cluster time from\n    // a server it MUST compare it to the current highest seen cluster time\n    // for the deployment. If the new cluster time is higher than the\n    // highest seen cluster time it MUST become the new highest seen cluster\n    // time. Two cluster times are compared using only the BsonTimestamp\n    // value of the clusterTime embedded field.\"\n\n    const clusterTime = serverDescription.$clusterTime;\n\n    if (clusterTime) {\n      resolveClusterTime(this, clusterTime);\n    } // If we already know all the information contained in this updated description, then\n    // we don't need to emit SDAM events, but still need to update the description, in order\n    // to keep client-tracked attributes like last update time and round trip time up to date\n\n\n    const equalDescriptions = previousServerDescription && previousServerDescription.equals(serverDescription); // first update the TopologyDescription\n\n    this.s.description = this.s.description.update(serverDescription);\n\n    if (this.s.description.compatibilityError) {\n      this.emit('error', new MongoError(this.s.description.compatibilityError));\n      return;\n    } // emit monitoring events for this change\n\n\n    if (!equalDescriptions) {\n      this.emit('serverDescriptionChanged', new events.ServerDescriptionChangedEvent(this.s.id, serverDescription.address, previousServerDescription, this.s.description.servers.get(serverDescription.address)));\n    } // update server list from updated descriptions\n\n\n    updateServers(this, serverDescription); // attempt to resolve any outstanding server selection attempts\n\n    if (this[kWaitQueue].length > 0) {\n      processWaitQueue(this);\n    }\n\n    if (!equalDescriptions) {\n      this.emit('topologyDescriptionChanged', new events.TopologyDescriptionChangedEvent(this.s.id, previousTopologyDescription, this.s.description));\n    }\n  }\n\n  auth(credentials, callback) {\n    if (typeof credentials === 'function') callback = credentials, credentials = null;\n    if (typeof callback === 'function') callback(null, true);\n  }\n\n  logout(callback) {\n    if (typeof callback === 'function') callback(null, true);\n  } // Basic operation support. Eventually this should be moved into command construction\n  // during the command refactor.\n\n  /**\r\n   * Insert one or more documents\r\n   *\r\n   * @param {String} ns The full qualified namespace for this operation\r\n   * @param {Array} ops An array of documents to insert\r\n   * @param {Boolean} [options.ordered=true] Execute in order or out of order\r\n   * @param {Object} [options.writeConcern] Write concern for the operation\r\n   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized\r\n   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields\r\n   * @param {ClientSession} [options.session] Session to use for the operation\r\n   * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\r\n   * @param {opResultCallback} callback A callback function\r\n   */\n\n\n  insert(ns, ops, options, callback) {\n    executeWriteOperation({\n      topology: this,\n      op: 'insert',\n      ns,\n      ops\n    }, options, callback);\n  }\n  /**\r\n   * Perform one or more update operations\r\n   *\r\n   * @param {string} ns The fully qualified namespace for this operation\r\n   * @param {array} ops An array of updates\r\n   * @param {boolean} [options.ordered=true] Execute in order or out of order\r\n   * @param {object} [options.writeConcern] Write concern for the operation\r\n   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized\r\n   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields\r\n   * @param {ClientSession} [options.session] Session to use for the operation\r\n   * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\r\n   * @param {opResultCallback} callback A callback function\r\n   */\n\n\n  update(ns, ops, options, callback) {\n    executeWriteOperation({\n      topology: this,\n      op: 'update',\n      ns,\n      ops\n    }, options, callback);\n  }\n  /**\r\n   * Perform one or more remove operations\r\n   *\r\n   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\r\n   * @param {array} ops An array of removes\r\n   * @param {boolean} [options.ordered=true] Execute in order or out of order\r\n   * @param {object} [options.writeConcern={}] Write concern for the operation\r\n   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\r\n   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\r\n   * @param {ClientSession} [options.session=null] Session to use for the operation\r\n   * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\r\n   * @param {opResultCallback} callback A callback function\r\n   */\n\n\n  remove(ns, ops, options, callback) {\n    executeWriteOperation({\n      topology: this,\n      op: 'remove',\n      ns,\n      ops\n    }, options, callback);\n  }\n  /**\r\n   * Execute a command\r\n   *\r\n   * @method\r\n   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\r\n   * @param {object} cmd The command hash\r\n   * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\r\n   * @param {Connection} [options.connection] Specify connection object to execute command against\r\n   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\r\n   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\r\n   * @param {ClientSession} [options.session=null] Session to use for the operation\r\n   * @param {opResultCallback} callback A callback function\r\n   */\n\n\n  command(ns, cmd, options, callback) {\n    if (typeof options === 'function') {\n      callback = options, options = {}, options = options || {};\n    }\n\n    ReadPreference.translate(options);\n    const readPreference = options.readPreference || ReadPreference.primary;\n    this.selectServer(readPreferenceServerSelector(readPreference), options, (err, server) => {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      const willRetryWrite = !options.retrying && !!options.retryWrites && options.session && isRetryableWritesSupported(this) && !options.session.inTransaction() && isWriteCommand(cmd);\n\n      const cb = (err, result) => {\n        if (!err) return callback(null, result);\n\n        if (!shouldRetryOperation(err)) {\n          return callback(err);\n        }\n\n        if (willRetryWrite) {\n          const newOptions = Object.assign({}, options, {\n            retrying: true\n          });\n          return this.command(ns, cmd, newOptions, callback);\n        }\n\n        return callback(err);\n      }; // increment and assign txnNumber\n\n\n      if (willRetryWrite) {\n        options.session.incrementTransactionNumber();\n        options.willRetryWrite = willRetryWrite;\n      }\n\n      server.command(ns, cmd, options, cb);\n    });\n  }\n  /**\r\n   * Create a new cursor\r\n   *\r\n   * @method\r\n   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\r\n   * @param {object|Long} cmd Can be either a command returning a cursor or a cursorId\r\n   * @param {object} [options] Options for the cursor\r\n   * @param {object} [options.batchSize=0] Batchsize for the operation\r\n   * @param {array} [options.documents=[]] Initial documents list for cursor\r\n   * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\r\n   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\r\n   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\r\n   * @param {ClientSession} [options.session=null] Session to use for the operation\r\n   * @param {object} [options.topology] The internal topology of the created cursor\r\n   * @returns {Cursor}\r\n   */\n\n\n  cursor(ns, cmd, options) {\n    options = options || {};\n    const topology = options.topology || this;\n    const CursorClass = options.cursorFactory || this.s.Cursor;\n    ReadPreference.translate(options);\n    return new CursorClass(topology, ns, cmd, options);\n  }\n\n  get clientMetadata() {\n    return this.s.options.metadata;\n  }\n\n  isConnected() {\n    return this.s.state === STATE_CONNECTED;\n  }\n\n  isDestroyed() {\n    return this.s.state === STATE_CLOSED;\n  }\n\n  unref() {\n    emitWarning('not implemented: `unref`');\n  } // NOTE: There are many places in code where we explicitly check the last isMaster\n  //       to do feature support detection. This should be done any other way, but for\n  //       now we will just return the first isMaster seen, which should suffice.\n\n\n  lastIsMaster() {\n    const serverDescriptions = Array.from(this.description.servers.values());\n    if (serverDescriptions.length === 0) return {};\n    const sd = serverDescriptions.filter(sd => sd.type !== ServerType.Unknown)[0];\n    const result = sd || {\n      maxWireVersion: this.description.commonWireVersion\n    };\n    return result;\n  }\n\n  get logicalSessionTimeoutMinutes() {\n    return this.description.logicalSessionTimeoutMinutes;\n  }\n\n  get bson() {\n    return this.s.bson;\n  }\n\n}\n\nObject.defineProperty(Topology.prototype, 'clusterTime', {\n  enumerable: true,\n  get: function () {\n    return this.s.clusterTime;\n  },\n  set: function (clusterTime) {\n    this.s.clusterTime = clusterTime;\n  }\n}); // legacy aliases\n\nTopology.prototype.destroy = deprecate(Topology.prototype.close, 'destroy() is deprecated, please use close() instead');\nconst RETRYABLE_WRITE_OPERATIONS = ['findAndModify', 'insert', 'update', 'delete'];\n\nfunction isWriteCommand(command) {\n  return RETRYABLE_WRITE_OPERATIONS.some(op => command[op]);\n}\n\nfunction isStaleServerDescription(topologyDescription, incomingServerDescription) {\n  const currentServerDescription = topologyDescription.servers.get(incomingServerDescription.address);\n  const currentTopologyVersion = currentServerDescription.topologyVersion;\n  return compareTopologyVersion(currentTopologyVersion, incomingServerDescription.topologyVersion) > 0;\n}\n/**\r\n * Destroys a server, and removes all event listeners from the instance\r\n *\r\n * @param {Server} server\r\n */\n\n\nfunction destroyServer(server, topology, options, callback) {\n  options = options || {};\n  LOCAL_SERVER_EVENTS.forEach(event => server.removeAllListeners(event));\n  server.destroy(options, () => {\n    topology.emit('serverClosed', new events.ServerClosedEvent(topology.s.id, server.description.address));\n    SERVER_RELAY_EVENTS.forEach(event => server.removeAllListeners(event));\n\n    if (typeof callback === 'function') {\n      callback();\n    }\n  });\n}\n/**\r\n * Parses a basic seedlist in string form\r\n *\r\n * @param {string} seedlist The seedlist to parse\r\n */\n\n\nfunction parseStringSeedlist(seedlist) {\n  return seedlist.split(',').map(seed => ({\n    host: seed.split(':')[0],\n    port: seed.split(':')[1] || 27017\n  }));\n}\n\nfunction topologyTypeFromSeedlist(seedlist, options) {\n  if (options.directConnection) {\n    return TopologyType.Single;\n  }\n\n  const replicaSet = options.replicaSet || options.setName || options.rs_name;\n\n  if (replicaSet == null) {\n    return TopologyType.Unknown;\n  }\n\n  return TopologyType.ReplicaSetNoPrimary;\n}\n\nfunction randomSelection(array) {\n  return array[Math.floor(Math.random() * array.length)];\n}\n\nfunction createAndConnectServer(topology, serverDescription, connectDelay) {\n  topology.emit('serverOpening', new events.ServerOpeningEvent(topology.s.id, serverDescription.address));\n  const server = new Server(serverDescription, topology.s.options, topology);\n  relayEvents(server, topology, SERVER_RELAY_EVENTS);\n  server.on('descriptionReceived', topology.serverUpdateHandler.bind(topology));\n\n  if (connectDelay) {\n    const connectTimer = setTimeout(() => {\n      clearAndRemoveTimerFrom(connectTimer, topology.s.connectionTimers);\n      server.connect();\n    }, connectDelay);\n    topology.s.connectionTimers.add(connectTimer);\n    return server;\n  }\n\n  server.connect();\n  return server;\n}\n/**\r\n * Create `Server` instances for all initially known servers, connect them, and assign\r\n * them to the passed in `Topology`.\r\n *\r\n * @param {Topology} topology The topology responsible for the servers\r\n * @param {ServerDescription[]} serverDescriptions A list of server descriptions to connect\r\n */\n\n\nfunction connectServers(topology, serverDescriptions) {\n  topology.s.servers = serverDescriptions.reduce((servers, serverDescription) => {\n    const server = createAndConnectServer(topology, serverDescription);\n    servers.set(serverDescription.address, server);\n    return servers;\n  }, new Map());\n}\n\nfunction updateServers(topology, incomingServerDescription) {\n  // update the internal server's description\n  if (incomingServerDescription && topology.s.servers.has(incomingServerDescription.address)) {\n    const server = topology.s.servers.get(incomingServerDescription.address);\n    server.s.description = incomingServerDescription;\n  } // add new servers for all descriptions we currently don't know about locally\n\n\n  for (const serverDescription of topology.description.servers.values()) {\n    if (!topology.s.servers.has(serverDescription.address)) {\n      const server = createAndConnectServer(topology, serverDescription);\n      topology.s.servers.set(serverDescription.address, server);\n    }\n  } // for all servers no longer known, remove their descriptions and destroy their instances\n\n\n  for (const entry of topology.s.servers) {\n    const serverAddress = entry[0];\n\n    if (topology.description.hasServer(serverAddress)) {\n      continue;\n    }\n\n    const server = topology.s.servers.get(serverAddress);\n    topology.s.servers.delete(serverAddress); // prepare server for garbage collection\n\n    destroyServer(server, topology);\n  }\n}\n\nfunction executeWriteOperation(args, options, callback) {\n  if (typeof options === 'function') callback = options, options = {};\n  options = options || {}; // TODO: once we drop Node 4, use destructuring either here or in arguments.\n\n  const topology = args.topology;\n  const op = args.op;\n  const ns = args.ns;\n  const ops = args.ops;\n  const willRetryWrite = !args.retrying && !!options.retryWrites && options.session && isRetryableWritesSupported(topology) && !options.session.inTransaction() && options.explain === undefined;\n  topology.selectServer(writableServerSelector(), options, (err, server) => {\n    if (err) {\n      callback(err, null);\n      return;\n    }\n\n    const handler = (err, result) => {\n      if (!err) return callback(null, result);\n\n      if (!shouldRetryOperation(err)) {\n        err = getMMAPError(err);\n        return callback(err);\n      }\n\n      if (willRetryWrite) {\n        const newArgs = Object.assign({}, args, {\n          retrying: true\n        });\n        return executeWriteOperation(newArgs, options, callback);\n      }\n\n      return callback(err);\n    };\n\n    if (callback.operationId) {\n      handler.operationId = callback.operationId;\n    } // increment and assign txnNumber\n\n\n    if (willRetryWrite) {\n      options.session.incrementTransactionNumber();\n      options.willRetryWrite = willRetryWrite;\n    } // execute the write operation\n\n\n    server[op](ns, ops, options, handler);\n  });\n}\n\nfunction shouldRetryOperation(err) {\n  return err instanceof MongoError && err.hasErrorLabel('RetryableWriteError');\n}\n\nfunction srvPollingHandler(topology) {\n  return function handleSrvPolling(ev) {\n    const previousTopologyDescription = topology.s.description;\n    topology.s.description = topology.s.description.updateFromSrvPollingEvent(ev);\n\n    if (topology.s.description === previousTopologyDescription) {\n      // Nothing changed, so return\n      return;\n    }\n\n    updateServers(topology);\n    topology.emit('topologyDescriptionChanged', new events.TopologyDescriptionChangedEvent(topology.s.id, previousTopologyDescription, topology.s.description));\n  };\n}\n\nfunction drainWaitQueue(queue, err) {\n  while (queue.length) {\n    const waitQueueMember = queue.shift();\n    clearTimeout(waitQueueMember.timer);\n\n    if (!waitQueueMember[kCancelled]) {\n      waitQueueMember.callback(err);\n    }\n  }\n}\n\nfunction processWaitQueue(topology) {\n  if (topology.s.state === STATE_CLOSED) {\n    drainWaitQueue(topology[kWaitQueue], new MongoError('Topology is closed, please connect'));\n    return;\n  }\n\n  const serverDescriptions = Array.from(topology.description.servers.values());\n  const membersToProcess = topology[kWaitQueue].length;\n\n  for (let i = 0; i < membersToProcess && topology[kWaitQueue].length; ++i) {\n    const waitQueueMember = topology[kWaitQueue].shift();\n\n    if (waitQueueMember[kCancelled]) {\n      continue;\n    }\n\n    let selectedDescriptions;\n\n    try {\n      const serverSelector = waitQueueMember.serverSelector;\n      selectedDescriptions = serverSelector ? serverSelector(topology.description, serverDescriptions) : serverDescriptions;\n    } catch (e) {\n      clearTimeout(waitQueueMember.timer);\n      waitQueueMember.callback(e);\n      continue;\n    }\n\n    if (selectedDescriptions.length === 0) {\n      topology[kWaitQueue].push(waitQueueMember);\n      continue;\n    }\n\n    const selectedServerDescription = randomSelection(selectedDescriptions);\n    const selectedServer = topology.s.servers.get(selectedServerDescription.address);\n    const transaction = waitQueueMember.transaction;\n    const isSharded = topology.description.type === TopologyType.Sharded;\n\n    if (isSharded && transaction && transaction.isActive) {\n      transaction.pinServer(selectedServer);\n    }\n\n    clearTimeout(waitQueueMember.timer);\n    waitQueueMember.callback(undefined, selectedServer);\n  }\n\n  if (topology[kWaitQueue].length > 0) {\n    // ensure all server monitors attempt monitoring soon\n    topology.s.servers.forEach(server => process.nextTick(() => server.requestCheck()));\n  }\n}\n/**\r\n * A server opening SDAM monitoring event\r\n *\r\n * @event Topology#serverOpening\r\n * @type {ServerOpeningEvent}\r\n */\n\n/**\r\n * A server closed SDAM monitoring event\r\n *\r\n * @event Topology#serverClosed\r\n * @type {ServerClosedEvent}\r\n */\n\n/**\r\n * A server description SDAM change monitoring event\r\n *\r\n * @event Topology#serverDescriptionChanged\r\n * @type {ServerDescriptionChangedEvent}\r\n */\n\n/**\r\n * A topology open SDAM event\r\n *\r\n * @event Topology#topologyOpening\r\n * @type {TopologyOpeningEvent}\r\n */\n\n/**\r\n * A topology closed SDAM event\r\n *\r\n * @event Topology#topologyClosed\r\n * @type {TopologyClosedEvent}\r\n */\n\n/**\r\n * A topology structure SDAM change event\r\n *\r\n * @event Topology#topologyDescriptionChanged\r\n * @type {TopologyDescriptionChangedEvent}\r\n */\n\n/**\r\n * A topology serverHeartbeatStarted SDAM event\r\n *\r\n * @event Topology#serverHeartbeatStarted\r\n * @type {ServerHeartbeatStartedEvent}\r\n */\n\n/**\r\n * A topology serverHeartbeatFailed SDAM event\r\n *\r\n * @event Topology#serverHeartbeatFailed\r\n * @type {ServerHearbeatFailedEvent}\r\n */\n\n/**\r\n * A topology serverHeartbeatSucceeded SDAM change event\r\n *\r\n * @event Topology#serverHeartbeatSucceeded\r\n * @type {ServerHeartbeatSucceededEvent}\r\n */\n\n/**\r\n * An event emitted indicating a command was started, if command monitoring is enabled\r\n *\r\n * @event Topology#commandStarted\r\n * @type {object}\r\n */\n\n/**\r\n * An event emitted indicating a command succeeded, if command monitoring is enabled\r\n *\r\n * @event Topology#commandSucceeded\r\n * @type {object}\r\n */\n\n/**\r\n * An event emitted indicating a command failed, if command monitoring is enabled\r\n *\r\n * @event Topology#commandFailed\r\n * @type {object}\r\n */\n\n\nmodule.exports = {\n  Topology\n};","map":{"version":3,"sources":["C:/Users/Tanja Aakerholt/Documents/GitHub/portfolio2/client/node_modules/mongodb/lib/core/sdam/topology.js"],"names":["Denque","require","EventEmitter","ServerDescription","ServerType","TopologyDescription","TopologyType","events","Server","relayEvents","ReadPreference","isRetryableWritesSupported","CoreCursor","deprecate","BSON","retrieveBSON","createCompressionInfo","ClientSession","MongoError","MongoServerSelectionError","resolveClusterTime","SrvPoller","getMMAPError","makeStateMachine","eachAsync","emitDeprecationWarning","ServerSessionPool","makeClientMetadata","CMAP_EVENT_NAMES","compareTopologyVersion","emitWarning","common","drainTimerQueue","clearAndRemoveTimerFrom","serverSelection","readPreferenceServerSelector","writableServerSelector","globalTopologyCounter","SERVER_RELAY_EVENTS","concat","LOCAL_SERVER_EVENTS","STATE_CLOSING","STATE_CLOSED","STATE_CONNECTING","STATE_CONNECTED","stateTransition","DEPRECATED_OPTIONS","Set","kCancelled","Symbol","kWaitQueue","Topology","constructor","seedlist","options","host","push","port","parseStringSeedlist","Object","assign","TOPOLOGY_DEFAULTS","freeze","metadata","compression","compressors","forEach","optionName","topologyType","topologyTypeFromSeedlist","topologyId","serverDescriptions","reduce","result","seed","domain_socket","address","set","Map","s","id","state","description","replicaSet","serverSelectionTimeoutMS","heartbeatFrequencyMS","minHeartbeatFrequencyMS","Cursor","cursorFactory","bson","Binary","Code","DBRef","Decimal128","Double","Int32","Long","MaxKey","MinKey","ObjectId","BSONRegExp","Timestamp","servers","sessionPool","sessions","promiseLibrary","Promise","credentials","clusterTime","connectionTimers","srvHost","srvPoller","logger","loggerLevel","detectTopologyDescriptionChange","ev","previousType","previousDescription","type","newType","newDescription","Sharded","handleSrvPolling","srvPollingHandler","on","start","setMaxListeners","Infinity","parserType","native","connect","callback","emit","TopologyOpeningEvent","TopologyDescriptionChangedEvent","Unknown","connectServers","Array","from","values","translate","readPreference","primary","connectHandler","err","close","command","ping","selectServer","force","drainWaitQueue","stop","removeListener","session","endSession","endAllPooledSessions","server","cb","destroyServer","clear","TopologyClosedEvent","selector","isSharded","transaction","undefined","serverSelector","waitQueueMember","timer","setTimeout","timeoutError","processWaitQueue","shouldCheckForSessionSupport","Single","hasKnownServers","hasDataBearingServers","hasSessionSupport","logicalSessionTimeoutMinutes","startSession","clientOptions","once","delete","add","endSessions","isArray","primaryPreferred","noResponse","serverUpdateHandler","serverDescription","hasServer","isStaleServerDescription","previousTopologyDescription","previousServerDescription","get","$clusterTime","equalDescriptions","equals","update","compatibilityError","ServerDescriptionChangedEvent","updateServers","length","auth","logout","insert","ns","ops","executeWriteOperation","topology","op","remove","cmd","willRetryWrite","retrying","retryWrites","inTransaction","isWriteCommand","shouldRetryOperation","newOptions","incrementTransactionNumber","cursor","CursorClass","clientMetadata","isConnected","isDestroyed","unref","lastIsMaster","sd","filter","maxWireVersion","commonWireVersion","defineProperty","prototype","enumerable","destroy","RETRYABLE_WRITE_OPERATIONS","some","topologyDescription","incomingServerDescription","currentServerDescription","currentTopologyVersion","topologyVersion","event","removeAllListeners","ServerClosedEvent","split","map","directConnection","setName","rs_name","ReplicaSetNoPrimary","randomSelection","array","Math","floor","random","createAndConnectServer","connectDelay","ServerOpeningEvent","bind","connectTimer","has","entry","serverAddress","args","explain","handler","newArgs","operationId","hasErrorLabel","updateFromSrvPollingEvent","queue","shift","clearTimeout","membersToProcess","i","selectedDescriptions","e","selectedServerDescription","selectedServer","isActive","pinServer","process","nextTick","requestCheck","module","exports"],"mappings":"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","sourcesContent":["'use strict';\r\nconst Denque = require('denque');\r\nconst EventEmitter = require('events');\r\nconst ServerDescription = require('./server_description').ServerDescription;\r\nconst ServerType = require('./common').ServerType;\r\nconst TopologyDescription = require('./topology_description').TopologyDescription;\r\nconst TopologyType = require('./common').TopologyType;\r\nconst events = require('./events');\r\nconst Server = require('./server').Server;\r\nconst relayEvents = require('../utils').relayEvents;\r\nconst ReadPreference = require('../topologies/read_preference');\r\nconst isRetryableWritesSupported = require('../topologies/shared').isRetryableWritesSupported;\r\nconst CoreCursor = require('../cursor').CoreCursor;\r\nconst deprecate = require('util').deprecate;\r\nconst BSON = require('../connection/utils').retrieveBSON();\r\nconst createCompressionInfo = require('../topologies/shared').createCompressionInfo;\r\nconst ClientSession = require('../sessions').ClientSession;\r\nconst MongoError = require('../error').MongoError;\r\nconst MongoServerSelectionError = require('../error').MongoServerSelectionError;\r\nconst resolveClusterTime = require('../topologies/shared').resolveClusterTime;\r\nconst SrvPoller = require('./srv_polling').SrvPoller;\r\nconst getMMAPError = require('../topologies/shared').getMMAPError;\r\nconst makeStateMachine = require('../utils').makeStateMachine;\r\nconst eachAsync = require('../utils').eachAsync;\r\nconst emitDeprecationWarning = require('../../utils').emitDeprecationWarning;\r\nconst ServerSessionPool = require('../sessions').ServerSessionPool;\r\nconst makeClientMetadata = require('../utils').makeClientMetadata;\r\nconst CMAP_EVENT_NAMES = require('../../cmap/events').CMAP_EVENT_NAMES;\r\nconst compareTopologyVersion = require('./server_description').compareTopologyVersion;\r\nconst emitWarning = require('../../utils').emitWarning;\r\n\r\nconst common = require('./common');\r\nconst drainTimerQueue = common.drainTimerQueue;\r\nconst clearAndRemoveTimerFrom = common.clearAndRemoveTimerFrom;\r\n\r\nconst serverSelection = require('./server_selection');\r\nconst readPreferenceServerSelector = serverSelection.readPreferenceServerSelector;\r\nconst writableServerSelector = serverSelection.writableServerSelector;\r\n\r\n// Global state\r\nlet globalTopologyCounter = 0;\r\n\r\n// events that we relay to the `Topology`\r\nconst SERVER_RELAY_EVENTS = [\r\n  'serverHeartbeatStarted',\r\n  'serverHeartbeatSucceeded',\r\n  'serverHeartbeatFailed',\r\n  'commandStarted',\r\n  'commandSucceeded',\r\n  'commandFailed',\r\n\r\n  // NOTE: Legacy events\r\n  'monitoring'\r\n].concat(CMAP_EVENT_NAMES);\r\n\r\n// all events we listen to from `Server` instances\r\nconst LOCAL_SERVER_EVENTS = ['connect', 'descriptionReceived', 'close', 'ended'];\r\n\r\nconst STATE_CLOSING = common.STATE_CLOSING;\r\nconst STATE_CLOSED = common.STATE_CLOSED;\r\nconst STATE_CONNECTING = common.STATE_CONNECTING;\r\nconst STATE_CONNECTED = common.STATE_CONNECTED;\r\nconst stateTransition = makeStateMachine({\r\n  [STATE_CLOSED]: [STATE_CLOSED, STATE_CONNECTING],\r\n  [STATE_CONNECTING]: [STATE_CONNECTING, STATE_CLOSING, STATE_CONNECTED, STATE_CLOSED],\r\n  [STATE_CONNECTED]: [STATE_CONNECTED, STATE_CLOSING, STATE_CLOSED],\r\n  [STATE_CLOSING]: [STATE_CLOSING, STATE_CLOSED]\r\n});\r\n\r\nconst DEPRECATED_OPTIONS = new Set([\r\n  'autoReconnect',\r\n  'reconnectTries',\r\n  'reconnectInterval',\r\n  'bufferMaxEntries'\r\n]);\r\n\r\nconst kCancelled = Symbol('cancelled');\r\nconst kWaitQueue = Symbol('waitQueue');\r\n\r\n/**\r\n * A container of server instances representing a connection to a MongoDB topology.\r\n *\r\n * @fires Topology#serverOpening\r\n * @fires Topology#serverClosed\r\n * @fires Topology#serverDescriptionChanged\r\n * @fires Topology#topologyOpening\r\n * @fires Topology#topologyClosed\r\n * @fires Topology#topologyDescriptionChanged\r\n * @fires Topology#serverHeartbeatStarted\r\n * @fires Topology#serverHeartbeatSucceeded\r\n * @fires Topology#serverHeartbeatFailed\r\n */\r\nclass Topology extends EventEmitter {\r\n  /**\r\n   * Create a topology\r\n   *\r\n   * @param {Array|String} [seedlist] a string list, or array of Server instances to connect to\r\n   * @param {Object} [options] Optional settings\r\n   * @param {Number} [options.localThresholdMS=15] The size of the latency window for selecting among multiple suitable servers\r\n   * @param {Number} [options.serverSelectionTimeoutMS=30000] How long to block for server selection before throwing an error\r\n   * @param {Number} [options.heartbeatFrequencyMS=10000] The frequency with which topology updates are scheduled\r\n   */\r\n  constructor(seedlist, options) {\r\n    super();\r\n    if (typeof options === 'undefined' && typeof seedlist !== 'string') {\r\n      options = seedlist;\r\n      seedlist = [];\r\n\r\n      // this is for legacy single server constructor support\r\n      if (options.host) {\r\n        seedlist.push({ host: options.host, port: options.port });\r\n      }\r\n    }\r\n\r\n    seedlist = seedlist || [];\r\n    if (typeof seedlist === 'string') {\r\n      seedlist = parseStringSeedlist(seedlist);\r\n    }\r\n\r\n    options = Object.assign({}, common.TOPOLOGY_DEFAULTS, options);\r\n    options = Object.freeze(\r\n      Object.assign(options, {\r\n        metadata: makeClientMetadata(options),\r\n        compression: { compressors: createCompressionInfo(options) }\r\n      })\r\n    );\r\n\r\n    DEPRECATED_OPTIONS.forEach(optionName => {\r\n      if (options[optionName]) {\r\n        emitDeprecationWarning(\r\n          `The option \\`${optionName}\\` is incompatible with the unified topology, please read more by visiting http://bit.ly/2D8WfT6`,\r\n          'DeprecationWarning'\r\n        );\r\n      }\r\n    });\r\n\r\n    const topologyType = topologyTypeFromSeedlist(seedlist, options);\r\n    const topologyId = globalTopologyCounter++;\r\n    const serverDescriptions = seedlist.reduce((result, seed) => {\r\n      if (seed.domain_socket) seed.host = seed.domain_socket;\r\n      const address = seed.port ? `${seed.host}:${seed.port}` : `${seed.host}:27017`;\r\n      result.set(address, new ServerDescription(address));\r\n      return result;\r\n    }, new Map());\r\n\r\n    this[kWaitQueue] = new Denque();\r\n    this.s = {\r\n      // the id of this topology\r\n      id: topologyId,\r\n      // passed in options\r\n      options,\r\n      // initial seedlist of servers to connect to\r\n      seedlist: seedlist,\r\n      // initial state\r\n      state: STATE_CLOSED,\r\n      // the topology description\r\n      description: new TopologyDescription(\r\n        topologyType,\r\n        serverDescriptions,\r\n        options.replicaSet,\r\n        null,\r\n        null,\r\n        null,\r\n        options\r\n      ),\r\n      serverSelectionTimeoutMS: options.serverSelectionTimeoutMS,\r\n      heartbeatFrequencyMS: options.heartbeatFrequencyMS,\r\n      minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS,\r\n      // allow users to override the cursor factory\r\n      Cursor: options.cursorFactory || CoreCursor,\r\n      // the bson parser\r\n      bson:\r\n        options.bson ||\r\n        new BSON([\r\n          BSON.Binary,\r\n          BSON.Code,\r\n          BSON.DBRef,\r\n          BSON.Decimal128,\r\n          BSON.Double,\r\n          BSON.Int32,\r\n          BSON.Long,\r\n          BSON.Map,\r\n          BSON.MaxKey,\r\n          BSON.MinKey,\r\n          BSON.ObjectId,\r\n          BSON.BSONRegExp,\r\n          BSON.Symbol,\r\n          BSON.Timestamp\r\n        ]),\r\n      // a map of server instances to normalized addresses\r\n      servers: new Map(),\r\n      // Server Session Pool\r\n      sessionPool: new ServerSessionPool(this),\r\n      // Active client sessions\r\n      sessions: new Set(),\r\n      // Promise library\r\n      promiseLibrary: options.promiseLibrary || Promise,\r\n      credentials: options.credentials,\r\n      clusterTime: null,\r\n\r\n      // timer management\r\n      connectionTimers: new Set()\r\n    };\r\n\r\n    if (options.srvHost) {\r\n      this.s.srvPoller =\r\n        options.srvPoller ||\r\n        new SrvPoller({\r\n          heartbeatFrequencyMS: this.s.heartbeatFrequencyMS,\r\n          srvHost: options.srvHost, // TODO: GET THIS\r\n          logger: options.logger,\r\n          loggerLevel: options.loggerLevel\r\n        });\r\n      this.s.detectTopologyDescriptionChange = ev => {\r\n        const previousType = ev.previousDescription.type;\r\n        const newType = ev.newDescription.type;\r\n\r\n        if (previousType !== TopologyType.Sharded && newType === TopologyType.Sharded) {\r\n          this.s.handleSrvPolling = srvPollingHandler(this);\r\n          this.s.srvPoller.on('srvRecordDiscovery', this.s.handleSrvPolling);\r\n          this.s.srvPoller.start();\r\n        }\r\n      };\r\n\r\n      this.on('topologyDescriptionChanged', this.s.detectTopologyDescriptionChange);\r\n    }\r\n\r\n    // NOTE: remove this when NODE-1709 is resolved\r\n    this.setMaxListeners(Infinity);\r\n  }\r\n\r\n  /**\r\n   * @return A `TopologyDescription` for this topology\r\n   */\r\n  get description() {\r\n    return this.s.description;\r\n  }\r\n\r\n  get parserType() {\r\n    return BSON.native ? 'c++' : 'js';\r\n  }\r\n\r\n  /**\r\n   * Initiate server connect\r\n   *\r\n   * @param {Object} [options] Optional settings\r\n   * @param {Array} [options.auth=null] Array of auth options to apply on connect\r\n   * @param {function} [callback] An optional callback called once on the first connected server\r\n   */\r\n  connect(options, callback) {\r\n    if (typeof options === 'function') (callback = options), (options = {});\r\n    options = options || {};\r\n    if (this.s.state === STATE_CONNECTED) {\r\n      if (typeof callback === 'function') {\r\n        callback();\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    stateTransition(this, STATE_CONNECTING);\r\n\r\n    // emit SDAM monitoring events\r\n    this.emit('topologyOpening', new events.TopologyOpeningEvent(this.s.id));\r\n\r\n    // emit an event for the topology change\r\n    this.emit(\r\n      'topologyDescriptionChanged',\r\n      new events.TopologyDescriptionChangedEvent(\r\n        this.s.id,\r\n        new TopologyDescription(TopologyType.Unknown), // initial is always Unknown\r\n        this.s.description\r\n      )\r\n    );\r\n\r\n    // connect all known servers, then attempt server selection to connect\r\n    connectServers(this, Array.from(this.s.description.servers.values()));\r\n\r\n    ReadPreference.translate(options);\r\n    const readPreference = options.readPreference || ReadPreference.primary;\r\n    const connectHandler = err => {\r\n      if (err) {\r\n        this.close();\r\n\r\n        if (typeof callback === 'function') {\r\n          callback(err);\r\n        } else {\r\n          this.emit('error', err);\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      stateTransition(this, STATE_CONNECTED);\r\n      this.emit('open', err, this);\r\n      this.emit('connect', this);\r\n\r\n      if (typeof callback === 'function') callback(err, this);\r\n    };\r\n\r\n    // TODO: NODE-2471\r\n    if (this.s.credentials) {\r\n      this.command('admin.$cmd', { ping: 1 }, { readPreference }, connectHandler);\r\n      return;\r\n    }\r\n\r\n    this.selectServer(readPreferenceServerSelector(readPreference), options, connectHandler);\r\n  }\r\n\r\n  /**\r\n   * Close this topology\r\n   */\r\n  close(options, callback) {\r\n    if (typeof options === 'function') {\r\n      callback = options;\r\n      options = {};\r\n    }\r\n\r\n    if (typeof options === 'boolean') {\r\n      options = { force: options };\r\n    }\r\n\r\n    options = options || {};\r\n    if (this.s.state === STATE_CLOSED || this.s.state === STATE_CLOSING) {\r\n      if (typeof callback === 'function') {\r\n        callback();\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    stateTransition(this, STATE_CLOSING);\r\n\r\n    drainWaitQueue(this[kWaitQueue], new MongoError('Topology closed'));\r\n    drainTimerQueue(this.s.connectionTimers);\r\n\r\n    if (this.s.srvPoller) {\r\n      this.s.srvPoller.stop();\r\n      if (this.s.handleSrvPolling) {\r\n        this.s.srvPoller.removeListener('srvRecordDiscovery', this.s.handleSrvPolling);\r\n        delete this.s.handleSrvPolling;\r\n      }\r\n    }\r\n\r\n    if (this.s.detectTopologyDescriptionChange) {\r\n      this.removeListener('topologyDescriptionChanged', this.s.detectTopologyDescriptionChange);\r\n      delete this.s.detectTopologyDescriptionChange;\r\n    }\r\n\r\n    this.s.sessions.forEach(session => session.endSession());\r\n    this.s.sessionPool.endAllPooledSessions(() => {\r\n      eachAsync(\r\n        Array.from(this.s.servers.values()),\r\n        (server, cb) => destroyServer(server, this, options, cb),\r\n        err => {\r\n          this.s.servers.clear();\r\n\r\n          // emit an event for close\r\n          this.emit('topologyClosed', new events.TopologyClosedEvent(this.s.id));\r\n\r\n          stateTransition(this, STATE_CLOSED);\r\n          this.emit('close');\r\n\r\n          if (typeof callback === 'function') {\r\n            callback(err);\r\n          }\r\n        }\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Selects a server according to the selection predicate provided\r\n   *\r\n   * @param {function} [selector] An optional selector to select servers by, defaults to a random selection within a latency window\r\n   * @param {object} [options] Optional settings related to server selection\r\n   * @param {number} [options.serverSelectionTimeoutMS] How long to block for server selection before throwing an error\r\n   * @param {function} callback The callback used to indicate success or failure\r\n   * @return {Server} An instance of a `Server` meeting the criteria of the predicate provided\r\n   */\r\n  selectServer(selector, options, callback) {\r\n    if (typeof options === 'function') {\r\n      callback = options;\r\n      if (typeof selector !== 'function') {\r\n        options = selector;\r\n\r\n        let readPreference;\r\n        if (selector instanceof ReadPreference) {\r\n          readPreference = selector;\r\n        } else if (typeof selector === 'string') {\r\n          readPreference = new ReadPreference(selector);\r\n        } else {\r\n          ReadPreference.translate(options);\r\n          readPreference = options.readPreference || ReadPreference.primary;\r\n        }\r\n\r\n        selector = readPreferenceServerSelector(readPreference);\r\n      } else {\r\n        options = {};\r\n      }\r\n    }\r\n\r\n    options = Object.assign(\r\n      {},\r\n      { serverSelectionTimeoutMS: this.s.serverSelectionTimeoutMS },\r\n      options\r\n    );\r\n\r\n    const isSharded = this.description.type === TopologyType.Sharded;\r\n    const session = options.session;\r\n    const transaction = session && session.transaction;\r\n\r\n    if (isSharded && transaction && transaction.server) {\r\n      callback(undefined, transaction.server);\r\n      return;\r\n    }\r\n\r\n    // support server selection by options with readPreference\r\n    let serverSelector = selector;\r\n    if (typeof selector === 'object') {\r\n      const readPreference = selector.readPreference\r\n        ? selector.readPreference\r\n        : ReadPreference.primary;\r\n\r\n      serverSelector = readPreferenceServerSelector(readPreference);\r\n    }\r\n\r\n    const waitQueueMember = {\r\n      serverSelector,\r\n      transaction,\r\n      callback\r\n    };\r\n\r\n    const serverSelectionTimeoutMS = options.serverSelectionTimeoutMS;\r\n    if (serverSelectionTimeoutMS) {\r\n      waitQueueMember.timer = setTimeout(() => {\r\n        waitQueueMember[kCancelled] = true;\r\n        waitQueueMember.timer = undefined;\r\n        const timeoutError = new MongoServerSelectionError(\r\n          `Server selection timed out after ${serverSelectionTimeoutMS} ms`,\r\n          this.description\r\n        );\r\n\r\n        waitQueueMember.callback(timeoutError);\r\n      }, serverSelectionTimeoutMS);\r\n    }\r\n\r\n    this[kWaitQueue].push(waitQueueMember);\r\n    processWaitQueue(this);\r\n  }\r\n\r\n  // Sessions related methods\r\n\r\n  /**\r\n   * @return Whether the topology should initiate selection to determine session support\r\n   */\r\n  shouldCheckForSessionSupport() {\r\n    if (this.description.type === TopologyType.Single) {\r\n      return !this.description.hasKnownServers;\r\n    }\r\n\r\n    return !this.description.hasDataBearingServers;\r\n  }\r\n\r\n  /**\r\n   * @return Whether sessions are supported on the current topology\r\n   */\r\n  hasSessionSupport() {\r\n    return this.description.logicalSessionTimeoutMinutes != null;\r\n  }\r\n\r\n  /**\r\n   * Start a logical session\r\n   */\r\n  startSession(options, clientOptions) {\r\n    const session = new ClientSession(this, this.s.sessionPool, options, clientOptions);\r\n    session.once('ended', () => {\r\n      this.s.sessions.delete(session);\r\n    });\r\n\r\n    this.s.sessions.add(session);\r\n    return session;\r\n  }\r\n\r\n  /**\r\n   * Send endSessions command(s) with the given session ids\r\n   *\r\n   * @param {Array} sessions The sessions to end\r\n   * @param {function} [callback]\r\n   */\r\n  endSessions(sessions, callback) {\r\n    if (!Array.isArray(sessions)) {\r\n      sessions = [sessions];\r\n    }\r\n\r\n    this.command(\r\n      'admin.$cmd',\r\n      { endSessions: sessions },\r\n      { readPreference: ReadPreference.primaryPreferred, noResponse: true },\r\n      () => {\r\n        // intentionally ignored, per spec\r\n        if (typeof callback === 'function') callback();\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Update the internal TopologyDescription with a ServerDescription\r\n   *\r\n   * @param {object} serverDescription The server to update in the internal list of server descriptions\r\n   */\r\n  serverUpdateHandler(serverDescription) {\r\n    if (!this.s.description.hasServer(serverDescription.address)) {\r\n      return;\r\n    }\r\n\r\n    // ignore this server update if its from an outdated topologyVersion\r\n    if (isStaleServerDescription(this.s.description, serverDescription)) {\r\n      return;\r\n    }\r\n\r\n    // these will be used for monitoring events later\r\n    const previousTopologyDescription = this.s.description;\r\n    const previousServerDescription = this.s.description.servers.get(serverDescription.address);\r\n\r\n    // Driver Sessions Spec: \"Whenever a driver receives a cluster time from\r\n    // a server it MUST compare it to the current highest seen cluster time\r\n    // for the deployment. If the new cluster time is higher than the\r\n    // highest seen cluster time it MUST become the new highest seen cluster\r\n    // time. Two cluster times are compared using only the BsonTimestamp\r\n    // value of the clusterTime embedded field.\"\r\n    const clusterTime = serverDescription.$clusterTime;\r\n    if (clusterTime) {\r\n      resolveClusterTime(this, clusterTime);\r\n    }\r\n\r\n    // If we already know all the information contained in this updated description, then\r\n    // we don't need to emit SDAM events, but still need to update the description, in order\r\n    // to keep client-tracked attributes like last update time and round trip time up to date\r\n    const equalDescriptions =\r\n      previousServerDescription && previousServerDescription.equals(serverDescription);\r\n\r\n    // first update the TopologyDescription\r\n    this.s.description = this.s.description.update(serverDescription);\r\n    if (this.s.description.compatibilityError) {\r\n      this.emit('error', new MongoError(this.s.description.compatibilityError));\r\n      return;\r\n    }\r\n\r\n    // emit monitoring events for this change\r\n    if (!equalDescriptions) {\r\n      this.emit(\r\n        'serverDescriptionChanged',\r\n        new events.ServerDescriptionChangedEvent(\r\n          this.s.id,\r\n          serverDescription.address,\r\n          previousServerDescription,\r\n          this.s.description.servers.get(serverDescription.address)\r\n        )\r\n      );\r\n    }\r\n\r\n    // update server list from updated descriptions\r\n    updateServers(this, serverDescription);\r\n\r\n    // attempt to resolve any outstanding server selection attempts\r\n    if (this[kWaitQueue].length > 0) {\r\n      processWaitQueue(this);\r\n    }\r\n\r\n    if (!equalDescriptions) {\r\n      this.emit(\r\n        'topologyDescriptionChanged',\r\n        new events.TopologyDescriptionChangedEvent(\r\n          this.s.id,\r\n          previousTopologyDescription,\r\n          this.s.description\r\n        )\r\n      );\r\n    }\r\n  }\r\n\r\n  auth(credentials, callback) {\r\n    if (typeof credentials === 'function') (callback = credentials), (credentials = null);\r\n    if (typeof callback === 'function') callback(null, true);\r\n  }\r\n\r\n  logout(callback) {\r\n    if (typeof callback === 'function') callback(null, true);\r\n  }\r\n\r\n  // Basic operation support. Eventually this should be moved into command construction\r\n  // during the command refactor.\r\n\r\n  /**\r\n   * Insert one or more documents\r\n   *\r\n   * @param {String} ns The full qualified namespace for this operation\r\n   * @param {Array} ops An array of documents to insert\r\n   * @param {Boolean} [options.ordered=true] Execute in order or out of order\r\n   * @param {Object} [options.writeConcern] Write concern for the operation\r\n   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized\r\n   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields\r\n   * @param {ClientSession} [options.session] Session to use for the operation\r\n   * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\r\n   * @param {opResultCallback} callback A callback function\r\n   */\r\n  insert(ns, ops, options, callback) {\r\n    executeWriteOperation({ topology: this, op: 'insert', ns, ops }, options, callback);\r\n  }\r\n\r\n  /**\r\n   * Perform one or more update operations\r\n   *\r\n   * @param {string} ns The fully qualified namespace for this operation\r\n   * @param {array} ops An array of updates\r\n   * @param {boolean} [options.ordered=true] Execute in order or out of order\r\n   * @param {object} [options.writeConcern] Write concern for the operation\r\n   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized\r\n   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields\r\n   * @param {ClientSession} [options.session] Session to use for the operation\r\n   * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\r\n   * @param {opResultCallback} callback A callback function\r\n   */\r\n  update(ns, ops, options, callback) {\r\n    executeWriteOperation({ topology: this, op: 'update', ns, ops }, options, callback);\r\n  }\r\n\r\n  /**\r\n   * Perform one or more remove operations\r\n   *\r\n   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\r\n   * @param {array} ops An array of removes\r\n   * @param {boolean} [options.ordered=true] Execute in order or out of order\r\n   * @param {object} [options.writeConcern={}] Write concern for the operation\r\n   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\r\n   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\r\n   * @param {ClientSession} [options.session=null] Session to use for the operation\r\n   * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\r\n   * @param {opResultCallback} callback A callback function\r\n   */\r\n  remove(ns, ops, options, callback) {\r\n    executeWriteOperation({ topology: this, op: 'remove', ns, ops }, options, callback);\r\n  }\r\n\r\n  /**\r\n   * Execute a command\r\n   *\r\n   * @method\r\n   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\r\n   * @param {object} cmd The command hash\r\n   * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\r\n   * @param {Connection} [options.connection] Specify connection object to execute command against\r\n   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\r\n   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\r\n   * @param {ClientSession} [options.session=null] Session to use for the operation\r\n   * @param {opResultCallback} callback A callback function\r\n   */\r\n  command(ns, cmd, options, callback) {\r\n    if (typeof options === 'function') {\r\n      (callback = options), (options = {}), (options = options || {});\r\n    }\r\n\r\n    ReadPreference.translate(options);\r\n    const readPreference = options.readPreference || ReadPreference.primary;\r\n\r\n    this.selectServer(readPreferenceServerSelector(readPreference), options, (err, server) => {\r\n      if (err) {\r\n        callback(err);\r\n        return;\r\n      }\r\n\r\n      const willRetryWrite =\r\n        !options.retrying &&\r\n        !!options.retryWrites &&\r\n        options.session &&\r\n        isRetryableWritesSupported(this) &&\r\n        !options.session.inTransaction() &&\r\n        isWriteCommand(cmd);\r\n\r\n      const cb = (err, result) => {\r\n        if (!err) return callback(null, result);\r\n        if (!shouldRetryOperation(err)) {\r\n          return callback(err);\r\n        }\r\n\r\n        if (willRetryWrite) {\r\n          const newOptions = Object.assign({}, options, { retrying: true });\r\n          return this.command(ns, cmd, newOptions, callback);\r\n        }\r\n\r\n        return callback(err);\r\n      };\r\n\r\n      // increment and assign txnNumber\r\n      if (willRetryWrite) {\r\n        options.session.incrementTransactionNumber();\r\n        options.willRetryWrite = willRetryWrite;\r\n      }\r\n\r\n      server.command(ns, cmd, options, cb);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create a new cursor\r\n   *\r\n   * @method\r\n   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\r\n   * @param {object|Long} cmd Can be either a command returning a cursor or a cursorId\r\n   * @param {object} [options] Options for the cursor\r\n   * @param {object} [options.batchSize=0] Batchsize for the operation\r\n   * @param {array} [options.documents=[]] Initial documents list for cursor\r\n   * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\r\n   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\r\n   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\r\n   * @param {ClientSession} [options.session=null] Session to use for the operation\r\n   * @param {object} [options.topology] The internal topology of the created cursor\r\n   * @returns {Cursor}\r\n   */\r\n  cursor(ns, cmd, options) {\r\n    options = options || {};\r\n    const topology = options.topology || this;\r\n    const CursorClass = options.cursorFactory || this.s.Cursor;\r\n    ReadPreference.translate(options);\r\n\r\n    return new CursorClass(topology, ns, cmd, options);\r\n  }\r\n\r\n  get clientMetadata() {\r\n    return this.s.options.metadata;\r\n  }\r\n\r\n  isConnected() {\r\n    return this.s.state === STATE_CONNECTED;\r\n  }\r\n\r\n  isDestroyed() {\r\n    return this.s.state === STATE_CLOSED;\r\n  }\r\n\r\n  unref() {\r\n    emitWarning('not implemented: `unref`');\r\n  }\r\n\r\n  // NOTE: There are many places in code where we explicitly check the last isMaster\r\n  //       to do feature support detection. This should be done any other way, but for\r\n  //       now we will just return the first isMaster seen, which should suffice.\r\n  lastIsMaster() {\r\n    const serverDescriptions = Array.from(this.description.servers.values());\r\n    if (serverDescriptions.length === 0) return {};\r\n\r\n    const sd = serverDescriptions.filter(sd => sd.type !== ServerType.Unknown)[0];\r\n    const result = sd || { maxWireVersion: this.description.commonWireVersion };\r\n    return result;\r\n  }\r\n\r\n  get logicalSessionTimeoutMinutes() {\r\n    return this.description.logicalSessionTimeoutMinutes;\r\n  }\r\n\r\n  get bson() {\r\n    return this.s.bson;\r\n  }\r\n}\r\n\r\nObject.defineProperty(Topology.prototype, 'clusterTime', {\r\n  enumerable: true,\r\n  get: function() {\r\n    return this.s.clusterTime;\r\n  },\r\n  set: function(clusterTime) {\r\n    this.s.clusterTime = clusterTime;\r\n  }\r\n});\r\n\r\n// legacy aliases\r\nTopology.prototype.destroy = deprecate(\r\n  Topology.prototype.close,\r\n  'destroy() is deprecated, please use close() instead'\r\n);\r\n\r\nconst RETRYABLE_WRITE_OPERATIONS = ['findAndModify', 'insert', 'update', 'delete'];\r\nfunction isWriteCommand(command) {\r\n  return RETRYABLE_WRITE_OPERATIONS.some(op => command[op]);\r\n}\r\n\r\nfunction isStaleServerDescription(topologyDescription, incomingServerDescription) {\r\n  const currentServerDescription = topologyDescription.servers.get(\r\n    incomingServerDescription.address\r\n  );\r\n  const currentTopologyVersion = currentServerDescription.topologyVersion;\r\n  return (\r\n    compareTopologyVersion(currentTopologyVersion, incomingServerDescription.topologyVersion) > 0\r\n  );\r\n}\r\n\r\n/**\r\n * Destroys a server, and removes all event listeners from the instance\r\n *\r\n * @param {Server} server\r\n */\r\nfunction destroyServer(server, topology, options, callback) {\r\n  options = options || {};\r\n  LOCAL_SERVER_EVENTS.forEach(event => server.removeAllListeners(event));\r\n\r\n  server.destroy(options, () => {\r\n    topology.emit(\r\n      'serverClosed',\r\n      new events.ServerClosedEvent(topology.s.id, server.description.address)\r\n    );\r\n\r\n    SERVER_RELAY_EVENTS.forEach(event => server.removeAllListeners(event));\r\n    if (typeof callback === 'function') {\r\n      callback();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Parses a basic seedlist in string form\r\n *\r\n * @param {string} seedlist The seedlist to parse\r\n */\r\nfunction parseStringSeedlist(seedlist) {\r\n  return seedlist.split(',').map(seed => ({\r\n    host: seed.split(':')[0],\r\n    port: seed.split(':')[1] || 27017\r\n  }));\r\n}\r\n\r\nfunction topologyTypeFromSeedlist(seedlist, options) {\r\n  if (options.directConnection) {\r\n    return TopologyType.Single;\r\n  }\r\n\r\n  const replicaSet = options.replicaSet || options.setName || options.rs_name;\r\n  if (replicaSet == null) {\r\n    return TopologyType.Unknown;\r\n  }\r\n\r\n  return TopologyType.ReplicaSetNoPrimary;\r\n}\r\n\r\nfunction randomSelection(array) {\r\n  return array[Math.floor(Math.random() * array.length)];\r\n}\r\n\r\nfunction createAndConnectServer(topology, serverDescription, connectDelay) {\r\n  topology.emit(\r\n    'serverOpening',\r\n    new events.ServerOpeningEvent(topology.s.id, serverDescription.address)\r\n  );\r\n\r\n  const server = new Server(serverDescription, topology.s.options, topology);\r\n  relayEvents(server, topology, SERVER_RELAY_EVENTS);\r\n\r\n  server.on('descriptionReceived', topology.serverUpdateHandler.bind(topology));\r\n\r\n  if (connectDelay) {\r\n    const connectTimer = setTimeout(() => {\r\n      clearAndRemoveTimerFrom(connectTimer, topology.s.connectionTimers);\r\n      server.connect();\r\n    }, connectDelay);\r\n\r\n    topology.s.connectionTimers.add(connectTimer);\r\n    return server;\r\n  }\r\n\r\n  server.connect();\r\n  return server;\r\n}\r\n\r\n/**\r\n * Create `Server` instances for all initially known servers, connect them, and assign\r\n * them to the passed in `Topology`.\r\n *\r\n * @param {Topology} topology The topology responsible for the servers\r\n * @param {ServerDescription[]} serverDescriptions A list of server descriptions to connect\r\n */\r\nfunction connectServers(topology, serverDescriptions) {\r\n  topology.s.servers = serverDescriptions.reduce((servers, serverDescription) => {\r\n    const server = createAndConnectServer(topology, serverDescription);\r\n    servers.set(serverDescription.address, server);\r\n    return servers;\r\n  }, new Map());\r\n}\r\n\r\nfunction updateServers(topology, incomingServerDescription) {\r\n  // update the internal server's description\r\n  if (incomingServerDescription && topology.s.servers.has(incomingServerDescription.address)) {\r\n    const server = topology.s.servers.get(incomingServerDescription.address);\r\n    server.s.description = incomingServerDescription;\r\n  }\r\n\r\n  // add new servers for all descriptions we currently don't know about locally\r\n  for (const serverDescription of topology.description.servers.values()) {\r\n    if (!topology.s.servers.has(serverDescription.address)) {\r\n      const server = createAndConnectServer(topology, serverDescription);\r\n      topology.s.servers.set(serverDescription.address, server);\r\n    }\r\n  }\r\n\r\n  // for all servers no longer known, remove their descriptions and destroy their instances\r\n  for (const entry of topology.s.servers) {\r\n    const serverAddress = entry[0];\r\n    if (topology.description.hasServer(serverAddress)) {\r\n      continue;\r\n    }\r\n\r\n    const server = topology.s.servers.get(serverAddress);\r\n    topology.s.servers.delete(serverAddress);\r\n\r\n    // prepare server for garbage collection\r\n    destroyServer(server, topology);\r\n  }\r\n}\r\n\r\nfunction executeWriteOperation(args, options, callback) {\r\n  if (typeof options === 'function') (callback = options), (options = {});\r\n  options = options || {};\r\n\r\n  // TODO: once we drop Node 4, use destructuring either here or in arguments.\r\n  const topology = args.topology;\r\n  const op = args.op;\r\n  const ns = args.ns;\r\n  const ops = args.ops;\r\n\r\n  const willRetryWrite =\r\n    !args.retrying &&\r\n    !!options.retryWrites &&\r\n    options.session &&\r\n    isRetryableWritesSupported(topology) &&\r\n    !options.session.inTransaction() &&\r\n    options.explain === undefined;\r\n\r\n  topology.selectServer(writableServerSelector(), options, (err, server) => {\r\n    if (err) {\r\n      callback(err, null);\r\n      return;\r\n    }\r\n\r\n    const handler = (err, result) => {\r\n      if (!err) return callback(null, result);\r\n      if (!shouldRetryOperation(err)) {\r\n        err = getMMAPError(err);\r\n        return callback(err);\r\n      }\r\n\r\n      if (willRetryWrite) {\r\n        const newArgs = Object.assign({}, args, { retrying: true });\r\n        return executeWriteOperation(newArgs, options, callback);\r\n      }\r\n\r\n      return callback(err);\r\n    };\r\n\r\n    if (callback.operationId) {\r\n      handler.operationId = callback.operationId;\r\n    }\r\n\r\n    // increment and assign txnNumber\r\n    if (willRetryWrite) {\r\n      options.session.incrementTransactionNumber();\r\n      options.willRetryWrite = willRetryWrite;\r\n    }\r\n\r\n    // execute the write operation\r\n    server[op](ns, ops, options, handler);\r\n  });\r\n}\r\n\r\nfunction shouldRetryOperation(err) {\r\n  return err instanceof MongoError && err.hasErrorLabel('RetryableWriteError');\r\n}\r\n\r\nfunction srvPollingHandler(topology) {\r\n  return function handleSrvPolling(ev) {\r\n    const previousTopologyDescription = topology.s.description;\r\n    topology.s.description = topology.s.description.updateFromSrvPollingEvent(ev);\r\n    if (topology.s.description === previousTopologyDescription) {\r\n      // Nothing changed, so return\r\n      return;\r\n    }\r\n\r\n    updateServers(topology);\r\n\r\n    topology.emit(\r\n      'topologyDescriptionChanged',\r\n      new events.TopologyDescriptionChangedEvent(\r\n        topology.s.id,\r\n        previousTopologyDescription,\r\n        topology.s.description\r\n      )\r\n    );\r\n  };\r\n}\r\n\r\nfunction drainWaitQueue(queue, err) {\r\n  while (queue.length) {\r\n    const waitQueueMember = queue.shift();\r\n    clearTimeout(waitQueueMember.timer);\r\n    if (!waitQueueMember[kCancelled]) {\r\n      waitQueueMember.callback(err);\r\n    }\r\n  }\r\n}\r\n\r\nfunction processWaitQueue(topology) {\r\n  if (topology.s.state === STATE_CLOSED) {\r\n    drainWaitQueue(topology[kWaitQueue], new MongoError('Topology is closed, please connect'));\r\n    return;\r\n  }\r\n\r\n  const serverDescriptions = Array.from(topology.description.servers.values());\r\n  const membersToProcess = topology[kWaitQueue].length;\r\n  for (let i = 0; i < membersToProcess && topology[kWaitQueue].length; ++i) {\r\n    const waitQueueMember = topology[kWaitQueue].shift();\r\n    if (waitQueueMember[kCancelled]) {\r\n      continue;\r\n    }\r\n\r\n    let selectedDescriptions;\r\n    try {\r\n      const serverSelector = waitQueueMember.serverSelector;\r\n      selectedDescriptions = serverSelector\r\n        ? serverSelector(topology.description, serverDescriptions)\r\n        : serverDescriptions;\r\n    } catch (e) {\r\n      clearTimeout(waitQueueMember.timer);\r\n      waitQueueMember.callback(e);\r\n      continue;\r\n    }\r\n\r\n    if (selectedDescriptions.length === 0) {\r\n      topology[kWaitQueue].push(waitQueueMember);\r\n      continue;\r\n    }\r\n\r\n    const selectedServerDescription = randomSelection(selectedDescriptions);\r\n    const selectedServer = topology.s.servers.get(selectedServerDescription.address);\r\n    const transaction = waitQueueMember.transaction;\r\n    const isSharded = topology.description.type === TopologyType.Sharded;\r\n    if (isSharded && transaction && transaction.isActive) {\r\n      transaction.pinServer(selectedServer);\r\n    }\r\n\r\n    clearTimeout(waitQueueMember.timer);\r\n    waitQueueMember.callback(undefined, selectedServer);\r\n  }\r\n\r\n  if (topology[kWaitQueue].length > 0) {\r\n    // ensure all server monitors attempt monitoring soon\r\n    topology.s.servers.forEach(server => process.nextTick(() => server.requestCheck()));\r\n  }\r\n}\r\n\r\n/**\r\n * A server opening SDAM monitoring event\r\n *\r\n * @event Topology#serverOpening\r\n * @type {ServerOpeningEvent}\r\n */\r\n\r\n/**\r\n * A server closed SDAM monitoring event\r\n *\r\n * @event Topology#serverClosed\r\n * @type {ServerClosedEvent}\r\n */\r\n\r\n/**\r\n * A server description SDAM change monitoring event\r\n *\r\n * @event Topology#serverDescriptionChanged\r\n * @type {ServerDescriptionChangedEvent}\r\n */\r\n\r\n/**\r\n * A topology open SDAM event\r\n *\r\n * @event Topology#topologyOpening\r\n * @type {TopologyOpeningEvent}\r\n */\r\n\r\n/**\r\n * A topology closed SDAM event\r\n *\r\n * @event Topology#topologyClosed\r\n * @type {TopologyClosedEvent}\r\n */\r\n\r\n/**\r\n * A topology structure SDAM change event\r\n *\r\n * @event Topology#topologyDescriptionChanged\r\n * @type {TopologyDescriptionChangedEvent}\r\n */\r\n\r\n/**\r\n * A topology serverHeartbeatStarted SDAM event\r\n *\r\n * @event Topology#serverHeartbeatStarted\r\n * @type {ServerHeartbeatStartedEvent}\r\n */\r\n\r\n/**\r\n * A topology serverHeartbeatFailed SDAM event\r\n *\r\n * @event Topology#serverHeartbeatFailed\r\n * @type {ServerHearbeatFailedEvent}\r\n */\r\n\r\n/**\r\n * A topology serverHeartbeatSucceeded SDAM change event\r\n *\r\n * @event Topology#serverHeartbeatSucceeded\r\n * @type {ServerHeartbeatSucceededEvent}\r\n */\r\n\r\n/**\r\n * An event emitted indicating a command was started, if command monitoring is enabled\r\n *\r\n * @event Topology#commandStarted\r\n * @type {object}\r\n */\r\n\r\n/**\r\n * An event emitted indicating a command succeeded, if command monitoring is enabled\r\n *\r\n * @event Topology#commandSucceeded\r\n * @type {object}\r\n */\r\n\r\n/**\r\n * An event emitted indicating a command failed, if command monitoring is enabled\r\n *\r\n * @event Topology#commandFailed\r\n * @type {object}\r\n */\r\n\r\nmodule.exports = {\r\n  Topology\r\n};\r\n"]},"metadata":{},"sourceType":"script"}