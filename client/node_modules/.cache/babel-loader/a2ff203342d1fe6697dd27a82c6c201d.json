{"ast":null,"code":"'use strict';\n\nconst buildCountCommand = require('./common_functions').buildCountCommand;\n\nconst OperationBase = require('./operation').OperationBase;\n\nclass CountOperation extends OperationBase {\n  constructor(cursor, applySkipLimit, options) {\n    super(options);\n    this.cursor = cursor;\n    this.applySkipLimit = applySkipLimit;\n  }\n\n  execute(callback) {\n    const cursor = this.cursor;\n    const applySkipLimit = this.applySkipLimit;\n    const options = this.options;\n\n    if (applySkipLimit) {\n      if (typeof cursor.cursorSkip() === 'number') options.skip = cursor.cursorSkip();\n      if (typeof cursor.cursorLimit() === 'number') options.limit = cursor.cursorLimit();\n    } // Ensure we have the right read preference inheritance\n\n\n    if (options.readPreference) {\n      cursor.setReadPreference(options.readPreference);\n    }\n\n    if (typeof options.maxTimeMS !== 'number' && cursor.cmd && typeof cursor.cmd.maxTimeMS === 'number') {\n      options.maxTimeMS = cursor.cmd.maxTimeMS;\n    }\n\n    let finalOptions = {};\n    finalOptions.skip = options.skip;\n    finalOptions.limit = options.limit;\n    finalOptions.hint = options.hint;\n    finalOptions.maxTimeMS = options.maxTimeMS; // Command\n\n    finalOptions.collectionName = cursor.namespace.collection;\n    let command;\n\n    try {\n      command = buildCountCommand(cursor, cursor.cmd.query, finalOptions);\n    } catch (err) {\n      return callback(err);\n    } // Set cursor server to the same as the topology\n\n\n    cursor.server = cursor.topology.s.coreTopology; // Execute the command\n\n    cursor.topology.command(cursor.namespace.withCollection('$cmd'), command, cursor.options, (err, result) => {\n      callback(err, result ? result.result.n : null);\n    });\n  }\n\n}\n\nmodule.exports = CountOperation;","map":{"version":3,"sources":["C:/Users/Tanja Aakerholt/Documents/GitHub/portfolio2/client/node_modules/mongodb/lib/operations/count.js"],"names":["buildCountCommand","require","OperationBase","CountOperation","constructor","cursor","applySkipLimit","options","execute","callback","cursorSkip","skip","cursorLimit","limit","readPreference","setReadPreference","maxTimeMS","cmd","finalOptions","hint","collectionName","namespace","collection","command","query","err","server","topology","s","coreTopology","withCollection","result","n","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,iBAAiB,GAAGC,OAAO,CAAC,oBAAD,CAAP,CAA8BD,iBAAxD;;AACA,MAAME,aAAa,GAAGD,OAAO,CAAC,aAAD,CAAP,CAAuBC,aAA7C;;AAEA,MAAMC,cAAN,SAA6BD,aAA7B,CAA2C;AACzCE,EAAAA,WAAW,CAACC,MAAD,EAASC,cAAT,EAAyBC,OAAzB,EAAkC;AAC3C,UAAMA,OAAN;AAEA,SAAKF,MAAL,GAAcA,MAAd;AACA,SAAKC,cAAL,GAAsBA,cAAtB;AACD;;AAEDE,EAAAA,OAAO,CAACC,QAAD,EAAW;AAChB,UAAMJ,MAAM,GAAG,KAAKA,MAApB;AACA,UAAMC,cAAc,GAAG,KAAKA,cAA5B;AACA,UAAMC,OAAO,GAAG,KAAKA,OAArB;;AAEA,QAAID,cAAJ,EAAoB;AAClB,UAAI,OAAOD,MAAM,CAACK,UAAP,EAAP,KAA+B,QAAnC,EAA6CH,OAAO,CAACI,IAAR,GAAeN,MAAM,CAACK,UAAP,EAAf;AAC7C,UAAI,OAAOL,MAAM,CAACO,WAAP,EAAP,KAAgC,QAApC,EAA8CL,OAAO,CAACM,KAAR,GAAgBR,MAAM,CAACO,WAAP,EAAhB;AAC/C,KARe,CAUhB;;;AACA,QAAIL,OAAO,CAACO,cAAZ,EAA4B;AAC1BT,MAAAA,MAAM,CAACU,iBAAP,CAAyBR,OAAO,CAACO,cAAjC;AACD;;AAED,QACE,OAAOP,OAAO,CAACS,SAAf,KAA6B,QAA7B,IACAX,MAAM,CAACY,GADP,IAEA,OAAOZ,MAAM,CAACY,GAAP,CAAWD,SAAlB,KAAgC,QAHlC,EAIE;AACAT,MAAAA,OAAO,CAACS,SAAR,GAAoBX,MAAM,CAACY,GAAP,CAAWD,SAA/B;AACD;;AAED,QAAIE,YAAY,GAAG,EAAnB;AACAA,IAAAA,YAAY,CAACP,IAAb,GAAoBJ,OAAO,CAACI,IAA5B;AACAO,IAAAA,YAAY,CAACL,KAAb,GAAqBN,OAAO,CAACM,KAA7B;AACAK,IAAAA,YAAY,CAACC,IAAb,GAAoBZ,OAAO,CAACY,IAA5B;AACAD,IAAAA,YAAY,CAACF,SAAb,GAAyBT,OAAO,CAACS,SAAjC,CA3BgB,CA6BhB;;AACAE,IAAAA,YAAY,CAACE,cAAb,GAA8Bf,MAAM,CAACgB,SAAP,CAAiBC,UAA/C;AAEA,QAAIC,OAAJ;;AACA,QAAI;AACFA,MAAAA,OAAO,GAAGvB,iBAAiB,CAACK,MAAD,EAASA,MAAM,CAACY,GAAP,CAAWO,KAApB,EAA2BN,YAA3B,CAA3B;AACD,KAFD,CAEE,OAAOO,GAAP,EAAY;AACZ,aAAOhB,QAAQ,CAACgB,GAAD,CAAf;AACD,KArCe,CAuChB;;;AACApB,IAAAA,MAAM,CAACqB,MAAP,GAAgBrB,MAAM,CAACsB,QAAP,CAAgBC,CAAhB,CAAkBC,YAAlC,CAxCgB,CA0ChB;;AACAxB,IAAAA,MAAM,CAACsB,QAAP,CAAgBJ,OAAhB,CACElB,MAAM,CAACgB,SAAP,CAAiBS,cAAjB,CAAgC,MAAhC,CADF,EAEEP,OAFF,EAGElB,MAAM,CAACE,OAHT,EAIE,CAACkB,GAAD,EAAMM,MAAN,KAAiB;AACftB,MAAAA,QAAQ,CAACgB,GAAD,EAAMM,MAAM,GAAGA,MAAM,CAACA,MAAP,CAAcC,CAAjB,GAAqB,IAAjC,CAAR;AACD,KANH;AAQD;;AA3DwC;;AA8D3CC,MAAM,CAACC,OAAP,GAAiB/B,cAAjB","sourcesContent":["'use strict';\r\n\r\nconst buildCountCommand = require('./common_functions').buildCountCommand;\r\nconst OperationBase = require('./operation').OperationBase;\r\n\r\nclass CountOperation extends OperationBase {\r\n  constructor(cursor, applySkipLimit, options) {\r\n    super(options);\r\n\r\n    this.cursor = cursor;\r\n    this.applySkipLimit = applySkipLimit;\r\n  }\r\n\r\n  execute(callback) {\r\n    const cursor = this.cursor;\r\n    const applySkipLimit = this.applySkipLimit;\r\n    const options = this.options;\r\n\r\n    if (applySkipLimit) {\r\n      if (typeof cursor.cursorSkip() === 'number') options.skip = cursor.cursorSkip();\r\n      if (typeof cursor.cursorLimit() === 'number') options.limit = cursor.cursorLimit();\r\n    }\r\n\r\n    // Ensure we have the right read preference inheritance\r\n    if (options.readPreference) {\r\n      cursor.setReadPreference(options.readPreference);\r\n    }\r\n\r\n    if (\r\n      typeof options.maxTimeMS !== 'number' &&\r\n      cursor.cmd &&\r\n      typeof cursor.cmd.maxTimeMS === 'number'\r\n    ) {\r\n      options.maxTimeMS = cursor.cmd.maxTimeMS;\r\n    }\r\n\r\n    let finalOptions = {};\r\n    finalOptions.skip = options.skip;\r\n    finalOptions.limit = options.limit;\r\n    finalOptions.hint = options.hint;\r\n    finalOptions.maxTimeMS = options.maxTimeMS;\r\n\r\n    // Command\r\n    finalOptions.collectionName = cursor.namespace.collection;\r\n\r\n    let command;\r\n    try {\r\n      command = buildCountCommand(cursor, cursor.cmd.query, finalOptions);\r\n    } catch (err) {\r\n      return callback(err);\r\n    }\r\n\r\n    // Set cursor server to the same as the topology\r\n    cursor.server = cursor.topology.s.coreTopology;\r\n\r\n    // Execute the command\r\n    cursor.topology.command(\r\n      cursor.namespace.withCollection('$cmd'),\r\n      command,\r\n      cursor.options,\r\n      (err, result) => {\r\n        callback(err, result ? result.result.n : null);\r\n      }\r\n    );\r\n  }\r\n}\r\n\r\nmodule.exports = CountOperation;\r\n"]},"metadata":{},"sourceType":"script"}