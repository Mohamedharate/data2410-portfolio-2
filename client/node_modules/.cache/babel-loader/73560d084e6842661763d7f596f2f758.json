{"ast":null,"code":"'use strict';\n\nconst KillCursor = require('../connection/commands').KillCursor;\n\nconst MongoError = require('../error').MongoError;\n\nconst MongoNetworkError = require('../error').MongoNetworkError;\n\nconst collectionNamespace = require('./shared').collectionNamespace;\n\nconst maxWireVersion = require('../utils').maxWireVersion;\n\nconst emitWarning = require('../utils').emitWarning;\n\nconst command = require('./command');\n\nfunction killCursors(server, ns, cursorState, callback) {\n  callback = typeof callback === 'function' ? callback : () => {};\n  const cursorId = cursorState.cursorId;\n\n  if (maxWireVersion(server) < 4) {\n    const bson = server.s.bson;\n    const pool = server.s.pool;\n    const killCursor = new KillCursor(bson, ns, [cursorId]);\n    const options = {\n      immediateRelease: true,\n      noResponse: true\n    };\n\n    if (typeof cursorState.session === 'object') {\n      options.session = cursorState.session;\n    }\n\n    if (pool && pool.isConnected()) {\n      try {\n        pool.write(killCursor, options, callback);\n      } catch (err) {\n        if (typeof callback === 'function') {\n          callback(err, null);\n        } else {\n          emitWarning(err);\n        }\n      }\n    }\n\n    return;\n  }\n\n  const killCursorCmd = {\n    killCursors: collectionNamespace(ns),\n    cursors: [cursorId]\n  };\n  const options = {};\n  if (typeof cursorState.session === 'object') options.session = cursorState.session;\n  command(server, ns, killCursorCmd, options, (err, result) => {\n    if (err) {\n      return callback(err);\n    }\n\n    const response = result.message;\n\n    if (response.cursorNotFound) {\n      return callback(new MongoNetworkError('cursor killed or timed out'), null);\n    }\n\n    if (!Array.isArray(response.documents) || response.documents.length === 0) {\n      return callback(new MongoError(`invalid killCursors result returned for cursor id ${cursorId}`));\n    }\n\n    callback(null, response.documents[0]);\n  });\n}\n\nmodule.exports = killCursors;","map":{"version":3,"sources":["C:/Users/Tanja Aakerholt/Documents/GitHub/portfolio2/client/node_modules/mongodb/lib/core/wireprotocol/kill_cursors.js"],"names":["KillCursor","require","MongoError","MongoNetworkError","collectionNamespace","maxWireVersion","emitWarning","command","killCursors","server","ns","cursorState","callback","cursorId","bson","s","pool","killCursor","options","immediateRelease","noResponse","session","isConnected","write","err","killCursorCmd","cursors","result","response","message","cursorNotFound","Array","isArray","documents","length","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,UAAU,GAAGC,OAAO,CAAC,wBAAD,CAAP,CAAkCD,UAArD;;AACA,MAAME,UAAU,GAAGD,OAAO,CAAC,UAAD,CAAP,CAAoBC,UAAvC;;AACA,MAAMC,iBAAiB,GAAGF,OAAO,CAAC,UAAD,CAAP,CAAoBE,iBAA9C;;AACA,MAAMC,mBAAmB,GAAGH,OAAO,CAAC,UAAD,CAAP,CAAoBG,mBAAhD;;AACA,MAAMC,cAAc,GAAGJ,OAAO,CAAC,UAAD,CAAP,CAAoBI,cAA3C;;AACA,MAAMC,WAAW,GAAGL,OAAO,CAAC,UAAD,CAAP,CAAoBK,WAAxC;;AACA,MAAMC,OAAO,GAAGN,OAAO,CAAC,WAAD,CAAvB;;AAEA,SAASO,WAAT,CAAqBC,MAArB,EAA6BC,EAA7B,EAAiCC,WAAjC,EAA8CC,QAA9C,EAAwD;AACtDA,EAAAA,QAAQ,GAAG,OAAOA,QAAP,KAAoB,UAApB,GAAiCA,QAAjC,GAA4C,MAAM,CAAE,CAA/D;AACA,QAAMC,QAAQ,GAAGF,WAAW,CAACE,QAA7B;;AAEA,MAAIR,cAAc,CAACI,MAAD,CAAd,GAAyB,CAA7B,EAAgC;AAC9B,UAAMK,IAAI,GAAGL,MAAM,CAACM,CAAP,CAASD,IAAtB;AACA,UAAME,IAAI,GAAGP,MAAM,CAACM,CAAP,CAASC,IAAtB;AACA,UAAMC,UAAU,GAAG,IAAIjB,UAAJ,CAAec,IAAf,EAAqBJ,EAArB,EAAyB,CAACG,QAAD,CAAzB,CAAnB;AACA,UAAMK,OAAO,GAAG;AACdC,MAAAA,gBAAgB,EAAE,IADJ;AAEdC,MAAAA,UAAU,EAAE;AAFE,KAAhB;;AAKA,QAAI,OAAOT,WAAW,CAACU,OAAnB,KAA+B,QAAnC,EAA6C;AAC3CH,MAAAA,OAAO,CAACG,OAAR,GAAkBV,WAAW,CAACU,OAA9B;AACD;;AAED,QAAIL,IAAI,IAAIA,IAAI,CAACM,WAAL,EAAZ,EAAgC;AAC9B,UAAI;AACFN,QAAAA,IAAI,CAACO,KAAL,CAAWN,UAAX,EAAuBC,OAAvB,EAAgCN,QAAhC;AACD,OAFD,CAEE,OAAOY,GAAP,EAAY;AACZ,YAAI,OAAOZ,QAAP,KAAoB,UAAxB,EAAoC;AAClCA,UAAAA,QAAQ,CAACY,GAAD,EAAM,IAAN,CAAR;AACD,SAFD,MAEO;AACLlB,UAAAA,WAAW,CAACkB,GAAD,CAAX;AACD;AACF;AACF;;AAED;AACD;;AAED,QAAMC,aAAa,GAAG;AACpBjB,IAAAA,WAAW,EAAEJ,mBAAmB,CAACM,EAAD,CADZ;AAEpBgB,IAAAA,OAAO,EAAE,CAACb,QAAD;AAFW,GAAtB;AAKA,QAAMK,OAAO,GAAG,EAAhB;AACA,MAAI,OAAOP,WAAW,CAACU,OAAnB,KAA+B,QAAnC,EAA6CH,OAAO,CAACG,OAAR,GAAkBV,WAAW,CAACU,OAA9B;AAE7Cd,EAAAA,OAAO,CAACE,MAAD,EAASC,EAAT,EAAae,aAAb,EAA4BP,OAA5B,EAAqC,CAACM,GAAD,EAAMG,MAAN,KAAiB;AAC3D,QAAIH,GAAJ,EAAS;AACP,aAAOZ,QAAQ,CAACY,GAAD,CAAf;AACD;;AAED,UAAMI,QAAQ,GAAGD,MAAM,CAACE,OAAxB;;AACA,QAAID,QAAQ,CAACE,cAAb,EAA6B;AAC3B,aAAOlB,QAAQ,CAAC,IAAIT,iBAAJ,CAAsB,4BAAtB,CAAD,EAAsD,IAAtD,CAAf;AACD;;AAED,QAAI,CAAC4B,KAAK,CAACC,OAAN,CAAcJ,QAAQ,CAACK,SAAvB,CAAD,IAAsCL,QAAQ,CAACK,SAAT,CAAmBC,MAAnB,KAA8B,CAAxE,EAA2E;AACzE,aAAOtB,QAAQ,CACb,IAAIV,UAAJ,CAAgB,qDAAoDW,QAAS,EAA7E,CADa,CAAf;AAGD;;AAEDD,IAAAA,QAAQ,CAAC,IAAD,EAAOgB,QAAQ,CAACK,SAAT,CAAmB,CAAnB,CAAP,CAAR;AACD,GAjBM,CAAP;AAkBD;;AAEDE,MAAM,CAACC,OAAP,GAAiB5B,WAAjB","sourcesContent":["'use strict';\r\n\r\nconst KillCursor = require('../connection/commands').KillCursor;\r\nconst MongoError = require('../error').MongoError;\r\nconst MongoNetworkError = require('../error').MongoNetworkError;\r\nconst collectionNamespace = require('./shared').collectionNamespace;\r\nconst maxWireVersion = require('../utils').maxWireVersion;\r\nconst emitWarning = require('../utils').emitWarning;\r\nconst command = require('./command');\r\n\r\nfunction killCursors(server, ns, cursorState, callback) {\r\n  callback = typeof callback === 'function' ? callback : () => {};\r\n  const cursorId = cursorState.cursorId;\r\n\r\n  if (maxWireVersion(server) < 4) {\r\n    const bson = server.s.bson;\r\n    const pool = server.s.pool;\r\n    const killCursor = new KillCursor(bson, ns, [cursorId]);\r\n    const options = {\r\n      immediateRelease: true,\r\n      noResponse: true\r\n    };\r\n\r\n    if (typeof cursorState.session === 'object') {\r\n      options.session = cursorState.session;\r\n    }\r\n\r\n    if (pool && pool.isConnected()) {\r\n      try {\r\n        pool.write(killCursor, options, callback);\r\n      } catch (err) {\r\n        if (typeof callback === 'function') {\r\n          callback(err, null);\r\n        } else {\r\n          emitWarning(err);\r\n        }\r\n      }\r\n    }\r\n\r\n    return;\r\n  }\r\n\r\n  const killCursorCmd = {\r\n    killCursors: collectionNamespace(ns),\r\n    cursors: [cursorId]\r\n  };\r\n\r\n  const options = {};\r\n  if (typeof cursorState.session === 'object') options.session = cursorState.session;\r\n\r\n  command(server, ns, killCursorCmd, options, (err, result) => {\r\n    if (err) {\r\n      return callback(err);\r\n    }\r\n\r\n    const response = result.message;\r\n    if (response.cursorNotFound) {\r\n      return callback(new MongoNetworkError('cursor killed or timed out'), null);\r\n    }\r\n\r\n    if (!Array.isArray(response.documents) || response.documents.length === 0) {\r\n      return callback(\r\n        new MongoError(`invalid killCursors result returned for cursor id ${cursorId}`)\r\n      );\r\n    }\r\n\r\n    callback(null, response.documents[0]);\r\n  });\r\n}\r\n\r\nmodule.exports = killCursors;\r\n"]},"metadata":{},"sourceType":"script"}